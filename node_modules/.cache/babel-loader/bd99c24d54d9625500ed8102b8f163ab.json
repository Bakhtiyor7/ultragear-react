{"ast":null,"code":"import _get from \"/Users/baxtiyoraxatov/Desktop/Desktop/ultragear-react/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/baxtiyoraxatov/Desktop/Desktop/ultragear-react/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/baxtiyoraxatov/Desktop/Desktop/ultragear-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/baxtiyoraxatov/Desktop/Desktop/ultragear-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"/Users/baxtiyoraxatov/Desktop/Desktop/ultragear-react/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport _classCallCheck from \"/Users/baxtiyoraxatov/Desktop/Desktop/ultragear-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/baxtiyoraxatov/Desktop/Desktop/ultragear-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport OrderedMap from 'orderedmap';\nfunction _findDiffStart(a, b, pos) {\n  for (var i = 0;; i++) {\n    if (i == a.childCount || i == b.childCount) return a.childCount == b.childCount ? null : pos;\n    var childA = a.child(i),\n      childB = b.child(i);\n    if (childA == childB) {\n      pos += childA.nodeSize;\n      continue;\n    }\n    if (!childA.sameMarkup(childB)) return pos;\n    if (childA.isText && childA.text != childB.text) {\n      for (var j = 0; childA.text[j] == childB.text[j]; j++) {\n        pos++;\n      }\n      return pos;\n    }\n    if (childA.content.size || childB.content.size) {\n      var inner = _findDiffStart(childA.content, childB.content, pos + 1);\n      if (inner != null) return inner;\n    }\n    pos += childA.nodeSize;\n  }\n}\nfunction _findDiffEnd(a, b, posA, posB) {\n  for (var iA = a.childCount, iB = b.childCount;;) {\n    if (iA == 0 || iB == 0) return iA == iB ? null : {\n      a: posA,\n      b: posB\n    };\n    var childA = a.child(--iA),\n      childB = b.child(--iB),\n      size = childA.nodeSize;\n    if (childA == childB) {\n      posA -= size;\n      posB -= size;\n      continue;\n    }\n    if (!childA.sameMarkup(childB)) return {\n      a: posA,\n      b: posB\n    };\n    if (childA.isText && childA.text != childB.text) {\n      var same = 0,\n        minSize = Math.min(childA.text.length, childB.text.length);\n      while (same < minSize && childA.text[childA.text.length - same - 1] == childB.text[childB.text.length - same - 1]) {\n        same++;\n        posA--;\n        posB--;\n      }\n      return {\n        a: posA,\n        b: posB\n      };\n    }\n    if (childA.content.size || childB.content.size) {\n      var inner = _findDiffEnd(childA.content, childB.content, posA - 1, posB - 1);\n      if (inner) return inner;\n    }\n    posA -= size;\n    posB -= size;\n  }\n}\n\n/**\nA fragment represents a node's collection of child nodes.\n\nLike nodes, fragments are persistent data structures, and you\nshould not mutate them or their content. Rather, you create new\ninstances whenever needed. The API tries to make this easy.\n*/\nvar Fragment = /*#__PURE__*/function () {\n  /**\n  @internal\n  */\n  function Fragment(\n  /**\n  @internal\n  */\n  content, size) {\n    _classCallCheck(this, Fragment);\n    this.content = content;\n    this.size = size || 0;\n    if (size == null) for (var i = 0; i < content.length; i++) {\n      this.size += content[i].nodeSize;\n    }\n  }\n  /**\n  Invoke a callback for all descendant nodes between the given two\n  positions (relative to start of this fragment). Doesn't descend\n  into a node when the callback returns `false`.\n  */\n  _createClass(Fragment, [{\n    key: \"nodesBetween\",\n    value: function nodesBetween(from, to, f) {\n      var nodeStart = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      var parent = arguments.length > 4 ? arguments[4] : undefined;\n      for (var i = 0, pos = 0; pos < to; i++) {\n        var child = this.content[i],\n          end = pos + child.nodeSize;\n        if (end > from && f(child, nodeStart + pos, parent || null, i) !== false && child.content.size) {\n          var start = pos + 1;\n          child.nodesBetween(Math.max(0, from - start), Math.min(child.content.size, to - start), f, nodeStart + start);\n        }\n        pos = end;\n      }\n    }\n    /**\n    Call the given callback for every descendant node. `pos` will be\n    relative to the start of the fragment. The callback may return\n    `false` to prevent traversal of a given node's children.\n    */\n  }, {\n    key: \"descendants\",\n    value: function descendants(f) {\n      this.nodesBetween(0, this.size, f);\n    }\n    /**\n    Extract the text between `from` and `to`. See the same method on\n    [`Node`](https://prosemirror.net/docs/ref/#model.Node.textBetween).\n    */\n  }, {\n    key: \"textBetween\",\n    value: function textBetween(from, to, blockSeparator, leafText) {\n      var text = \"\",\n        separated = true;\n      this.nodesBetween(from, to, function (node, pos) {\n        if (node.isText) {\n          text += node.text.slice(Math.max(from, pos) - pos, to - pos);\n          separated = !blockSeparator;\n        } else if (node.isLeaf) {\n          if (leafText) {\n            text += typeof leafText === \"function\" ? leafText(node) : leafText;\n          } else if (node.type.spec.leafText) {\n            text += node.type.spec.leafText(node);\n          }\n          separated = !blockSeparator;\n        } else if (!separated && node.isBlock) {\n          text += blockSeparator;\n          separated = true;\n        }\n      }, 0);\n      return text;\n    }\n    /**\n    Create a new fragment containing the combined content of this\n    fragment and the other.\n    */\n  }, {\n    key: \"append\",\n    value: function append(other) {\n      if (!other.size) return this;\n      if (!this.size) return other;\n      var last = this.lastChild,\n        first = other.firstChild,\n        content = this.content.slice(),\n        i = 0;\n      if (last.isText && last.sameMarkup(first)) {\n        content[content.length - 1] = last.withText(last.text + first.text);\n        i = 1;\n      }\n      for (; i < other.content.length; i++) {\n        content.push(other.content[i]);\n      }\n      return new Fragment(content, this.size + other.size);\n    }\n    /**\n    Cut out the sub-fragment between the two given positions.\n    */\n  }, {\n    key: \"cut\",\n    value: function cut(from) {\n      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.size;\n      if (from == 0 && to == this.size) return this;\n      var result = [],\n        size = 0;\n      if (to > from) for (var i = 0, pos = 0; pos < to; i++) {\n        var child = this.content[i],\n          end = pos + child.nodeSize;\n        if (end > from) {\n          if (pos < from || end > to) {\n            if (child.isText) child = child.cut(Math.max(0, from - pos), Math.min(child.text.length, to - pos));else child = child.cut(Math.max(0, from - pos - 1), Math.min(child.content.size, to - pos - 1));\n          }\n          result.push(child);\n          size += child.nodeSize;\n        }\n        pos = end;\n      }\n      return new Fragment(result, size);\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"cutByIndex\",\n    value: function cutByIndex(from, to) {\n      if (from == to) return Fragment.empty;\n      if (from == 0 && to == this.content.length) return this;\n      return new Fragment(this.content.slice(from, to));\n    }\n    /**\n    Create a new fragment in which the node at the given index is\n    replaced by the given node.\n    */\n  }, {\n    key: \"replaceChild\",\n    value: function replaceChild(index, node) {\n      var current = this.content[index];\n      if (current == node) return this;\n      var copy = this.content.slice();\n      var size = this.size + node.nodeSize - current.nodeSize;\n      copy[index] = node;\n      return new Fragment(copy, size);\n    }\n    /**\n    Create a new fragment by prepending the given node to this\n    fragment.\n    */\n  }, {\n    key: \"addToStart\",\n    value: function addToStart(node) {\n      return new Fragment([node].concat(this.content), this.size + node.nodeSize);\n    }\n    /**\n    Create a new fragment by appending the given node to this\n    fragment.\n    */\n  }, {\n    key: \"addToEnd\",\n    value: function addToEnd(node) {\n      return new Fragment(this.content.concat(node), this.size + node.nodeSize);\n    }\n    /**\n    Compare this fragment to another one.\n    */\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      if (this.content.length != other.content.length) return false;\n      for (var i = 0; i < this.content.length; i++) {\n        if (!this.content[i].eq(other.content[i])) return false;\n      }\n      return true;\n    }\n    /**\n    The first child of the fragment, or `null` if it is empty.\n    */\n  }, {\n    key: \"firstChild\",\n    get: function get() {\n      return this.content.length ? this.content[0] : null;\n    }\n    /**\n    The last child of the fragment, or `null` if it is empty.\n    */\n  }, {\n    key: \"lastChild\",\n    get: function get() {\n      return this.content.length ? this.content[this.content.length - 1] : null;\n    }\n    /**\n    The number of child nodes in this fragment.\n    */\n  }, {\n    key: \"childCount\",\n    get: function get() {\n      return this.content.length;\n    }\n    /**\n    Get the child node at the given index. Raise an error when the\n    index is out of range.\n    */\n  }, {\n    key: \"child\",\n    value: function child(index) {\n      var found = this.content[index];\n      if (!found) throw new RangeError(\"Index \" + index + \" out of range for \" + this);\n      return found;\n    }\n    /**\n    Get the child node at the given index, if it exists.\n    */\n  }, {\n    key: \"maybeChild\",\n    value: function maybeChild(index) {\n      return this.content[index] || null;\n    }\n    /**\n    Call `f` for every child node, passing the node, its offset\n    into this parent node, and its index.\n    */\n  }, {\n    key: \"forEach\",\n    value: function forEach(f) {\n      for (var i = 0, p = 0; i < this.content.length; i++) {\n        var child = this.content[i];\n        f(child, p, i);\n        p += child.nodeSize;\n      }\n    }\n    /**\n    Find the first position at which this fragment and another\n    fragment differ, or `null` if they are the same.\n    */\n  }, {\n    key: \"findDiffStart\",\n    value: function findDiffStart(other) {\n      var pos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return _findDiffStart(this, other, pos);\n    }\n    /**\n    Find the first position, searching from the end, at which this\n    fragment and the given fragment differ, or `null` if they are\n    the same. Since this position will not be the same in both\n    nodes, an object with two separate positions is returned.\n    */\n  }, {\n    key: \"findDiffEnd\",\n    value: function findDiffEnd(other) {\n      var pos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.size;\n      var otherPos = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : other.size;\n      return _findDiffEnd(this, other, pos, otherPos);\n    }\n    /**\n    Find the index and inner offset corresponding to a given relative\n    position in this fragment. The result object will be reused\n    (overwritten) the next time the function is called. (Not public.)\n    */\n  }, {\n    key: \"findIndex\",\n    value: function findIndex(pos) {\n      var round = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n      if (pos == 0) return retIndex(0, pos);\n      if (pos == this.size) return retIndex(this.content.length, pos);\n      if (pos > this.size || pos < 0) throw new RangeError(\"Position \".concat(pos, \" outside of fragment (\").concat(this, \")\"));\n      for (var i = 0, curPos = 0;; i++) {\n        var cur = this.child(i),\n          end = curPos + cur.nodeSize;\n        if (end >= pos) {\n          if (end == pos || round > 0) return retIndex(i + 1, end);\n          return retIndex(i, curPos);\n        }\n        curPos = end;\n      }\n    }\n    /**\n    Return a debugging string that describes this fragment.\n    */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"<\" + this.toStringInner() + \">\";\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"toStringInner\",\n    value: function toStringInner() {\n      return this.content.join(\", \");\n    }\n    /**\n    Create a JSON-serializeable representation of this fragment.\n    */\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.content.length ? this.content.map(function (n) {\n        return n.toJSON();\n      }) : null;\n    }\n    /**\n    Deserialize a fragment from its JSON representation.\n    */\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(schema, value) {\n      if (!value) return Fragment.empty;\n      if (!Array.isArray(value)) throw new RangeError(\"Invalid input for Fragment.fromJSON\");\n      return new Fragment(value.map(schema.nodeFromJSON));\n    }\n    /**\n    Build a fragment from an array of nodes. Ensures that adjacent\n    text nodes with the same marks are joined together.\n    */\n  }, {\n    key: \"fromArray\",\n    value: function fromArray(array) {\n      if (!array.length) return Fragment.empty;\n      var joined,\n        size = 0;\n      for (var i = 0; i < array.length; i++) {\n        var node = array[i];\n        size += node.nodeSize;\n        if (i && node.isText && array[i - 1].sameMarkup(node)) {\n          if (!joined) joined = array.slice(0, i);\n          joined[joined.length - 1] = node.withText(joined[joined.length - 1].text + node.text);\n        } else if (joined) {\n          joined.push(node);\n        }\n      }\n      return new Fragment(joined || array, size);\n    }\n    /**\n    Create a fragment from something that can be interpreted as a\n    set of nodes. For `null`, it returns the empty fragment. For a\n    fragment, the fragment itself. For a node or array of nodes, a\n    fragment containing those nodes.\n    */\n  }, {\n    key: \"from\",\n    value: function from(nodes) {\n      if (!nodes) return Fragment.empty;\n      if (nodes instanceof Fragment) return nodes;\n      if (Array.isArray(nodes)) return this.fromArray(nodes);\n      if (nodes.attrs) return new Fragment([nodes], nodes.nodeSize);\n      throw new RangeError(\"Can not convert \" + nodes + \" to a Fragment\" + (nodes.nodesBetween ? \" (looks like multiple versions of prosemirror-model were loaded)\" : \"\"));\n    }\n  }]);\n  return Fragment;\n}();\n/**\nAn empty fragment. Intended to be reused whenever a node doesn't\ncontain anything (rather than allocating a new empty fragment for\neach leaf node).\n*/\nFragment.empty = new Fragment([], 0);\nvar found = {\n  index: 0,\n  offset: 0\n};\nfunction retIndex(index, offset) {\n  found.index = index;\n  found.offset = offset;\n  return found;\n}\nfunction compareDeep(a, b) {\n  if (a === b) return true;\n  if (!(a && typeof a == \"object\") || !(b && typeof b == \"object\")) return false;\n  var array = Array.isArray(a);\n  if (Array.isArray(b) != array) return false;\n  if (array) {\n    if (a.length != b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!compareDeep(a[i], b[i])) return false;\n    }\n  } else {\n    for (var p in a) {\n      if (!(p in b) || !compareDeep(a[p], b[p])) return false;\n    }\n    for (var _p in b) {\n      if (!(_p in a)) return false;\n    }\n  }\n  return true;\n}\n\n/**\nA mark is a piece of information that can be attached to a node,\nsuch as it being emphasized, in code font, or a link. It has a\ntype and optionally a set of attributes that provide further\ninformation (such as the target of the link). Marks are created\nthrough a `Schema`, which controls which types exist and which\nattributes they have.\n*/\nvar Mark = /*#__PURE__*/function () {\n  /**\n  @internal\n  */\n  function Mark(\n  /**\n  The type of this mark.\n  */\n  type,\n  /**\n  The attributes associated with this mark.\n  */\n  attrs) {\n    _classCallCheck(this, Mark);\n    this.type = type;\n    this.attrs = attrs;\n  }\n  /**\n  Given a set of marks, create a new set which contains this one as\n  well, in the right position. If this mark is already in the set,\n  the set itself is returned. If any marks that are set to be\n  [exclusive](https://prosemirror.net/docs/ref/#model.MarkSpec.excludes) with this mark are present,\n  those are replaced by this one.\n  */\n  _createClass(Mark, [{\n    key: \"addToSet\",\n    value: function addToSet(set) {\n      var copy,\n        placed = false;\n      for (var i = 0; i < set.length; i++) {\n        var other = set[i];\n        if (this.eq(other)) return set;\n        if (this.type.excludes(other.type)) {\n          if (!copy) copy = set.slice(0, i);\n        } else if (other.type.excludes(this.type)) {\n          return set;\n        } else {\n          if (!placed && other.type.rank > this.type.rank) {\n            if (!copy) copy = set.slice(0, i);\n            copy.push(this);\n            placed = true;\n          }\n          if (copy) copy.push(other);\n        }\n      }\n      if (!copy) copy = set.slice();\n      if (!placed) copy.push(this);\n      return copy;\n    }\n    /**\n    Remove this mark from the given set, returning a new set. If this\n    mark is not in the set, the set itself is returned.\n    */\n  }, {\n    key: \"removeFromSet\",\n    value: function removeFromSet(set) {\n      for (var i = 0; i < set.length; i++) {\n        if (this.eq(set[i])) return set.slice(0, i).concat(set.slice(i + 1));\n      }\n      return set;\n    }\n    /**\n    Test whether this mark is in the given set of marks.\n    */\n  }, {\n    key: \"isInSet\",\n    value: function isInSet(set) {\n      for (var i = 0; i < set.length; i++) {\n        if (this.eq(set[i])) return true;\n      }\n      return false;\n    }\n    /**\n    Test whether this mark has the same type and attributes as\n    another mark.\n    */\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      return this == other || this.type == other.type && compareDeep(this.attrs, other.attrs);\n    }\n    /**\n    Convert this mark to a JSON-serializeable representation.\n    */\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var obj = {\n        type: this.type.name\n      };\n      for (var _ in this.attrs) {\n        obj.attrs = this.attrs;\n        break;\n      }\n      return obj;\n    }\n    /**\n    Deserialize a mark from JSON.\n    */\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(schema, json) {\n      if (!json) throw new RangeError(\"Invalid input for Mark.fromJSON\");\n      var type = schema.marks[json.type];\n      if (!type) throw new RangeError(\"There is no mark type \".concat(json.type, \" in this schema\"));\n      return type.create(json.attrs);\n    }\n    /**\n    Test whether two sets of marks are identical.\n    */\n  }, {\n    key: \"sameSet\",\n    value: function sameSet(a, b) {\n      if (a == b) return true;\n      if (a.length != b.length) return false;\n      for (var i = 0; i < a.length; i++) {\n        if (!a[i].eq(b[i])) return false;\n      }\n      return true;\n    }\n    /**\n    Create a properly sorted mark set from null, a single mark, or an\n    unsorted array of marks.\n    */\n  }, {\n    key: \"setFrom\",\n    value: function setFrom(marks) {\n      if (!marks || Array.isArray(marks) && marks.length == 0) return Mark.none;\n      if (marks instanceof Mark) return [marks];\n      var copy = marks.slice();\n      copy.sort(function (a, b) {\n        return a.type.rank - b.type.rank;\n      });\n      return copy;\n    }\n  }]);\n  return Mark;\n}();\n/**\nThe empty set of marks.\n*/\nMark.none = [];\n\n/**\nError type raised by [`Node.replace`](https://prosemirror.net/docs/ref/#model.Node.replace) when\ngiven an invalid replacement.\n*/\nvar ReplaceError = /*#__PURE__*/function (_Error) {\n  _inherits(ReplaceError, _Error);\n  var _super = _createSuper(ReplaceError);\n  function ReplaceError() {\n    _classCallCheck(this, ReplaceError);\n    return _super.apply(this, arguments);\n  }\n  return _createClass(ReplaceError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/*\nReplaceError = function(this: any, message: string) {\n  let err = Error.call(this, message)\n  ;(err as any).__proto__ = ReplaceError.prototype\n  return err\n} as any\n\nReplaceError.prototype = Object.create(Error.prototype)\nReplaceError.prototype.constructor = ReplaceError\nReplaceError.prototype.name = \"ReplaceError\"\n*/\n/**\nA slice represents a piece cut out of a larger document. It\nstores not only a fragment, but also the depth up to which nodes on\nboth side are ‘open’ (cut through).\n*/\nvar Slice = /*#__PURE__*/function () {\n  /**\n  Create a slice. When specifying a non-zero open depth, you must\n  make sure that there are nodes of at least that depth at the\n  appropriate side of the fragment—i.e. if the fragment is an\n  empty paragraph node, `openStart` and `openEnd` can't be greater\n  than 1.\n  \n  It is not necessary for the content of open nodes to conform to\n  the schema's content constraints, though it should be a valid\n  start/end/middle for such a node, depending on which sides are\n  open.\n  */\n  function Slice(\n  /**\n  The slice's content.\n  */\n  content,\n  /**\n  The open depth at the start of the fragment.\n  */\n  openStart,\n  /**\n  The open depth at the end.\n  */\n  openEnd) {\n    _classCallCheck(this, Slice);\n    this.content = content;\n    this.openStart = openStart;\n    this.openEnd = openEnd;\n  }\n  /**\n  The size this slice would add when inserted into a document.\n  */\n  _createClass(Slice, [{\n    key: \"size\",\n    get: function get() {\n      return this.content.size - this.openStart - this.openEnd;\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"insertAt\",\n    value: function insertAt(pos, fragment) {\n      var content = insertInto(this.content, pos + this.openStart, fragment);\n      return content && new Slice(content, this.openStart, this.openEnd);\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"removeBetween\",\n    value: function removeBetween(from, to) {\n      return new Slice(removeRange(this.content, from + this.openStart, to + this.openStart), this.openStart, this.openEnd);\n    }\n    /**\n    Tests whether this slice is equal to another slice.\n    */\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      return this.content.eq(other.content) && this.openStart == other.openStart && this.openEnd == other.openEnd;\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.content + \"(\" + this.openStart + \",\" + this.openEnd + \")\";\n    }\n    /**\n    Convert a slice to a JSON-serializable representation.\n    */\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      if (!this.content.size) return null;\n      var json = {\n        content: this.content.toJSON()\n      };\n      if (this.openStart > 0) json.openStart = this.openStart;\n      if (this.openEnd > 0) json.openEnd = this.openEnd;\n      return json;\n    }\n    /**\n    Deserialize a slice from its JSON representation.\n    */\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(schema, json) {\n      if (!json) return Slice.empty;\n      var openStart = json.openStart || 0,\n        openEnd = json.openEnd || 0;\n      if (typeof openStart != \"number\" || typeof openEnd != \"number\") throw new RangeError(\"Invalid input for Slice.fromJSON\");\n      return new Slice(Fragment.fromJSON(schema, json.content), openStart, openEnd);\n    }\n    /**\n    Create a slice from a fragment by taking the maximum possible\n    open value on both side of the fragment.\n    */\n  }, {\n    key: \"maxOpen\",\n    value: function maxOpen(fragment) {\n      var openIsolating = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var openStart = 0,\n        openEnd = 0;\n      for (var n = fragment.firstChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.firstChild) {\n        openStart++;\n      }\n      for (var _n = fragment.lastChild; _n && !_n.isLeaf && (openIsolating || !_n.type.spec.isolating); _n = _n.lastChild) {\n        openEnd++;\n      }\n      return new Slice(fragment, openStart, openEnd);\n    }\n  }]);\n  return Slice;\n}();\n/**\nThe empty slice.\n*/\nSlice.empty = new Slice(Fragment.empty, 0, 0);\nfunction removeRange(content, from, to) {\n  var _content$findIndex = content.findIndex(from),\n    index = _content$findIndex.index,\n    offset = _content$findIndex.offset,\n    child = content.maybeChild(index);\n  var _content$findIndex2 = content.findIndex(to),\n    indexTo = _content$findIndex2.index,\n    offsetTo = _content$findIndex2.offset;\n  if (offset == from || child.isText) {\n    if (offsetTo != to && !content.child(indexTo).isText) throw new RangeError(\"Removing non-flat range\");\n    return content.cut(0, from).append(content.cut(to));\n  }\n  if (index != indexTo) throw new RangeError(\"Removing non-flat range\");\n  return content.replaceChild(index, child.copy(removeRange(child.content, from - offset - 1, to - offset - 1)));\n}\nfunction insertInto(content, dist, insert, parent) {\n  var _content$findIndex3 = content.findIndex(dist),\n    index = _content$findIndex3.index,\n    offset = _content$findIndex3.offset,\n    child = content.maybeChild(index);\n  if (offset == dist || child.isText) {\n    if (parent && !parent.canReplace(index, index, insert)) return null;\n    return content.cut(0, dist).append(insert).append(content.cut(dist));\n  }\n  var inner = insertInto(child.content, dist - offset - 1, insert);\n  return inner && content.replaceChild(index, child.copy(inner));\n}\nfunction _replace($from, $to, slice) {\n  if (slice.openStart > $from.depth) throw new ReplaceError(\"Inserted content deeper than insertion position\");\n  if ($from.depth - slice.openStart != $to.depth - slice.openEnd) throw new ReplaceError(\"Inconsistent open depths\");\n  return replaceOuter($from, $to, slice, 0);\n}\nfunction replaceOuter($from, $to, slice, depth) {\n  var index = $from.index(depth),\n    node = $from.node(depth);\n  if (index == $to.index(depth) && depth < $from.depth - slice.openStart) {\n    var inner = replaceOuter($from, $to, slice, depth + 1);\n    return node.copy(node.content.replaceChild(index, inner));\n  } else if (!slice.content.size) {\n    return close(node, replaceTwoWay($from, $to, depth));\n  } else if (!slice.openStart && !slice.openEnd && $from.depth == depth && $to.depth == depth) {\n    // Simple, flat case\n    var parent = $from.parent,\n      content = parent.content;\n    return close(parent, content.cut(0, $from.parentOffset).append(slice.content).append(content.cut($to.parentOffset)));\n  } else {\n    var _prepareSliceForRepla = prepareSliceForReplace(slice, $from),\n      start = _prepareSliceForRepla.start,\n      end = _prepareSliceForRepla.end;\n    return close(node, replaceThreeWay($from, start, end, $to, depth));\n  }\n}\nfunction checkJoin(main, sub) {\n  if (!sub.type.compatibleContent(main.type)) throw new ReplaceError(\"Cannot join \" + sub.type.name + \" onto \" + main.type.name);\n}\nfunction joinable($before, $after, depth) {\n  var node = $before.node(depth);\n  checkJoin(node, $after.node(depth));\n  return node;\n}\nfunction addNode(child, target) {\n  var last = target.length - 1;\n  if (last >= 0 && child.isText && child.sameMarkup(target[last])) target[last] = child.withText(target[last].text + child.text);else target.push(child);\n}\nfunction addRange($start, $end, depth, target) {\n  var node = ($end || $start).node(depth);\n  var startIndex = 0,\n    endIndex = $end ? $end.index(depth) : node.childCount;\n  if ($start) {\n    startIndex = $start.index(depth);\n    if ($start.depth > depth) {\n      startIndex++;\n    } else if ($start.textOffset) {\n      addNode($start.nodeAfter, target);\n      startIndex++;\n    }\n  }\n  for (var i = startIndex; i < endIndex; i++) {\n    addNode(node.child(i), target);\n  }\n  if ($end && $end.depth == depth && $end.textOffset) addNode($end.nodeBefore, target);\n}\nfunction close(node, content) {\n  if (!node.type.validContent(content)) throw new ReplaceError(\"Invalid content for node \" + node.type.name);\n  return node.copy(content);\n}\nfunction replaceThreeWay($from, $start, $end, $to, depth) {\n  var openStart = $from.depth > depth && joinable($from, $start, depth + 1);\n  var openEnd = $to.depth > depth && joinable($end, $to, depth + 1);\n  var content = [];\n  addRange(null, $from, depth, content);\n  if (openStart && openEnd && $start.index(depth) == $end.index(depth)) {\n    checkJoin(openStart, openEnd);\n    addNode(close(openStart, replaceThreeWay($from, $start, $end, $to, depth + 1)), content);\n  } else {\n    if (openStart) addNode(close(openStart, replaceTwoWay($from, $start, depth + 1)), content);\n    addRange($start, $end, depth, content);\n    if (openEnd) addNode(close(openEnd, replaceTwoWay($end, $to, depth + 1)), content);\n  }\n  addRange($to, null, depth, content);\n  return new Fragment(content);\n}\nfunction replaceTwoWay($from, $to, depth) {\n  var content = [];\n  addRange(null, $from, depth, content);\n  if ($from.depth > depth) {\n    var type = joinable($from, $to, depth + 1);\n    addNode(close(type, replaceTwoWay($from, $to, depth + 1)), content);\n  }\n  addRange($to, null, depth, content);\n  return new Fragment(content);\n}\nfunction prepareSliceForReplace(slice, $along) {\n  var extra = $along.depth - slice.openStart,\n    parent = $along.node(extra);\n  var node = parent.copy(slice.content);\n  for (var i = extra - 1; i >= 0; i--) {\n    node = $along.node(i).copy(Fragment.from(node));\n  }\n  return {\n    start: node.resolveNoCache(slice.openStart + extra),\n    end: node.resolveNoCache(node.content.size - slice.openEnd - extra)\n  };\n}\n\n/**\nYou can [_resolve_](https://prosemirror.net/docs/ref/#model.Node.resolve) a position to get more\ninformation about it. Objects of this class represent such a\nresolved position, providing various pieces of context\ninformation, and some helper methods.\n\nThroughout this interface, methods that take an optional `depth`\nparameter will interpret undefined as `this.depth` and negative\nnumbers as `this.depth + value`.\n*/\nvar ResolvedPos = /*#__PURE__*/function () {\n  /**\n  @internal\n  */\n  function ResolvedPos(\n  /**\n  The position that was resolved.\n  */\n  pos,\n  /**\n  @internal\n  */\n  path,\n  /**\n  The offset this position has into its parent node.\n  */\n  parentOffset) {\n    _classCallCheck(this, ResolvedPos);\n    this.pos = pos;\n    this.path = path;\n    this.parentOffset = parentOffset;\n    this.depth = path.length / 3 - 1;\n  }\n  /**\n  @internal\n  */\n  _createClass(ResolvedPos, [{\n    key: \"resolveDepth\",\n    value: function resolveDepth(val) {\n      if (val == null) return this.depth;\n      if (val < 0) return this.depth + val;\n      return val;\n    }\n    /**\n    The parent node that the position points into. Note that even if\n    a position points into a text node, that node is not considered\n    the parent—text nodes are ‘flat’ in this model, and have no content.\n    */\n  }, {\n    key: \"parent\",\n    get: function get() {\n      return this.node(this.depth);\n    }\n    /**\n    The root node in which the position was resolved.\n    */\n  }, {\n    key: \"doc\",\n    get: function get() {\n      return this.node(0);\n    }\n    /**\n    The ancestor node at the given level. `p.node(p.depth)` is the\n    same as `p.parent`.\n    */\n  }, {\n    key: \"node\",\n    value: function node(depth) {\n      return this.path[this.resolveDepth(depth) * 3];\n    }\n    /**\n    The index into the ancestor at the given level. If this points\n    at the 3rd node in the 2nd paragraph on the top level, for\n    example, `p.index(0)` is 1 and `p.index(1)` is 2.\n    */\n  }, {\n    key: \"index\",\n    value: function index(depth) {\n      return this.path[this.resolveDepth(depth) * 3 + 1];\n    }\n    /**\n    The index pointing after this position into the ancestor at the\n    given level.\n    */\n  }, {\n    key: \"indexAfter\",\n    value: function indexAfter(depth) {\n      depth = this.resolveDepth(depth);\n      return this.index(depth) + (depth == this.depth && !this.textOffset ? 0 : 1);\n    }\n    /**\n    The (absolute) position at the start of the node at the given\n    level.\n    */\n  }, {\n    key: \"start\",\n    value: function start(depth) {\n      depth = this.resolveDepth(depth);\n      return depth == 0 ? 0 : this.path[depth * 3 - 1] + 1;\n    }\n    /**\n    The (absolute) position at the end of the node at the given\n    level.\n    */\n  }, {\n    key: \"end\",\n    value: function end(depth) {\n      depth = this.resolveDepth(depth);\n      return this.start(depth) + this.node(depth).content.size;\n    }\n    /**\n    The (absolute) position directly before the wrapping node at the\n    given level, or, when `depth` is `this.depth + 1`, the original\n    position.\n    */\n  }, {\n    key: \"before\",\n    value: function before(depth) {\n      depth = this.resolveDepth(depth);\n      if (!depth) throw new RangeError(\"There is no position before the top-level node\");\n      return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1];\n    }\n    /**\n    The (absolute) position directly after the wrapping node at the\n    given level, or the original position when `depth` is `this.depth + 1`.\n    */\n  }, {\n    key: \"after\",\n    value: function after(depth) {\n      depth = this.resolveDepth(depth);\n      if (!depth) throw new RangeError(\"There is no position after the top-level node\");\n      return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1] + this.path[depth * 3].nodeSize;\n    }\n    /**\n    When this position points into a text node, this returns the\n    distance between the position and the start of the text node.\n    Will be zero for positions that point between nodes.\n    */\n  }, {\n    key: \"textOffset\",\n    get: function get() {\n      return this.pos - this.path[this.path.length - 1];\n    }\n    /**\n    Get the node directly after the position, if any. If the position\n    points into a text node, only the part of that node after the\n    position is returned.\n    */\n  }, {\n    key: \"nodeAfter\",\n    get: function get() {\n      var parent = this.parent,\n        index = this.index(this.depth);\n      if (index == parent.childCount) return null;\n      var dOff = this.pos - this.path[this.path.length - 1],\n        child = parent.child(index);\n      return dOff ? parent.child(index).cut(dOff) : child;\n    }\n    /**\n    Get the node directly before the position, if any. If the\n    position points into a text node, only the part of that node\n    before the position is returned.\n    */\n  }, {\n    key: \"nodeBefore\",\n    get: function get() {\n      var index = this.index(this.depth);\n      var dOff = this.pos - this.path[this.path.length - 1];\n      if (dOff) return this.parent.child(index).cut(0, dOff);\n      return index == 0 ? null : this.parent.child(index - 1);\n    }\n    /**\n    Get the position at the given index in the parent node at the\n    given depth (which defaults to `this.depth`).\n    */\n  }, {\n    key: \"posAtIndex\",\n    value: function posAtIndex(index, depth) {\n      depth = this.resolveDepth(depth);\n      var node = this.path[depth * 3],\n        pos = depth == 0 ? 0 : this.path[depth * 3 - 1] + 1;\n      for (var i = 0; i < index; i++) {\n        pos += node.child(i).nodeSize;\n      }\n      return pos;\n    }\n    /**\n    Get the marks at this position, factoring in the surrounding\n    marks' [`inclusive`](https://prosemirror.net/docs/ref/#model.MarkSpec.inclusive) property. If the\n    position is at the start of a non-empty node, the marks of the\n    node after it (if any) are returned.\n    */\n  }, {\n    key: \"marks\",\n    value: function marks() {\n      var parent = this.parent,\n        index = this.index();\n      // In an empty parent, return the empty array\n      if (parent.content.size == 0) return Mark.none;\n      // When inside a text node, just return the text node's marks\n      if (this.textOffset) return parent.child(index).marks;\n      var main = parent.maybeChild(index - 1),\n        other = parent.maybeChild(index);\n      // If the `after` flag is true of there is no node before, make\n      // the node after this position the main reference.\n      if (!main) {\n        var tmp = main;\n        main = other;\n        other = tmp;\n      }\n      // Use all marks in the main node, except those that have\n      // `inclusive` set to false and are not present in the other node.\n      var marks = main.marks;\n      for (var i = 0; i < marks.length; i++) {\n        if (marks[i].type.spec.inclusive === false && (!other || !marks[i].isInSet(other.marks))) marks = marks[i--].removeFromSet(marks);\n      }\n      return marks;\n    }\n    /**\n    Get the marks after the current position, if any, except those\n    that are non-inclusive and not present at position `$end`. This\n    is mostly useful for getting the set of marks to preserve after a\n    deletion. Will return `null` if this position is at the end of\n    its parent node or its parent node isn't a textblock (in which\n    case no marks should be preserved).\n    */\n  }, {\n    key: \"marksAcross\",\n    value: function marksAcross($end) {\n      var after = this.parent.maybeChild(this.index());\n      if (!after || !after.isInline) return null;\n      var marks = after.marks,\n        next = $end.parent.maybeChild($end.index());\n      for (var i = 0; i < marks.length; i++) {\n        if (marks[i].type.spec.inclusive === false && (!next || !marks[i].isInSet(next.marks))) marks = marks[i--].removeFromSet(marks);\n      }\n      return marks;\n    }\n    /**\n    The depth up to which this position and the given (non-resolved)\n    position share the same parent nodes.\n    */\n  }, {\n    key: \"sharedDepth\",\n    value: function sharedDepth(pos) {\n      for (var depth = this.depth; depth > 0; depth--) {\n        if (this.start(depth) <= pos && this.end(depth) >= pos) return depth;\n      }\n      return 0;\n    }\n    /**\n    Returns a range based on the place where this position and the\n    given position diverge around block content. If both point into\n    the same textblock, for example, a range around that textblock\n    will be returned. If they point into different blocks, the range\n    around those blocks in their shared ancestor is returned. You can\n    pass in an optional predicate that will be called with a parent\n    node to see if a range into that parent is acceptable.\n    */\n  }, {\n    key: \"blockRange\",\n    value: function blockRange() {\n      var other = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this;\n      var pred = arguments.length > 1 ? arguments[1] : undefined;\n      if (other.pos < this.pos) return other.blockRange(this);\n      for (var d = this.depth - (this.parent.inlineContent || this.pos == other.pos ? 1 : 0); d >= 0; d--) {\n        if (other.pos <= this.end(d) && (!pred || pred(this.node(d)))) return new NodeRange(this, other, d);\n      }\n      return null;\n    }\n    /**\n    Query whether the given position shares the same parent node.\n    */\n  }, {\n    key: \"sameParent\",\n    value: function sameParent(other) {\n      return this.pos - this.parentOffset == other.pos - other.parentOffset;\n    }\n    /**\n    Return the greater of this and the given position.\n    */\n  }, {\n    key: \"max\",\n    value: function max(other) {\n      return other.pos > this.pos ? other : this;\n    }\n    /**\n    Return the smaller of this and the given position.\n    */\n  }, {\n    key: \"min\",\n    value: function min(other) {\n      return other.pos < this.pos ? other : this;\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var str = \"\";\n      for (var i = 1; i <= this.depth; i++) {\n        str += (str ? \"/\" : \"\") + this.node(i).type.name + \"_\" + this.index(i - 1);\n      }\n      return str + \":\" + this.parentOffset;\n    }\n    /**\n    @internal\n    */\n  }], [{\n    key: \"resolve\",\n    value: function resolve(doc, pos) {\n      if (!(pos >= 0 && pos <= doc.content.size)) throw new RangeError(\"Position \" + pos + \" out of range\");\n      var path = [];\n      var start = 0,\n        parentOffset = pos;\n      for (var node = doc;;) {\n        var _node$content$findInd = node.content.findIndex(parentOffset),\n          index = _node$content$findInd.index,\n          offset = _node$content$findInd.offset;\n        var rem = parentOffset - offset;\n        path.push(node, index, start + offset);\n        if (!rem) break;\n        node = node.child(index);\n        if (node.isText) break;\n        parentOffset = rem - 1;\n        start += offset + 1;\n      }\n      return new ResolvedPos(pos, path, parentOffset);\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"resolveCached\",\n    value: function resolveCached(doc, pos) {\n      for (var i = 0; i < resolveCache.length; i++) {\n        var cached = resolveCache[i];\n        if (cached.pos == pos && cached.doc == doc) return cached;\n      }\n      var result = resolveCache[resolveCachePos] = ResolvedPos.resolve(doc, pos);\n      resolveCachePos = (resolveCachePos + 1) % resolveCacheSize;\n      return result;\n    }\n  }]);\n  return ResolvedPos;\n}();\nvar resolveCache = [],\n  resolveCachePos = 0,\n  resolveCacheSize = 12;\n/**\nRepresents a flat range of content, i.e. one that starts and\nends in the same node.\n*/\nvar NodeRange = /*#__PURE__*/function () {\n  /**\n  Construct a node range. `$from` and `$to` should point into the\n  same node until at least the given `depth`, since a node range\n  denotes an adjacent set of nodes in a single parent node.\n  */\n  function NodeRange(\n  /**\n  A resolved position along the start of the content. May have a\n  `depth` greater than this object's `depth` property, since\n  these are the positions that were used to compute the range,\n  not re-resolved positions directly at its boundaries.\n  */\n  $from,\n  /**\n  A position along the end of the content. See\n  caveat for [`$from`](https://prosemirror.net/docs/ref/#model.NodeRange.$from).\n  */\n  $to,\n  /**\n  The depth of the node that this range points into.\n  */\n  depth) {\n    _classCallCheck(this, NodeRange);\n    this.$from = $from;\n    this.$to = $to;\n    this.depth = depth;\n  }\n  /**\n  The position at the start of the range.\n  */\n  _createClass(NodeRange, [{\n    key: \"start\",\n    get: function get() {\n      return this.$from.before(this.depth + 1);\n    }\n    /**\n    The position at the end of the range.\n    */\n  }, {\n    key: \"end\",\n    get: function get() {\n      return this.$to.after(this.depth + 1);\n    }\n    /**\n    The parent node that the range points into.\n    */\n  }, {\n    key: \"parent\",\n    get: function get() {\n      return this.$from.node(this.depth);\n    }\n    /**\n    The start index of the range in the parent node.\n    */\n  }, {\n    key: \"startIndex\",\n    get: function get() {\n      return this.$from.index(this.depth);\n    }\n    /**\n    The end index of the range in the parent node.\n    */\n  }, {\n    key: \"endIndex\",\n    get: function get() {\n      return this.$to.indexAfter(this.depth);\n    }\n  }]);\n  return NodeRange;\n}();\nvar emptyAttrs = Object.create(null);\n/**\nThis class represents a node in the tree that makes up a\nProseMirror document. So a document is an instance of `Node`, with\nchildren that are also instances of `Node`.\n\nNodes are persistent data structures. Instead of changing them, you\ncreate new ones with the content you want. Old ones keep pointing\nat the old document shape. This is made cheaper by sharing\nstructure between the old and new data as much as possible, which a\ntree shape like this (without back pointers) makes easy.\n\n**Do not** directly mutate the properties of a `Node` object. See\n[the guide](/docs/guide/#doc) for more information.\n*/\nvar Node = /*#__PURE__*/function () {\n  /**\n  @internal\n  */\n  function Node(\n  /**\n  The type of node that this is.\n  */\n  type,\n  /**\n  An object mapping attribute names to values. The kind of\n  attributes allowed and required are\n  [determined](https://prosemirror.net/docs/ref/#model.NodeSpec.attrs) by the node type.\n  */\n  attrs,\n  // A fragment holding the node's children.\n  content) {\n    var marks = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Mark.none;\n    _classCallCheck(this, Node);\n    this.type = type;\n    this.attrs = attrs;\n    this.marks = marks;\n    this.content = content || Fragment.empty;\n  }\n  /**\n  The size of this node, as defined by the integer-based [indexing\n  scheme](/docs/guide/#doc.indexing). For text nodes, this is the\n  amount of characters. For other leaf nodes, it is one. For\n  non-leaf nodes, it is the size of the content plus two (the\n  start and end token).\n  */\n  _createClass(Node, [{\n    key: \"nodeSize\",\n    get: function get() {\n      return this.isLeaf ? 1 : 2 + this.content.size;\n    }\n    /**\n    The number of children that the node has.\n    */\n  }, {\n    key: \"childCount\",\n    get: function get() {\n      return this.content.childCount;\n    }\n    /**\n    Get the child node at the given index. Raises an error when the\n    index is out of range.\n    */\n  }, {\n    key: \"child\",\n    value: function child(index) {\n      return this.content.child(index);\n    }\n    /**\n    Get the child node at the given index, if it exists.\n    */\n  }, {\n    key: \"maybeChild\",\n    value: function maybeChild(index) {\n      return this.content.maybeChild(index);\n    }\n    /**\n    Call `f` for every child node, passing the node, its offset\n    into this parent node, and its index.\n    */\n  }, {\n    key: \"forEach\",\n    value: function forEach(f) {\n      this.content.forEach(f);\n    }\n    /**\n    Invoke a callback for all descendant nodes recursively between\n    the given two positions that are relative to start of this\n    node's content. The callback is invoked with the node, its\n    parent-relative position, its parent node, and its child index.\n    When the callback returns false for a given node, that node's\n    children will not be recursed over. The last parameter can be\n    used to specify a starting position to count from.\n    */\n  }, {\n    key: \"nodesBetween\",\n    value: function nodesBetween(from, to, f) {\n      var startPos = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      this.content.nodesBetween(from, to, f, startPos, this);\n    }\n    /**\n    Call the given callback for every descendant node. Doesn't\n    descend into a node when the callback returns `false`.\n    */\n  }, {\n    key: \"descendants\",\n    value: function descendants(f) {\n      this.nodesBetween(0, this.content.size, f);\n    }\n    /**\n    Concatenates all the text nodes found in this fragment and its\n    children.\n    */\n  }, {\n    key: \"textContent\",\n    get: function get() {\n      return this.isLeaf && this.type.spec.leafText ? this.type.spec.leafText(this) : this.textBetween(0, this.content.size, \"\");\n    }\n    /**\n    Get all text between positions `from` and `to`. When\n    `blockSeparator` is given, it will be inserted to separate text\n    from different block nodes. If `leafText` is given, it'll be\n    inserted for every non-text leaf node encountered, otherwise\n    [`leafText`](https://prosemirror.net/docs/ref/#model.NodeSpec^leafText) will be used.\n    */\n  }, {\n    key: \"textBetween\",\n    value: function textBetween(from, to, blockSeparator, leafText) {\n      return this.content.textBetween(from, to, blockSeparator, leafText);\n    }\n    /**\n    Returns this node's first child, or `null` if there are no\n    children.\n    */\n  }, {\n    key: \"firstChild\",\n    get: function get() {\n      return this.content.firstChild;\n    }\n    /**\n    Returns this node's last child, or `null` if there are no\n    children.\n    */\n  }, {\n    key: \"lastChild\",\n    get: function get() {\n      return this.content.lastChild;\n    }\n    /**\n    Test whether two nodes represent the same piece of document.\n    */\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      return this == other || this.sameMarkup(other) && this.content.eq(other.content);\n    }\n    /**\n    Compare the markup (type, attributes, and marks) of this node to\n    those of another. Returns `true` if both have the same markup.\n    */\n  }, {\n    key: \"sameMarkup\",\n    value: function sameMarkup(other) {\n      return this.hasMarkup(other.type, other.attrs, other.marks);\n    }\n    /**\n    Check whether this node's markup correspond to the given type,\n    attributes, and marks.\n    */\n  }, {\n    key: \"hasMarkup\",\n    value: function hasMarkup(type, attrs, marks) {\n      return this.type == type && compareDeep(this.attrs, attrs || type.defaultAttrs || emptyAttrs) && Mark.sameSet(this.marks, marks || Mark.none);\n    }\n    /**\n    Create a new node with the same markup as this node, containing\n    the given content (or empty, if no content is given).\n    */\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      var content = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      if (content == this.content) return this;\n      return new Node(this.type, this.attrs, content, this.marks);\n    }\n    /**\n    Create a copy of this node, with the given set of marks instead\n    of the node's own marks.\n    */\n  }, {\n    key: \"mark\",\n    value: function mark(marks) {\n      return marks == this.marks ? this : new Node(this.type, this.attrs, this.content, marks);\n    }\n    /**\n    Create a copy of this node with only the content between the\n    given positions. If `to` is not given, it defaults to the end of\n    the node.\n    */\n  }, {\n    key: \"cut\",\n    value: function cut(from) {\n      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.content.size;\n      if (from == 0 && to == this.content.size) return this;\n      return this.copy(this.content.cut(from, to));\n    }\n    /**\n    Cut out the part of the document between the given positions, and\n    return it as a `Slice` object.\n    */\n  }, {\n    key: \"slice\",\n    value: function slice(from) {\n      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.content.size;\n      var includeParents = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      if (from == to) return Slice.empty;\n      var $from = this.resolve(from),\n        $to = this.resolve(to);\n      var depth = includeParents ? 0 : $from.sharedDepth(to);\n      var start = $from.start(depth),\n        node = $from.node(depth);\n      var content = node.content.cut($from.pos - start, $to.pos - start);\n      return new Slice(content, $from.depth - depth, $to.depth - depth);\n    }\n    /**\n    Replace the part of the document between the given positions with\n    the given slice. The slice must 'fit', meaning its open sides\n    must be able to connect to the surrounding content, and its\n    content nodes must be valid children for the node they are placed\n    into. If any of this is violated, an error of type\n    [`ReplaceError`](https://prosemirror.net/docs/ref/#model.ReplaceError) is thrown.\n    */\n  }, {\n    key: \"replace\",\n    value: function replace(from, to, slice) {\n      return _replace(this.resolve(from), this.resolve(to), slice);\n    }\n    /**\n    Find the node directly after the given position.\n    */\n  }, {\n    key: \"nodeAt\",\n    value: function nodeAt(pos) {\n      for (var node = this;;) {\n        var _node$content$findInd2 = node.content.findIndex(pos),\n          index = _node$content$findInd2.index,\n          offset = _node$content$findInd2.offset;\n        node = node.maybeChild(index);\n        if (!node) return null;\n        if (offset == pos || node.isText) return node;\n        pos -= offset + 1;\n      }\n    }\n    /**\n    Find the (direct) child node after the given offset, if any,\n    and return it along with its index and offset relative to this\n    node.\n    */\n  }, {\n    key: \"childAfter\",\n    value: function childAfter(pos) {\n      var _this$content$findInd = this.content.findIndex(pos),\n        index = _this$content$findInd.index,\n        offset = _this$content$findInd.offset;\n      return {\n        node: this.content.maybeChild(index),\n        index: index,\n        offset: offset\n      };\n    }\n    /**\n    Find the (direct) child node before the given offset, if any,\n    and return it along with its index and offset relative to this\n    node.\n    */\n  }, {\n    key: \"childBefore\",\n    value: function childBefore(pos) {\n      if (pos == 0) return {\n        node: null,\n        index: 0,\n        offset: 0\n      };\n      var _this$content$findInd2 = this.content.findIndex(pos),\n        index = _this$content$findInd2.index,\n        offset = _this$content$findInd2.offset;\n      if (offset < pos) return {\n        node: this.content.child(index),\n        index: index,\n        offset: offset\n      };\n      var node = this.content.child(index - 1);\n      return {\n        node: node,\n        index: index - 1,\n        offset: offset - node.nodeSize\n      };\n    }\n    /**\n    Resolve the given position in the document, returning an\n    [object](https://prosemirror.net/docs/ref/#model.ResolvedPos) with information about its context.\n    */\n  }, {\n    key: \"resolve\",\n    value: function resolve(pos) {\n      return ResolvedPos.resolveCached(this, pos);\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"resolveNoCache\",\n    value: function resolveNoCache(pos) {\n      return ResolvedPos.resolve(this, pos);\n    }\n    /**\n    Test whether a given mark or mark type occurs in this document\n    between the two given positions.\n    */\n  }, {\n    key: \"rangeHasMark\",\n    value: function rangeHasMark(from, to, type) {\n      var found = false;\n      if (to > from) this.nodesBetween(from, to, function (node) {\n        if (type.isInSet(node.marks)) found = true;\n        return !found;\n      });\n      return found;\n    }\n    /**\n    True when this is a block (non-inline node)\n    */\n  }, {\n    key: \"isBlock\",\n    get: function get() {\n      return this.type.isBlock;\n    }\n    /**\n    True when this is a textblock node, a block node with inline\n    content.\n    */\n  }, {\n    key: \"isTextblock\",\n    get: function get() {\n      return this.type.isTextblock;\n    }\n    /**\n    True when this node allows inline content.\n    */\n  }, {\n    key: \"inlineContent\",\n    get: function get() {\n      return this.type.inlineContent;\n    }\n    /**\n    True when this is an inline node (a text node or a node that can\n    appear among text).\n    */\n  }, {\n    key: \"isInline\",\n    get: function get() {\n      return this.type.isInline;\n    }\n    /**\n    True when this is a text node.\n    */\n  }, {\n    key: \"isText\",\n    get: function get() {\n      return this.type.isText;\n    }\n    /**\n    True when this is a leaf node.\n    */\n  }, {\n    key: \"isLeaf\",\n    get: function get() {\n      return this.type.isLeaf;\n    }\n    /**\n    True when this is an atom, i.e. when it does not have directly\n    editable content. This is usually the same as `isLeaf`, but can\n    be configured with the [`atom` property](https://prosemirror.net/docs/ref/#model.NodeSpec.atom)\n    on a node's spec (typically used when the node is displayed as\n    an uneditable [node view](https://prosemirror.net/docs/ref/#view.NodeView)).\n    */\n  }, {\n    key: \"isAtom\",\n    get: function get() {\n      return this.type.isAtom;\n    }\n    /**\n    Return a string representation of this node for debugging\n    purposes.\n    */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      if (this.type.spec.toDebugString) return this.type.spec.toDebugString(this);\n      var name = this.type.name;\n      if (this.content.size) name += \"(\" + this.content.toStringInner() + \")\";\n      return wrapMarks(this.marks, name);\n    }\n    /**\n    Get the content match in this node at the given index.\n    */\n  }, {\n    key: \"contentMatchAt\",\n    value: function contentMatchAt(index) {\n      var match = this.type.contentMatch.matchFragment(this.content, 0, index);\n      if (!match) throw new Error(\"Called contentMatchAt on a node with invalid content\");\n      return match;\n    }\n    /**\n    Test whether replacing the range between `from` and `to` (by\n    child index) with the given replacement fragment (which defaults\n    to the empty fragment) would leave the node's content valid. You\n    can optionally pass `start` and `end` indices into the\n    replacement fragment.\n    */\n  }, {\n    key: \"canReplace\",\n    value: function canReplace(from, to) {\n      var replacement = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Fragment.empty;\n      var start = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      var end = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : replacement.childCount;\n      var one = this.contentMatchAt(from).matchFragment(replacement, start, end);\n      var two = one && one.matchFragment(this.content, to);\n      if (!two || !two.validEnd) return false;\n      for (var i = start; i < end; i++) {\n        if (!this.type.allowsMarks(replacement.child(i).marks)) return false;\n      }\n      return true;\n    }\n    /**\n    Test whether replacing the range `from` to `to` (by index) with\n    a node of the given type would leave the node's content valid.\n    */\n  }, {\n    key: \"canReplaceWith\",\n    value: function canReplaceWith(from, to, type, marks) {\n      if (marks && !this.type.allowsMarks(marks)) return false;\n      var start = this.contentMatchAt(from).matchType(type);\n      var end = start && start.matchFragment(this.content, to);\n      return end ? end.validEnd : false;\n    }\n    /**\n    Test whether the given node's content could be appended to this\n    node. If that node is empty, this will only return true if there\n    is at least one node type that can appear in both nodes (to avoid\n    merging completely incompatible nodes).\n    */\n  }, {\n    key: \"canAppend\",\n    value: function canAppend(other) {\n      if (other.content.size) return this.canReplace(this.childCount, this.childCount, other.content);else return this.type.compatibleContent(other.type);\n    }\n    /**\n    Check whether this node and its descendants conform to the\n    schema, and raise error when they do not.\n    */\n  }, {\n    key: \"check\",\n    value: function check() {\n      if (!this.type.validContent(this.content)) throw new RangeError(\"Invalid content for node \".concat(this.type.name, \": \").concat(this.content.toString().slice(0, 50)));\n      var copy = Mark.none;\n      for (var i = 0; i < this.marks.length; i++) {\n        copy = this.marks[i].addToSet(copy);\n      }\n      if (!Mark.sameSet(copy, this.marks)) throw new RangeError(\"Invalid collection of marks for node \".concat(this.type.name, \": \").concat(this.marks.map(function (m) {\n        return m.type.name;\n      })));\n      this.content.forEach(function (node) {\n        return node.check();\n      });\n    }\n    /**\n    Return a JSON-serializeable representation of this node.\n    */\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var obj = {\n        type: this.type.name\n      };\n      for (var _ in this.attrs) {\n        obj.attrs = this.attrs;\n        break;\n      }\n      if (this.content.size) obj.content = this.content.toJSON();\n      if (this.marks.length) obj.marks = this.marks.map(function (n) {\n        return n.toJSON();\n      });\n      return obj;\n    }\n    /**\n    Deserialize a node from its JSON representation.\n    */\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(schema, json) {\n      if (!json) throw new RangeError(\"Invalid input for Node.fromJSON\");\n      var marks = null;\n      if (json.marks) {\n        if (!Array.isArray(json.marks)) throw new RangeError(\"Invalid mark data for Node.fromJSON\");\n        marks = json.marks.map(schema.markFromJSON);\n      }\n      if (json.type == \"text\") {\n        if (typeof json.text != \"string\") throw new RangeError(\"Invalid text node in JSON\");\n        return schema.text(json.text, marks);\n      }\n      var content = Fragment.fromJSON(schema, json.content);\n      return schema.nodeType(json.type).create(json.attrs, content, marks);\n    }\n  }]);\n  return Node;\n}();\nNode.prototype.text = undefined;\nvar TextNode = /*#__PURE__*/function (_Node) {\n  _inherits(TextNode, _Node);\n  var _super2 = _createSuper(TextNode);\n  /**\n  @internal\n  */\n  function TextNode(type, attrs, content, marks) {\n    var _this;\n    _classCallCheck(this, TextNode);\n    _this = _super2.call(this, type, attrs, null, marks);\n    if (!content) throw new RangeError(\"Empty text nodes are not allowed\");\n    _this.text = content;\n    return _this;\n  }\n  _createClass(TextNode, [{\n    key: \"toString\",\n    value: function toString() {\n      if (this.type.spec.toDebugString) return this.type.spec.toDebugString(this);\n      return wrapMarks(this.marks, JSON.stringify(this.text));\n    }\n  }, {\n    key: \"textContent\",\n    get: function get() {\n      return this.text;\n    }\n  }, {\n    key: \"textBetween\",\n    value: function textBetween(from, to) {\n      return this.text.slice(from, to);\n    }\n  }, {\n    key: \"nodeSize\",\n    get: function get() {\n      return this.text.length;\n    }\n  }, {\n    key: \"mark\",\n    value: function mark(marks) {\n      return marks == this.marks ? this : new TextNode(this.type, this.attrs, this.text, marks);\n    }\n  }, {\n    key: \"withText\",\n    value: function withText(text) {\n      if (text == this.text) return this;\n      return new TextNode(this.type, this.attrs, text, this.marks);\n    }\n  }, {\n    key: \"cut\",\n    value: function cut() {\n      var from = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.text.length;\n      if (from == 0 && to == this.text.length) return this;\n      return this.withText(this.text.slice(from, to));\n    }\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      return this.sameMarkup(other) && this.text == other.text;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var base = _get(_getPrototypeOf(TextNode.prototype), \"toJSON\", this).call(this);\n      base.text = this.text;\n      return base;\n    }\n  }]);\n  return TextNode;\n}(Node);\nfunction wrapMarks(marks, str) {\n  for (var i = marks.length - 1; i >= 0; i--) {\n    str = marks[i].type.name + \"(\" + str + \")\";\n  }\n  return str;\n}\n\n/**\nInstances of this class represent a match state of a node type's\n[content expression](https://prosemirror.net/docs/ref/#model.NodeSpec.content), and can be used to\nfind out whether further content matches here, and whether a given\nposition is a valid end of the node.\n*/\nvar ContentMatch = /*#__PURE__*/function () {\n  /**\n  @internal\n  */\n  function ContentMatch(\n  /**\n  True when this match state represents a valid end of the node.\n  */\n  validEnd) {\n    _classCallCheck(this, ContentMatch);\n    this.validEnd = validEnd;\n    /**\n    @internal\n    */\n    this.next = [];\n    /**\n    @internal\n    */\n    this.wrapCache = [];\n  }\n  /**\n  @internal\n  */\n  _createClass(ContentMatch, [{\n    key: \"matchType\",\n    value:\n    /**\n    Match a node type, returning a match after that node if\n    successful.\n    */\n    function matchType(type) {\n      for (var i = 0; i < this.next.length; i++) {\n        if (this.next[i].type == type) return this.next[i].next;\n      }\n      return null;\n    }\n    /**\n    Try to match a fragment. Returns the resulting match when\n    successful.\n    */\n  }, {\n    key: \"matchFragment\",\n    value: function matchFragment(frag) {\n      var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : frag.childCount;\n      var cur = this;\n      for (var i = start; cur && i < end; i++) {\n        cur = cur.matchType(frag.child(i).type);\n      }\n      return cur;\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"inlineContent\",\n    get: function get() {\n      return this.next.length && this.next[0].type.isInline;\n    }\n    /**\n    Get the first matching node type at this match position that can\n    be generated.\n    */\n  }, {\n    key: \"defaultType\",\n    get: function get() {\n      for (var i = 0; i < this.next.length; i++) {\n        var type = this.next[i].type;\n        if (!(type.isText || type.hasRequiredAttrs())) return type;\n      }\n      return null;\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"compatible\",\n    value: function compatible(other) {\n      for (var i = 0; i < this.next.length; i++) {\n        for (var j = 0; j < other.next.length; j++) {\n          if (this.next[i].type == other.next[j].type) return true;\n        }\n      }\n      return false;\n    }\n    /**\n    Try to match the given fragment, and if that fails, see if it can\n    be made to match by inserting nodes in front of it. When\n    successful, return a fragment of inserted nodes (which may be\n    empty if nothing had to be inserted). When `toEnd` is true, only\n    return a fragment if the resulting match goes to the end of the\n    content expression.\n    */\n  }, {\n    key: \"fillBefore\",\n    value: function fillBefore(after) {\n      var toEnd = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var startIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var seen = [this];\n      function search(match, types) {\n        var finished = match.matchFragment(after, startIndex);\n        if (finished && (!toEnd || finished.validEnd)) return Fragment.from(types.map(function (tp) {\n          return tp.createAndFill();\n        }));\n        for (var i = 0; i < match.next.length; i++) {\n          var _match$next$i = match.next[i],\n            type = _match$next$i.type,\n            next = _match$next$i.next;\n          if (!(type.isText || type.hasRequiredAttrs()) && seen.indexOf(next) == -1) {\n            seen.push(next);\n            var _found = search(next, types.concat(type));\n            if (_found) return _found;\n          }\n        }\n        return null;\n      }\n      return search(this, []);\n    }\n    /**\n    Find a set of wrapping node types that would allow a node of the\n    given type to appear at this position. The result may be empty\n    (when it fits directly) and will be null when no such wrapping\n    exists.\n    */\n  }, {\n    key: \"findWrapping\",\n    value: function findWrapping(target) {\n      for (var i = 0; i < this.wrapCache.length; i += 2) {\n        if (this.wrapCache[i] == target) return this.wrapCache[i + 1];\n      }\n      var computed = this.computeWrapping(target);\n      this.wrapCache.push(target, computed);\n      return computed;\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"computeWrapping\",\n    value: function computeWrapping(target) {\n      var seen = Object.create(null),\n        active = [{\n          match: this,\n          type: null,\n          via: null\n        }];\n      while (active.length) {\n        var current = active.shift(),\n          match = current.match;\n        if (match.matchType(target)) {\n          var result = [];\n          for (var obj = current; obj.type; obj = obj.via) {\n            result.push(obj.type);\n          }\n          return result.reverse();\n        }\n        for (var i = 0; i < match.next.length; i++) {\n          var _match$next$i2 = match.next[i],\n            type = _match$next$i2.type,\n            next = _match$next$i2.next;\n          if (!type.isLeaf && !type.hasRequiredAttrs() && !(type.name in seen) && (!current.type || next.validEnd)) {\n            active.push({\n              match: type.contentMatch,\n              type: type,\n              via: current\n            });\n            seen[type.name] = true;\n          }\n        }\n      }\n      return null;\n    }\n    /**\n    The number of outgoing edges this node has in the finite\n    automaton that describes the content expression.\n    */\n  }, {\n    key: \"edgeCount\",\n    get: function get() {\n      return this.next.length;\n    }\n    /**\n    Get the _n_​th outgoing edge from this node in the finite\n    automaton that describes the content expression.\n    */\n  }, {\n    key: \"edge\",\n    value: function edge(n) {\n      if (n >= this.next.length) throw new RangeError(\"There's no \".concat(n, \"th edge in this content match\"));\n      return this.next[n];\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var seen = [];\n      function scan(m) {\n        seen.push(m);\n        for (var i = 0; i < m.next.length; i++) {\n          if (seen.indexOf(m.next[i].next) == -1) scan(m.next[i].next);\n        }\n      }\n      scan(this);\n      return seen.map(function (m, i) {\n        var out = i + (m.validEnd ? \"*\" : \" \") + \" \";\n        for (var _i = 0; _i < m.next.length; _i++) {\n          out += (_i ? \", \" : \"\") + m.next[_i].type.name + \"->\" + seen.indexOf(m.next[_i].next);\n        }\n        return out;\n      }).join(\"\\n\");\n    }\n  }], [{\n    key: \"parse\",\n    value: function parse(string, nodeTypes) {\n      var stream = new TokenStream(string, nodeTypes);\n      if (stream.next == null) return ContentMatch.empty;\n      var expr = parseExpr(stream);\n      if (stream.next) stream.err(\"Unexpected trailing text\");\n      var match = dfa(nfa(expr));\n      checkForDeadEnds(match, stream);\n      return match;\n    }\n  }]);\n  return ContentMatch;\n}();\n/**\n@internal\n*/\nContentMatch.empty = new ContentMatch(true);\nvar TokenStream = /*#__PURE__*/function () {\n  function TokenStream(string, nodeTypes) {\n    _classCallCheck(this, TokenStream);\n    this.string = string;\n    this.nodeTypes = nodeTypes;\n    this.inline = null;\n    this.pos = 0;\n    this.tokens = string.split(/\\s*(?=\\b|\\W|$)/);\n    if (this.tokens[this.tokens.length - 1] == \"\") this.tokens.pop();\n    if (this.tokens[0] == \"\") this.tokens.shift();\n  }\n  _createClass(TokenStream, [{\n    key: \"next\",\n    get: function get() {\n      return this.tokens[this.pos];\n    }\n  }, {\n    key: \"eat\",\n    value: function eat(tok) {\n      return this.next == tok && (this.pos++ || true);\n    }\n  }, {\n    key: \"err\",\n    value: function err(str) {\n      throw new SyntaxError(str + \" (in content expression '\" + this.string + \"')\");\n    }\n  }]);\n  return TokenStream;\n}();\nfunction parseExpr(stream) {\n  var exprs = [];\n  do {\n    exprs.push(parseExprSeq(stream));\n  } while (stream.eat(\"|\"));\n  return exprs.length == 1 ? exprs[0] : {\n    type: \"choice\",\n    exprs: exprs\n  };\n}\nfunction parseExprSeq(stream) {\n  var exprs = [];\n  do {\n    exprs.push(parseExprSubscript(stream));\n  } while (stream.next && stream.next != \")\" && stream.next != \"|\");\n  return exprs.length == 1 ? exprs[0] : {\n    type: \"seq\",\n    exprs: exprs\n  };\n}\nfunction parseExprSubscript(stream) {\n  var expr = parseExprAtom(stream);\n  for (;;) {\n    if (stream.eat(\"+\")) expr = {\n      type: \"plus\",\n      expr: expr\n    };else if (stream.eat(\"*\")) expr = {\n      type: \"star\",\n      expr: expr\n    };else if (stream.eat(\"?\")) expr = {\n      type: \"opt\",\n      expr: expr\n    };else if (stream.eat(\"{\")) expr = parseExprRange(stream, expr);else break;\n  }\n  return expr;\n}\nfunction parseNum(stream) {\n  if (/\\D/.test(stream.next)) stream.err(\"Expected number, got '\" + stream.next + \"'\");\n  var result = Number(stream.next);\n  stream.pos++;\n  return result;\n}\nfunction parseExprRange(stream, expr) {\n  var min = parseNum(stream),\n    max = min;\n  if (stream.eat(\",\")) {\n    if (stream.next != \"}\") max = parseNum(stream);else max = -1;\n  }\n  if (!stream.eat(\"}\")) stream.err(\"Unclosed braced range\");\n  return {\n    type: \"range\",\n    min: min,\n    max: max,\n    expr: expr\n  };\n}\nfunction resolveName(stream, name) {\n  var types = stream.nodeTypes,\n    type = types[name];\n  if (type) return [type];\n  var result = [];\n  for (var typeName in types) {\n    var _type = types[typeName];\n    if (_type.groups.indexOf(name) > -1) result.push(_type);\n  }\n  if (result.length == 0) stream.err(\"No node type or group '\" + name + \"' found\");\n  return result;\n}\nfunction parseExprAtom(stream) {\n  if (stream.eat(\"(\")) {\n    var expr = parseExpr(stream);\n    if (!stream.eat(\")\")) stream.err(\"Missing closing paren\");\n    return expr;\n  } else if (!/\\W/.test(stream.next)) {\n    var exprs = resolveName(stream, stream.next).map(function (type) {\n      if (stream.inline == null) stream.inline = type.isInline;else if (stream.inline != type.isInline) stream.err(\"Mixing inline and block content\");\n      return {\n        type: \"name\",\n        value: type\n      };\n    });\n    stream.pos++;\n    return exprs.length == 1 ? exprs[0] : {\n      type: \"choice\",\n      exprs: exprs\n    };\n  } else {\n    stream.err(\"Unexpected token '\" + stream.next + \"'\");\n  }\n}\n/**\nConstruct an NFA from an expression as returned by the parser. The\nNFA is represented as an array of states, which are themselves\narrays of edges, which are `{term, to}` objects. The first state is\nthe entry state and the last node is the success state.\n\nNote that unlike typical NFAs, the edge ordering in this one is\nsignificant, in that it is used to contruct filler content when\nnecessary.\n*/\nfunction nfa(expr) {\n  var nfa = [[]];\n  connect(compile(expr, 0), node());\n  return nfa;\n  function node() {\n    return nfa.push([]) - 1;\n  }\n  function edge(from, to, term) {\n    var edge = {\n      term: term,\n      to: to\n    };\n    nfa[from].push(edge);\n    return edge;\n  }\n  function connect(edges, to) {\n    edges.forEach(function (edge) {\n      return edge.to = to;\n    });\n  }\n  function compile(expr, from) {\n    if (expr.type == \"choice\") {\n      return expr.exprs.reduce(function (out, expr) {\n        return out.concat(compile(expr, from));\n      }, []);\n    } else if (expr.type == \"seq\") {\n      for (var i = 0;; i++) {\n        var next = compile(expr.exprs[i], from);\n        if (i == expr.exprs.length - 1) return next;\n        connect(next, from = node());\n      }\n    } else if (expr.type == \"star\") {\n      var loop = node();\n      edge(from, loop);\n      connect(compile(expr.expr, loop), loop);\n      return [edge(loop)];\n    } else if (expr.type == \"plus\") {\n      var _loop = node();\n      connect(compile(expr.expr, from), _loop);\n      connect(compile(expr.expr, _loop), _loop);\n      return [edge(_loop)];\n    } else if (expr.type == \"opt\") {\n      return [edge(from)].concat(compile(expr.expr, from));\n    } else if (expr.type == \"range\") {\n      var cur = from;\n      for (var _i2 = 0; _i2 < expr.min; _i2++) {\n        var _next = node();\n        connect(compile(expr.expr, cur), _next);\n        cur = _next;\n      }\n      if (expr.max == -1) {\n        connect(compile(expr.expr, cur), cur);\n      } else {\n        for (var _i3 = expr.min; _i3 < expr.max; _i3++) {\n          var _next2 = node();\n          edge(cur, _next2);\n          connect(compile(expr.expr, cur), _next2);\n          cur = _next2;\n        }\n      }\n      return [edge(cur)];\n    } else if (expr.type == \"name\") {\n      return [edge(from, undefined, expr.value)];\n    } else {\n      throw new Error(\"Unknown expr type\");\n    }\n  }\n}\nfunction cmp(a, b) {\n  return b - a;\n}\n// Get the set of nodes reachable by null edges from `node`. Omit\n// nodes with only a single null-out-edge, since they may lead to\n// needless duplicated nodes.\nfunction nullFrom(nfa, node) {\n  var result = [];\n  scan(node);\n  return result.sort(cmp);\n  function scan(node) {\n    var edges = nfa[node];\n    if (edges.length == 1 && !edges[0].term) return scan(edges[0].to);\n    result.push(node);\n    for (var i = 0; i < edges.length; i++) {\n      var _edges$i = edges[i],\n        term = _edges$i.term,\n        to = _edges$i.to;\n      if (!term && result.indexOf(to) == -1) scan(to);\n    }\n  }\n}\n// Compiles an NFA as produced by `nfa` into a DFA, modeled as a set\n// of state objects (`ContentMatch` instances) with transitions\n// between them.\nfunction dfa(nfa) {\n  var labeled = Object.create(null);\n  return explore(nullFrom(nfa, 0));\n  function explore(states) {\n    var out = [];\n    states.forEach(function (node) {\n      nfa[node].forEach(function (_ref) {\n        var term = _ref.term,\n          to = _ref.to;\n        if (!term) return;\n        var set;\n        for (var i = 0; i < out.length; i++) {\n          if (out[i][0] == term) set = out[i][1];\n        }\n        nullFrom(nfa, to).forEach(function (node) {\n          if (!set) out.push([term, set = []]);\n          if (set.indexOf(node) == -1) set.push(node);\n        });\n      });\n    });\n    var state = labeled[states.join(\",\")] = new ContentMatch(states.indexOf(nfa.length - 1) > -1);\n    for (var i = 0; i < out.length; i++) {\n      var _states = out[i][1].sort(cmp);\n      state.next.push({\n        type: out[i][0],\n        next: labeled[_states.join(\",\")] || explore(_states)\n      });\n    }\n    return state;\n  }\n}\nfunction checkForDeadEnds(match, stream) {\n  for (var i = 0, work = [match]; i < work.length; i++) {\n    var state = work[i],\n      dead = !state.validEnd,\n      nodes = [];\n    for (var j = 0; j < state.next.length; j++) {\n      var _state$next$j = state.next[j],\n        type = _state$next$j.type,\n        next = _state$next$j.next;\n      nodes.push(type.name);\n      if (dead && !(type.isText || type.hasRequiredAttrs())) dead = false;\n      if (work.indexOf(next) == -1) work.push(next);\n    }\n    if (dead) stream.err(\"Only non-generatable nodes (\" + nodes.join(\", \") + \") in a required position (see https://prosemirror.net/docs/guide/#generatable)\");\n  }\n}\n\n// For node types where all attrs have a default value (or which don't\n// have any attributes), build up a single reusable default attribute\n// object, and use it for all nodes that don't specify specific\n// attributes.\nfunction defaultAttrs(attrs) {\n  var defaults = Object.create(null);\n  for (var attrName in attrs) {\n    var attr = attrs[attrName];\n    if (!attr.hasDefault) return null;\n    defaults[attrName] = attr.default;\n  }\n  return defaults;\n}\nfunction _computeAttrs(attrs, value) {\n  var built = Object.create(null);\n  for (var name in attrs) {\n    var given = value && value[name];\n    if (given === undefined) {\n      var attr = attrs[name];\n      if (attr.hasDefault) given = attr.default;else throw new RangeError(\"No value supplied for attribute \" + name);\n    }\n    built[name] = given;\n  }\n  return built;\n}\nfunction initAttrs(attrs) {\n  var result = Object.create(null);\n  if (attrs) for (var name in attrs) {\n    result[name] = new Attribute(attrs[name]);\n  }\n  return result;\n}\n/**\nNode types are objects allocated once per `Schema` and used to\n[tag](https://prosemirror.net/docs/ref/#model.Node.type) `Node` instances. They contain information\nabout the node type, such as its name and what kind of node it\nrepresents.\n*/\nvar NodeType = /*#__PURE__*/function () {\n  /**\n  @internal\n  */\n  function NodeType(\n  /**\n  The name the node type has in this schema.\n  */\n  name,\n  /**\n  A link back to the `Schema` the node type belongs to.\n  */\n  schema,\n  /**\n  The spec that this type is based on\n  */\n  spec) {\n    _classCallCheck(this, NodeType);\n    this.name = name;\n    this.schema = schema;\n    this.spec = spec;\n    /**\n    The set of marks allowed in this node. `null` means all marks\n    are allowed.\n    */\n    this.markSet = null;\n    this.groups = spec.group ? spec.group.split(\" \") : [];\n    this.attrs = initAttrs(spec.attrs);\n    this.defaultAttrs = defaultAttrs(this.attrs);\n    this.contentMatch = null;\n    this.inlineContent = null;\n    this.isBlock = !(spec.inline || name == \"text\");\n    this.isText = name == \"text\";\n  }\n  /**\n  True if this is an inline type.\n  */\n  _createClass(NodeType, [{\n    key: \"isInline\",\n    get: function get() {\n      return !this.isBlock;\n    }\n    /**\n    True if this is a textblock type, a block that contains inline\n    content.\n    */\n  }, {\n    key: \"isTextblock\",\n    get: function get() {\n      return this.isBlock && this.inlineContent;\n    }\n    /**\n    True for node types that allow no content.\n    */\n  }, {\n    key: \"isLeaf\",\n    get: function get() {\n      return this.contentMatch == ContentMatch.empty;\n    }\n    /**\n    True when this node is an atom, i.e. when it does not have\n    directly editable content.\n    */\n  }, {\n    key: \"isAtom\",\n    get: function get() {\n      return this.isLeaf || !!this.spec.atom;\n    }\n    /**\n    The node type's [whitespace](https://prosemirror.net/docs/ref/#model.NodeSpec.whitespace) option.\n    */\n  }, {\n    key: \"whitespace\",\n    get: function get() {\n      return this.spec.whitespace || (this.spec.code ? \"pre\" : \"normal\");\n    }\n    /**\n    Tells you whether this node type has any required attributes.\n    */\n  }, {\n    key: \"hasRequiredAttrs\",\n    value: function hasRequiredAttrs() {\n      for (var n in this.attrs) {\n        if (this.attrs[n].isRequired) return true;\n      }\n      return false;\n    }\n    /**\n    Indicates whether this node allows some of the same content as\n    the given node type.\n    */\n  }, {\n    key: \"compatibleContent\",\n    value: function compatibleContent(other) {\n      return this == other || this.contentMatch.compatible(other.contentMatch);\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"computeAttrs\",\n    value: function computeAttrs(attrs) {\n      if (!attrs && this.defaultAttrs) return this.defaultAttrs;else return _computeAttrs(this.attrs, attrs);\n    }\n    /**\n    Create a `Node` of this type. The given attributes are\n    checked and defaulted (you can pass `null` to use the type's\n    defaults entirely, if no required attributes exist). `content`\n    may be a `Fragment`, a node, an array of nodes, or\n    `null`. Similarly `marks` may be `null` to default to the empty\n    set of marks.\n    */\n  }, {\n    key: \"create\",\n    value: function create() {\n      var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var content = arguments.length > 1 ? arguments[1] : undefined;\n      var marks = arguments.length > 2 ? arguments[2] : undefined;\n      if (this.isText) throw new Error(\"NodeType.create can't construct text nodes\");\n      return new Node(this, this.computeAttrs(attrs), Fragment.from(content), Mark.setFrom(marks));\n    }\n    /**\n    Like [`create`](https://prosemirror.net/docs/ref/#model.NodeType.create), but check the given content\n    against the node type's content restrictions, and throw an error\n    if it doesn't match.\n    */\n  }, {\n    key: \"createChecked\",\n    value: function createChecked() {\n      var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var content = arguments.length > 1 ? arguments[1] : undefined;\n      var marks = arguments.length > 2 ? arguments[2] : undefined;\n      content = Fragment.from(content);\n      if (!this.validContent(content)) throw new RangeError(\"Invalid content for node \" + this.name);\n      return new Node(this, this.computeAttrs(attrs), content, Mark.setFrom(marks));\n    }\n    /**\n    Like [`create`](https://prosemirror.net/docs/ref/#model.NodeType.create), but see if it is\n    necessary to add nodes to the start or end of the given fragment\n    to make it fit the node. If no fitting wrapping can be found,\n    return null. Note that, due to the fact that required nodes can\n    always be created, this will always succeed if you pass null or\n    `Fragment.empty` as content.\n    */\n  }, {\n    key: \"createAndFill\",\n    value: function createAndFill() {\n      var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var content = arguments.length > 1 ? arguments[1] : undefined;\n      var marks = arguments.length > 2 ? arguments[2] : undefined;\n      attrs = this.computeAttrs(attrs);\n      content = Fragment.from(content);\n      if (content.size) {\n        var before = this.contentMatch.fillBefore(content);\n        if (!before) return null;\n        content = before.append(content);\n      }\n      var matched = this.contentMatch.matchFragment(content);\n      var after = matched && matched.fillBefore(Fragment.empty, true);\n      if (!after) return null;\n      return new Node(this, attrs, content.append(after), Mark.setFrom(marks));\n    }\n    /**\n    Returns true if the given fragment is valid content for this node\n    type with the given attributes.\n    */\n  }, {\n    key: \"validContent\",\n    value: function validContent(content) {\n      var result = this.contentMatch.matchFragment(content);\n      if (!result || !result.validEnd) return false;\n      for (var i = 0; i < content.childCount; i++) {\n        if (!this.allowsMarks(content.child(i).marks)) return false;\n      }\n      return true;\n    }\n    /**\n    Check whether the given mark type is allowed in this node.\n    */\n  }, {\n    key: \"allowsMarkType\",\n    value: function allowsMarkType(markType) {\n      return this.markSet == null || this.markSet.indexOf(markType) > -1;\n    }\n    /**\n    Test whether the given set of marks are allowed in this node.\n    */\n  }, {\n    key: \"allowsMarks\",\n    value: function allowsMarks(marks) {\n      if (this.markSet == null) return true;\n      for (var i = 0; i < marks.length; i++) {\n        if (!this.allowsMarkType(marks[i].type)) return false;\n      }\n      return true;\n    }\n    /**\n    Removes the marks that are not allowed in this node from the given set.\n    */\n  }, {\n    key: \"allowedMarks\",\n    value: function allowedMarks(marks) {\n      if (this.markSet == null) return marks;\n      var copy;\n      for (var i = 0; i < marks.length; i++) {\n        if (!this.allowsMarkType(marks[i].type)) {\n          if (!copy) copy = marks.slice(0, i);\n        } else if (copy) {\n          copy.push(marks[i]);\n        }\n      }\n      return !copy ? marks : copy.length ? copy : Mark.none;\n    }\n    /**\n    @internal\n    */\n  }], [{\n    key: \"compile\",\n    value: function compile(nodes, schema) {\n      var result = Object.create(null);\n      nodes.forEach(function (name, spec) {\n        return result[name] = new NodeType(name, schema, spec);\n      });\n      var topType = schema.spec.topNode || \"doc\";\n      if (!result[topType]) throw new RangeError(\"Schema is missing its top node type ('\" + topType + \"')\");\n      if (!result.text) throw new RangeError(\"Every schema needs a 'text' type\");\n      for (var _ in result.text.attrs) {\n        throw new RangeError(\"The text node type should not have attributes\");\n      }\n      return result;\n    }\n  }]);\n  return NodeType;\n}(); // Attribute descriptors\nvar Attribute = /*#__PURE__*/function () {\n  function Attribute(options) {\n    _classCallCheck(this, Attribute);\n    this.hasDefault = Object.prototype.hasOwnProperty.call(options, \"default\");\n    this.default = options.default;\n  }\n  _createClass(Attribute, [{\n    key: \"isRequired\",\n    get: function get() {\n      return !this.hasDefault;\n    }\n  }]);\n  return Attribute;\n}(); // Marks\n/**\nLike nodes, marks (which are associated with nodes to signify\nthings like emphasis or being part of a link) are\n[tagged](https://prosemirror.net/docs/ref/#model.Mark.type) with type objects, which are\ninstantiated once per `Schema`.\n*/\nvar MarkType = /*#__PURE__*/function () {\n  /**\n  @internal\n  */\n  function MarkType(\n  /**\n  The name of the mark type.\n  */\n  name,\n  /**\n  @internal\n  */\n  rank,\n  /**\n  The schema that this mark type instance is part of.\n  */\n  schema,\n  /**\n  The spec on which the type is based.\n  */\n  spec) {\n    _classCallCheck(this, MarkType);\n    this.name = name;\n    this.rank = rank;\n    this.schema = schema;\n    this.spec = spec;\n    this.attrs = initAttrs(spec.attrs);\n    this.excluded = null;\n    var defaults = defaultAttrs(this.attrs);\n    this.instance = defaults ? new Mark(this, defaults) : null;\n  }\n  /**\n  Create a mark of this type. `attrs` may be `null` or an object\n  containing only some of the mark's attributes. The others, if\n  they have defaults, will be added.\n  */\n  _createClass(MarkType, [{\n    key: \"create\",\n    value: function create() {\n      var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      if (!attrs && this.instance) return this.instance;\n      return new Mark(this, _computeAttrs(this.attrs, attrs));\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"removeFromSet\",\n    value:\n    /**\n    When there is a mark of this type in the given set, a new set\n    without it is returned. Otherwise, the input set is returned.\n    */\n    function removeFromSet(set) {\n      for (var i = 0; i < set.length; i++) {\n        if (set[i].type == this) {\n          set = set.slice(0, i).concat(set.slice(i + 1));\n          i--;\n        }\n      }\n      return set;\n    }\n    /**\n    Tests whether there is a mark of this type in the given set.\n    */\n  }, {\n    key: \"isInSet\",\n    value: function isInSet(set) {\n      for (var i = 0; i < set.length; i++) {\n        if (set[i].type == this) return set[i];\n      }\n    }\n    /**\n    Queries whether a given mark type is\n    [excluded](https://prosemirror.net/docs/ref/#model.MarkSpec.excludes) by this one.\n    */\n  }, {\n    key: \"excludes\",\n    value: function excludes(other) {\n      return this.excluded.indexOf(other) > -1;\n    }\n  }], [{\n    key: \"compile\",\n    value: function compile(marks, schema) {\n      var result = Object.create(null),\n        rank = 0;\n      marks.forEach(function (name, spec) {\n        return result[name] = new MarkType(name, rank++, schema, spec);\n      });\n      return result;\n    }\n  }]);\n  return MarkType;\n}();\n/**\nA document schema. Holds [node](https://prosemirror.net/docs/ref/#model.NodeType) and [mark\ntype](https://prosemirror.net/docs/ref/#model.MarkType) objects for the nodes and marks that may\noccur in conforming documents, and provides functionality for\ncreating and deserializing such documents.\n\nWhen given, the type parameters provide the names of the nodes and\nmarks in this schema.\n*/\nvar Schema = /*#__PURE__*/function () {\n  /**\n  Construct a schema from a schema [specification](https://prosemirror.net/docs/ref/#model.SchemaSpec).\n  */\n  function Schema(spec) {\n    _classCallCheck(this, Schema);\n    /**\n    An object for storing whatever values modules may want to\n    compute and cache per schema. (If you want to store something\n    in it, try to use property names unlikely to clash.)\n    */\n    this.cached = Object.create(null);\n    this.spec = {\n      nodes: OrderedMap.from(spec.nodes),\n      marks: OrderedMap.from(spec.marks || {}),\n      topNode: spec.topNode\n    };\n    this.nodes = NodeType.compile(this.spec.nodes, this);\n    this.marks = MarkType.compile(this.spec.marks, this);\n    var contentExprCache = Object.create(null);\n    for (var prop in this.nodes) {\n      if (prop in this.marks) throw new RangeError(prop + \" can not be both a node and a mark\");\n      var type = this.nodes[prop],\n        contentExpr = type.spec.content || \"\",\n        markExpr = type.spec.marks;\n      type.contentMatch = contentExprCache[contentExpr] || (contentExprCache[contentExpr] = ContentMatch.parse(contentExpr, this.nodes));\n      type.inlineContent = type.contentMatch.inlineContent;\n      type.markSet = markExpr == \"_\" ? null : markExpr ? gatherMarks(this, markExpr.split(\" \")) : markExpr == \"\" || !type.inlineContent ? [] : null;\n    }\n    for (var _prop in this.marks) {\n      var _type2 = this.marks[_prop],\n        excl = _type2.spec.excludes;\n      _type2.excluded = excl == null ? [_type2] : excl == \"\" ? [] : gatherMarks(this, excl.split(\" \"));\n    }\n    this.nodeFromJSON = this.nodeFromJSON.bind(this);\n    this.markFromJSON = this.markFromJSON.bind(this);\n    this.topNodeType = this.nodes[this.spec.topNode || \"doc\"];\n    this.cached.wrappings = Object.create(null);\n  }\n  /**\n  Create a node in this schema. The `type` may be a string or a\n  `NodeType` instance. Attributes will be extended with defaults,\n  `content` may be a `Fragment`, `null`, a `Node`, or an array of\n  nodes.\n  */\n  _createClass(Schema, [{\n    key: \"node\",\n    value: function node(type) {\n      var attrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var content = arguments.length > 2 ? arguments[2] : undefined;\n      var marks = arguments.length > 3 ? arguments[3] : undefined;\n      if (typeof type == \"string\") type = this.nodeType(type);else if (!(type instanceof NodeType)) throw new RangeError(\"Invalid node type: \" + type);else if (type.schema != this) throw new RangeError(\"Node type from different schema used (\" + type.name + \")\");\n      return type.createChecked(attrs, content, marks);\n    }\n    /**\n    Create a text node in the schema. Empty text nodes are not\n    allowed.\n    */\n  }, {\n    key: \"text\",\n    value: function text(_text, marks) {\n      var type = this.nodes.text;\n      return new TextNode(type, type.defaultAttrs, _text, Mark.setFrom(marks));\n    }\n    /**\n    Create a mark with the given type and attributes.\n    */\n  }, {\n    key: \"mark\",\n    value: function mark(type, attrs) {\n      if (typeof type == \"string\") type = this.marks[type];\n      return type.create(attrs);\n    }\n    /**\n    Deserialize a node from its JSON representation. This method is\n    bound.\n    */\n  }, {\n    key: \"nodeFromJSON\",\n    value: function nodeFromJSON(json) {\n      return Node.fromJSON(this, json);\n    }\n    /**\n    Deserialize a mark from its JSON representation. This method is\n    bound.\n    */\n  }, {\n    key: \"markFromJSON\",\n    value: function markFromJSON(json) {\n      return Mark.fromJSON(this, json);\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"nodeType\",\n    value: function nodeType(name) {\n      var found = this.nodes[name];\n      if (!found) throw new RangeError(\"Unknown node type: \" + name);\n      return found;\n    }\n  }]);\n  return Schema;\n}();\nfunction gatherMarks(schema, marks) {\n  var found = [];\n  for (var i = 0; i < marks.length; i++) {\n    var name = marks[i],\n      mark = schema.marks[name],\n      ok = mark;\n    if (mark) {\n      found.push(mark);\n    } else {\n      for (var prop in schema.marks) {\n        var _mark = schema.marks[prop];\n        if (name == \"_\" || _mark.spec.group && _mark.spec.group.split(\" \").indexOf(name) > -1) found.push(ok = _mark);\n      }\n    }\n    if (!ok) throw new SyntaxError(\"Unknown mark type: '\" + marks[i] + \"'\");\n  }\n  return found;\n}\n\n/**\nA DOM parser represents a strategy for parsing DOM content into a\nProseMirror document conforming to a given schema. Its behavior is\ndefined by an array of [rules](https://prosemirror.net/docs/ref/#model.ParseRule).\n*/\nvar DOMParser = /*#__PURE__*/function () {\n  /**\n  Create a parser that targets the given schema, using the given\n  parsing rules.\n  */\n  function DOMParser(\n  /**\n  The schema into which the parser parses.\n  */\n  schema,\n  /**\n  The set of [parse rules](https://prosemirror.net/docs/ref/#model.ParseRule) that the parser\n  uses, in order of precedence.\n  */\n  rules) {\n    var _this2 = this;\n    _classCallCheck(this, DOMParser);\n    this.schema = schema;\n    this.rules = rules;\n    /**\n    @internal\n    */\n    this.tags = [];\n    /**\n    @internal\n    */\n    this.styles = [];\n    rules.forEach(function (rule) {\n      if (rule.tag) _this2.tags.push(rule);else if (rule.style) _this2.styles.push(rule);\n    });\n    // Only normalize list elements when lists in the schema can't directly contain themselves\n    this.normalizeLists = !this.tags.some(function (r) {\n      if (!/^(ul|ol)\\b/.test(r.tag) || !r.node) return false;\n      var node = schema.nodes[r.node];\n      return node.contentMatch.matchType(node);\n    });\n  }\n  /**\n  Parse a document from the content of a DOM node.\n  */\n  _createClass(DOMParser, [{\n    key: \"parse\",\n    value: function parse(dom) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var context = new ParseContext(this, options, false);\n      context.addAll(dom, options.from, options.to);\n      return context.finish();\n    }\n    /**\n    Parses the content of the given DOM node, like\n    [`parse`](https://prosemirror.net/docs/ref/#model.DOMParser.parse), and takes the same set of\n    options. But unlike that method, which produces a whole node,\n    this one returns a slice that is open at the sides, meaning that\n    the schema constraints aren't applied to the start of nodes to\n    the left of the input and the end of nodes at the end.\n    */\n  }, {\n    key: \"parseSlice\",\n    value: function parseSlice(dom) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var context = new ParseContext(this, options, true);\n      context.addAll(dom, options.from, options.to);\n      return Slice.maxOpen(context.finish());\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"matchTag\",\n    value: function matchTag(dom, context, after) {\n      for (var i = after ? this.tags.indexOf(after) + 1 : 0; i < this.tags.length; i++) {\n        var rule = this.tags[i];\n        if (matches(dom, rule.tag) && (rule.namespace === undefined || dom.namespaceURI == rule.namespace) && (!rule.context || context.matchesContext(rule.context))) {\n          if (rule.getAttrs) {\n            var result = rule.getAttrs(dom);\n            if (result === false) continue;\n            rule.attrs = result || undefined;\n          }\n          return rule;\n        }\n      }\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"matchStyle\",\n    value: function matchStyle(prop, value, context, after) {\n      for (var i = after ? this.styles.indexOf(after) + 1 : 0; i < this.styles.length; i++) {\n        var rule = this.styles[i],\n          style = rule.style;\n        if (style.indexOf(prop) != 0 || rule.context && !context.matchesContext(rule.context) ||\n        // Test that the style string either precisely matches the prop,\n        // or has an '=' sign after the prop, followed by the given\n        // value.\n        style.length > prop.length && (style.charCodeAt(prop.length) != 61 || style.slice(prop.length + 1) != value)) continue;\n        if (rule.getAttrs) {\n          var result = rule.getAttrs(value);\n          if (result === false) continue;\n          rule.attrs = result || undefined;\n        }\n        return rule;\n      }\n    }\n    /**\n    @internal\n    */\n  }], [{\n    key: \"schemaRules\",\n    value: function schemaRules(schema) {\n      var result = [];\n      function insert(rule) {\n        var priority = rule.priority == null ? 50 : rule.priority,\n          i = 0;\n        for (; i < result.length; i++) {\n          var next = result[i],\n            nextPriority = next.priority == null ? 50 : next.priority;\n          if (nextPriority < priority) break;\n        }\n        result.splice(i, 0, rule);\n      }\n      var _loop2 = function _loop2(name) {\n        var rules = schema.marks[name].spec.parseDOM;\n        if (rules) rules.forEach(function (rule) {\n          insert(rule = copy(rule));\n          rule.mark = name;\n        });\n      };\n      for (var name in schema.marks) {\n        _loop2(name);\n      }\n      var _loop3 = function _loop3(_name) {\n        var rules = schema.nodes[_name].spec.parseDOM;\n        if (rules) rules.forEach(function (rule) {\n          insert(rule = copy(rule));\n          rule.node = _name;\n        });\n      };\n      for (var _name in schema.nodes) {\n        _loop3(_name);\n      }\n      return result;\n    }\n    /**\n    Construct a DOM parser using the parsing rules listed in a\n    schema's [node specs](https://prosemirror.net/docs/ref/#model.NodeSpec.parseDOM), reordered by\n    [priority](https://prosemirror.net/docs/ref/#model.ParseRule.priority).\n    */\n  }, {\n    key: \"fromSchema\",\n    value: function fromSchema(schema) {\n      return schema.cached.domParser || (schema.cached.domParser = new DOMParser(schema, DOMParser.schemaRules(schema)));\n    }\n  }]);\n  return DOMParser;\n}();\nvar blockTags = {\n  address: true,\n  article: true,\n  aside: true,\n  blockquote: true,\n  canvas: true,\n  dd: true,\n  div: true,\n  dl: true,\n  fieldset: true,\n  figcaption: true,\n  figure: true,\n  footer: true,\n  form: true,\n  h1: true,\n  h2: true,\n  h3: true,\n  h4: true,\n  h5: true,\n  h6: true,\n  header: true,\n  hgroup: true,\n  hr: true,\n  li: true,\n  noscript: true,\n  ol: true,\n  output: true,\n  p: true,\n  pre: true,\n  section: true,\n  table: true,\n  tfoot: true,\n  ul: true\n};\nvar ignoreTags = {\n  head: true,\n  noscript: true,\n  object: true,\n  script: true,\n  style: true,\n  title: true\n};\nvar listTags = {\n  ol: true,\n  ul: true\n};\n// Using a bitfield for node context options\nvar OPT_PRESERVE_WS = 1,\n  OPT_PRESERVE_WS_FULL = 2,\n  OPT_OPEN_LEFT = 4;\nfunction wsOptionsFor(type, preserveWhitespace, base) {\n  if (preserveWhitespace != null) return (preserveWhitespace ? OPT_PRESERVE_WS : 0) | (preserveWhitespace === \"full\" ? OPT_PRESERVE_WS_FULL : 0);\n  return type && type.whitespace == \"pre\" ? OPT_PRESERVE_WS | OPT_PRESERVE_WS_FULL : base & ~OPT_OPEN_LEFT;\n}\nvar NodeContext = /*#__PURE__*/function () {\n  function NodeContext(type, attrs,\n  // Marks applied to this node itself\n  marks,\n  // Marks that can't apply here, but will be used in children if possible\n  pendingMarks, solid, match, options) {\n    _classCallCheck(this, NodeContext);\n    this.type = type;\n    this.attrs = attrs;\n    this.marks = marks;\n    this.pendingMarks = pendingMarks;\n    this.solid = solid;\n    this.options = options;\n    this.content = [];\n    // Marks applied to the node's children\n    this.activeMarks = Mark.none;\n    // Nested Marks with same type\n    this.stashMarks = [];\n    this.match = match || (options & OPT_OPEN_LEFT ? null : type.contentMatch);\n  }\n  _createClass(NodeContext, [{\n    key: \"findWrapping\",\n    value: function findWrapping(node) {\n      if (!this.match) {\n        if (!this.type) return [];\n        var fill = this.type.contentMatch.fillBefore(Fragment.from(node));\n        if (fill) {\n          this.match = this.type.contentMatch.matchFragment(fill);\n        } else {\n          var start = this.type.contentMatch,\n            wrap;\n          if (wrap = start.findWrapping(node.type)) {\n            this.match = start;\n            return wrap;\n          } else {\n            return null;\n          }\n        }\n      }\n      return this.match.findWrapping(node.type);\n    }\n  }, {\n    key: \"finish\",\n    value: function finish(openEnd) {\n      if (!(this.options & OPT_PRESERVE_WS)) {\n        // Strip trailing whitespace\n        var last = this.content[this.content.length - 1],\n          m;\n        if (last && last.isText && (m = /[ \\t\\r\\n\\u000c]+$/.exec(last.text))) {\n          var text = last;\n          if (last.text.length == m[0].length) this.content.pop();else this.content[this.content.length - 1] = text.withText(text.text.slice(0, text.text.length - m[0].length));\n        }\n      }\n      var content = Fragment.from(this.content);\n      if (!openEnd && this.match) content = content.append(this.match.fillBefore(Fragment.empty, true));\n      return this.type ? this.type.create(this.attrs, content, this.marks) : content;\n    }\n  }, {\n    key: \"popFromStashMark\",\n    value: function popFromStashMark(mark) {\n      for (var i = this.stashMarks.length - 1; i >= 0; i--) {\n        if (mark.eq(this.stashMarks[i])) return this.stashMarks.splice(i, 1)[0];\n      }\n    }\n  }, {\n    key: \"applyPending\",\n    value: function applyPending(nextType) {\n      for (var i = 0, pending = this.pendingMarks; i < pending.length; i++) {\n        var mark = pending[i];\n        if ((this.type ? this.type.allowsMarkType(mark.type) : markMayApply(mark.type, nextType)) && !mark.isInSet(this.activeMarks)) {\n          this.activeMarks = mark.addToSet(this.activeMarks);\n          this.pendingMarks = mark.removeFromSet(this.pendingMarks);\n        }\n      }\n    }\n  }, {\n    key: \"inlineContext\",\n    value: function inlineContext(node) {\n      if (this.type) return this.type.inlineContent;\n      if (this.content.length) return this.content[0].isInline;\n      return node.parentNode && !blockTags.hasOwnProperty(node.parentNode.nodeName.toLowerCase());\n    }\n  }]);\n  return NodeContext;\n}();\nvar ParseContext = /*#__PURE__*/function () {\n  function ParseContext(\n  // The parser we are using.\n  parser,\n  // The options passed to this parse.\n  options, isOpen) {\n    _classCallCheck(this, ParseContext);\n    this.parser = parser;\n    this.options = options;\n    this.isOpen = isOpen;\n    this.open = 0;\n    var topNode = options.topNode,\n      topContext;\n    var topOptions = wsOptionsFor(null, options.preserveWhitespace, 0) | (isOpen ? OPT_OPEN_LEFT : 0);\n    if (topNode) topContext = new NodeContext(topNode.type, topNode.attrs, Mark.none, Mark.none, true, options.topMatch || topNode.type.contentMatch, topOptions);else if (isOpen) topContext = new NodeContext(null, null, Mark.none, Mark.none, true, null, topOptions);else topContext = new NodeContext(parser.schema.topNodeType, null, Mark.none, Mark.none, true, null, topOptions);\n    this.nodes = [topContext];\n    this.find = options.findPositions;\n    this.needsBlock = false;\n  }\n  _createClass(ParseContext, [{\n    key: \"top\",\n    get: function get() {\n      return this.nodes[this.open];\n    }\n    // Add a DOM node to the content. Text is inserted as text node,\n    // otherwise, the node is passed to `addElement` or, if it has a\n    // `style` attribute, `addElementWithStyles`.\n  }, {\n    key: \"addDOM\",\n    value: function addDOM(dom) {\n      if (dom.nodeType == 3) {\n        this.addTextNode(dom);\n      } else if (dom.nodeType == 1) {\n        var style = dom.getAttribute(\"style\");\n        var marks = style ? this.readStyles(parseStyles(style)) : null,\n          top = this.top;\n        if (marks != null) for (var i = 0; i < marks.length; i++) {\n          this.addPendingMark(marks[i]);\n        }\n        this.addElement(dom);\n        if (marks != null) for (var _i4 = 0; _i4 < marks.length; _i4++) {\n          this.removePendingMark(marks[_i4], top);\n        }\n      }\n    }\n  }, {\n    key: \"addTextNode\",\n    value: function addTextNode(dom) {\n      var value = dom.nodeValue;\n      var top = this.top;\n      if (top.options & OPT_PRESERVE_WS_FULL || top.inlineContext(dom) || /[^ \\t\\r\\n\\u000c]/.test(value)) {\n        if (!(top.options & OPT_PRESERVE_WS)) {\n          value = value.replace(/[ \\t\\r\\n\\u000c]+/g, \" \");\n          // If this starts with whitespace, and there is no node before it, or\n          // a hard break, or a text node that ends with whitespace, strip the\n          // leading space.\n          if (/^[ \\t\\r\\n\\u000c]/.test(value) && this.open == this.nodes.length - 1) {\n            var nodeBefore = top.content[top.content.length - 1];\n            var domNodeBefore = dom.previousSibling;\n            if (!nodeBefore || domNodeBefore && domNodeBefore.nodeName == 'BR' || nodeBefore.isText && /[ \\t\\r\\n\\u000c]$/.test(nodeBefore.text)) value = value.slice(1);\n          }\n        } else if (!(top.options & OPT_PRESERVE_WS_FULL)) {\n          value = value.replace(/\\r?\\n|\\r/g, \" \");\n        } else {\n          value = value.replace(/\\r\\n?/g, \"\\n\");\n        }\n        if (value) this.insertNode(this.parser.schema.text(value));\n        this.findInText(dom);\n      } else {\n        this.findInside(dom);\n      }\n    }\n    // Try to find a handler for the given tag and use that to parse. If\n    // none is found, the element's content nodes are added directly.\n  }, {\n    key: \"addElement\",\n    value: function addElement(dom, matchAfter) {\n      var name = dom.nodeName.toLowerCase(),\n        ruleID;\n      if (listTags.hasOwnProperty(name) && this.parser.normalizeLists) normalizeList(dom);\n      var rule = this.options.ruleFromNode && this.options.ruleFromNode(dom) || (ruleID = this.parser.matchTag(dom, this, matchAfter));\n      if (rule ? rule.ignore : ignoreTags.hasOwnProperty(name)) {\n        this.findInside(dom);\n        this.ignoreFallback(dom);\n      } else if (!rule || rule.skip || rule.closeParent) {\n        if (rule && rule.closeParent) this.open = Math.max(0, this.open - 1);else if (rule && rule.skip.nodeType) dom = rule.skip;\n        var sync,\n          top = this.top,\n          oldNeedsBlock = this.needsBlock;\n        if (blockTags.hasOwnProperty(name)) {\n          sync = true;\n          if (!top.type) this.needsBlock = true;\n        } else if (!dom.firstChild) {\n          this.leafFallback(dom);\n          return;\n        }\n        this.addAll(dom);\n        if (sync) this.sync(top);\n        this.needsBlock = oldNeedsBlock;\n      } else {\n        this.addElementByRule(dom, rule, rule.consuming === false ? ruleID : undefined);\n      }\n    }\n    // Called for leaf DOM nodes that would otherwise be ignored\n  }, {\n    key: \"leafFallback\",\n    value: function leafFallback(dom) {\n      if (dom.nodeName == \"BR\" && this.top.type && this.top.type.inlineContent) this.addTextNode(dom.ownerDocument.createTextNode(\"\\n\"));\n    }\n    // Called for ignored nodes\n  }, {\n    key: \"ignoreFallback\",\n    value: function ignoreFallback(dom) {\n      // Ignored BR nodes should at least create an inline context\n      if (dom.nodeName == \"BR\" && (!this.top.type || !this.top.type.inlineContent)) this.findPlace(this.parser.schema.text(\"-\"));\n    }\n    // Run any style parser associated with the node's styles. Either\n    // return an array of marks, or null to indicate some of the styles\n    // had a rule with `ignore` set.\n  }, {\n    key: \"readStyles\",\n    value: function readStyles(styles) {\n      var marks = Mark.none;\n      style: for (var i = 0; i < styles.length; i += 2) {\n        for (var after = undefined;;) {\n          var rule = this.parser.matchStyle(styles[i], styles[i + 1], this, after);\n          if (!rule) continue style;\n          if (rule.ignore) return null;\n          marks = this.parser.schema.marks[rule.mark].create(rule.attrs).addToSet(marks);\n          if (rule.consuming === false) after = rule;else break;\n        }\n      }\n      return marks;\n    }\n    // Look up a handler for the given node. If none are found, return\n    // false. Otherwise, apply it, use its return value to drive the way\n    // the node's content is wrapped, and return true.\n  }, {\n    key: \"addElementByRule\",\n    value: function addElementByRule(dom, rule, continueAfter) {\n      var _this3 = this;\n      var sync, nodeType, mark;\n      if (rule.node) {\n        nodeType = this.parser.schema.nodes[rule.node];\n        if (!nodeType.isLeaf) {\n          sync = this.enter(nodeType, rule.attrs || null, rule.preserveWhitespace);\n        } else if (!this.insertNode(nodeType.create(rule.attrs))) {\n          this.leafFallback(dom);\n        }\n      } else {\n        var markType = this.parser.schema.marks[rule.mark];\n        mark = markType.create(rule.attrs);\n        this.addPendingMark(mark);\n      }\n      var startIn = this.top;\n      if (nodeType && nodeType.isLeaf) {\n        this.findInside(dom);\n      } else if (continueAfter) {\n        this.addElement(dom, continueAfter);\n      } else if (rule.getContent) {\n        this.findInside(dom);\n        rule.getContent(dom, this.parser.schema).forEach(function (node) {\n          return _this3.insertNode(node);\n        });\n      } else {\n        var contentDOM = dom;\n        if (typeof rule.contentElement == \"string\") contentDOM = dom.querySelector(rule.contentElement);else if (typeof rule.contentElement == \"function\") contentDOM = rule.contentElement(dom);else if (rule.contentElement) contentDOM = rule.contentElement;\n        this.findAround(dom, contentDOM, true);\n        this.addAll(contentDOM);\n      }\n      if (sync && this.sync(startIn)) this.open--;\n      if (mark) this.removePendingMark(mark, startIn);\n    }\n    // Add all child nodes between `startIndex` and `endIndex` (or the\n    // whole node, if not given). If `sync` is passed, use it to\n    // synchronize after every block element.\n  }, {\n    key: \"addAll\",\n    value: function addAll(parent, startIndex, endIndex) {\n      var index = startIndex || 0;\n      for (var dom = startIndex ? parent.childNodes[startIndex] : parent.firstChild, end = endIndex == null ? null : parent.childNodes[endIndex]; dom != end; dom = dom.nextSibling, ++index) {\n        this.findAtPoint(parent, index);\n        this.addDOM(dom);\n      }\n      this.findAtPoint(parent, index);\n    }\n    // Try to find a way to fit the given node type into the current\n    // context. May add intermediate wrappers and/or leave non-solid\n    // nodes that we're in.\n  }, {\n    key: \"findPlace\",\n    value: function findPlace(node) {\n      var route, sync;\n      for (var depth = this.open; depth >= 0; depth--) {\n        var cx = this.nodes[depth];\n        var _found2 = cx.findWrapping(node);\n        if (_found2 && (!route || route.length > _found2.length)) {\n          route = _found2;\n          sync = cx;\n          if (!_found2.length) break;\n        }\n        if (cx.solid) break;\n      }\n      if (!route) return false;\n      this.sync(sync);\n      for (var i = 0; i < route.length; i++) {\n        this.enterInner(route[i], null, false);\n      }\n      return true;\n    }\n    // Try to insert the given node, adjusting the context when needed.\n  }, {\n    key: \"insertNode\",\n    value: function insertNode(node) {\n      if (node.isInline && this.needsBlock && !this.top.type) {\n        var block = this.textblockFromContext();\n        if (block) this.enterInner(block);\n      }\n      if (this.findPlace(node)) {\n        this.closeExtra();\n        var top = this.top;\n        top.applyPending(node.type);\n        if (top.match) top.match = top.match.matchType(node.type);\n        var marks = top.activeMarks;\n        for (var i = 0; i < node.marks.length; i++) {\n          if (!top.type || top.type.allowsMarkType(node.marks[i].type)) marks = node.marks[i].addToSet(marks);\n        }\n        top.content.push(node.mark(marks));\n        return true;\n      }\n      return false;\n    }\n    // Try to start a node of the given type, adjusting the context when\n    // necessary.\n  }, {\n    key: \"enter\",\n    value: function enter(type, attrs, preserveWS) {\n      var ok = this.findPlace(type.create(attrs));\n      if (ok) this.enterInner(type, attrs, true, preserveWS);\n      return ok;\n    }\n    // Open a node of the given type\n  }, {\n    key: \"enterInner\",\n    value: function enterInner(type) {\n      var attrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var solid = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var preserveWS = arguments.length > 3 ? arguments[3] : undefined;\n      this.closeExtra();\n      var top = this.top;\n      top.applyPending(type);\n      top.match = top.match && top.match.matchType(type);\n      var options = wsOptionsFor(type, preserveWS, top.options);\n      if (top.options & OPT_OPEN_LEFT && top.content.length == 0) options |= OPT_OPEN_LEFT;\n      this.nodes.push(new NodeContext(type, attrs, top.activeMarks, top.pendingMarks, solid, null, options));\n      this.open++;\n    }\n    // Make sure all nodes above this.open are finished and added to\n    // their parents\n  }, {\n    key: \"closeExtra\",\n    value: function closeExtra() {\n      var openEnd = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var i = this.nodes.length - 1;\n      if (i > this.open) {\n        for (; i > this.open; i--) {\n          this.nodes[i - 1].content.push(this.nodes[i].finish(openEnd));\n        }\n        this.nodes.length = this.open + 1;\n      }\n    }\n  }, {\n    key: \"finish\",\n    value: function finish() {\n      this.open = 0;\n      this.closeExtra(this.isOpen);\n      return this.nodes[0].finish(this.isOpen || this.options.topOpen);\n    }\n  }, {\n    key: \"sync\",\n    value: function sync(to) {\n      for (var i = this.open; i >= 0; i--) {\n        if (this.nodes[i] == to) {\n          this.open = i;\n          return true;\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"currentPos\",\n    get: function get() {\n      this.closeExtra();\n      var pos = 0;\n      for (var i = this.open; i >= 0; i--) {\n        var content = this.nodes[i].content;\n        for (var j = content.length - 1; j >= 0; j--) {\n          pos += content[j].nodeSize;\n        }\n        if (i) pos++;\n      }\n      return pos;\n    }\n  }, {\n    key: \"findAtPoint\",\n    value: function findAtPoint(parent, offset) {\n      if (this.find) for (var i = 0; i < this.find.length; i++) {\n        if (this.find[i].node == parent && this.find[i].offset == offset) this.find[i].pos = this.currentPos;\n      }\n    }\n  }, {\n    key: \"findInside\",\n    value: function findInside(parent) {\n      if (this.find) for (var i = 0; i < this.find.length; i++) {\n        if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node)) this.find[i].pos = this.currentPos;\n      }\n    }\n  }, {\n    key: \"findAround\",\n    value: function findAround(parent, content, before) {\n      if (parent != content && this.find) for (var i = 0; i < this.find.length; i++) {\n        if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node)) {\n          var pos = content.compareDocumentPosition(this.find[i].node);\n          if (pos & (before ? 2 : 4)) this.find[i].pos = this.currentPos;\n        }\n      }\n    }\n  }, {\n    key: \"findInText\",\n    value: function findInText(textNode) {\n      if (this.find) for (var i = 0; i < this.find.length; i++) {\n        if (this.find[i].node == textNode) this.find[i].pos = this.currentPos - (textNode.nodeValue.length - this.find[i].offset);\n      }\n    }\n    // Determines whether the given context string matches this context.\n  }, {\n    key: \"matchesContext\",\n    value: function matchesContext(context) {\n      var _this4 = this;\n      if (context.indexOf(\"|\") > -1) return context.split(/\\s*\\|\\s*/).some(this.matchesContext, this);\n      var parts = context.split(\"/\");\n      var option = this.options.context;\n      var useRoot = !this.isOpen && (!option || option.parent.type == this.nodes[0].type);\n      var minDepth = -(option ? option.depth + 1 : 0) + (useRoot ? 0 : 1);\n      var match = function match(i, depth) {\n        for (; i >= 0; i--) {\n          var part = parts[i];\n          if (part == \"\") {\n            if (i == parts.length - 1 || i == 0) continue;\n            for (; depth >= minDepth; depth--) {\n              if (match(i - 1, depth)) return true;\n            }\n            return false;\n          } else {\n            var next = depth > 0 || depth == 0 && useRoot ? _this4.nodes[depth].type : option && depth >= minDepth ? option.node(depth - minDepth).type : null;\n            if (!next || next.name != part && next.groups.indexOf(part) == -1) return false;\n            depth--;\n          }\n        }\n        return true;\n      };\n      return match(parts.length - 1, this.open);\n    }\n  }, {\n    key: \"textblockFromContext\",\n    value: function textblockFromContext() {\n      var $context = this.options.context;\n      if ($context) for (var d = $context.depth; d >= 0; d--) {\n        var deflt = $context.node(d).contentMatchAt($context.indexAfter(d)).defaultType;\n        if (deflt && deflt.isTextblock && deflt.defaultAttrs) return deflt;\n      }\n      for (var name in this.parser.schema.nodes) {\n        var type = this.parser.schema.nodes[name];\n        if (type.isTextblock && type.defaultAttrs) return type;\n      }\n    }\n  }, {\n    key: \"addPendingMark\",\n    value: function addPendingMark(mark) {\n      var found = findSameMarkInSet(mark, this.top.pendingMarks);\n      if (found) this.top.stashMarks.push(found);\n      this.top.pendingMarks = mark.addToSet(this.top.pendingMarks);\n    }\n  }, {\n    key: \"removePendingMark\",\n    value: function removePendingMark(mark, upto) {\n      for (var depth = this.open; depth >= 0; depth--) {\n        var level = this.nodes[depth];\n        var _found3 = level.pendingMarks.lastIndexOf(mark);\n        if (_found3 > -1) {\n          level.pendingMarks = mark.removeFromSet(level.pendingMarks);\n        } else {\n          level.activeMarks = mark.removeFromSet(level.activeMarks);\n          var stashMark = level.popFromStashMark(mark);\n          if (stashMark && level.type && level.type.allowsMarkType(stashMark.type)) level.activeMarks = stashMark.addToSet(level.activeMarks);\n        }\n        if (level == upto) break;\n      }\n    }\n  }]);\n  return ParseContext;\n}(); // Kludge to work around directly nested list nodes produced by some\n// tools and allowed by browsers to mean that the nested list is\n// actually part of the list item above it.\nfunction normalizeList(dom) {\n  for (var child = dom.firstChild, prevItem = null; child; child = child.nextSibling) {\n    var name = child.nodeType == 1 ? child.nodeName.toLowerCase() : null;\n    if (name && listTags.hasOwnProperty(name) && prevItem) {\n      prevItem.appendChild(child);\n      child = prevItem;\n    } else if (name == \"li\") {\n      prevItem = child;\n    } else if (name) {\n      prevItem = null;\n    }\n  }\n}\n// Apply a CSS selector.\nfunction matches(dom, selector) {\n  return (dom.matches || dom.msMatchesSelector || dom.webkitMatchesSelector || dom.mozMatchesSelector).call(dom, selector);\n}\n// Tokenize a style attribute into property/value pairs.\nfunction parseStyles(style) {\n  var re = /\\s*([\\w-]+)\\s*:\\s*([^;]+)/g,\n    m,\n    result = [];\n  while (m = re.exec(style)) {\n    result.push(m[1], m[2].trim());\n  }\n  return result;\n}\nfunction copy(obj) {\n  var copy = {};\n  for (var prop in obj) {\n    copy[prop] = obj[prop];\n  }\n  return copy;\n}\n// Used when finding a mark at the top level of a fragment parse.\n// Checks whether it would be reasonable to apply a given mark type to\n// a given node, by looking at the way the mark occurs in the schema.\nfunction markMayApply(markType, nodeType) {\n  var nodes = nodeType.schema.nodes;\n  var _loop4 = function _loop4(name) {\n    var parent = nodes[name];\n    if (!parent.allowsMarkType(markType)) return \"continue\";\n    var seen = [],\n      scan = function scan(match) {\n        seen.push(match);\n        for (var i = 0; i < match.edgeCount; i++) {\n          var _match$edge = match.edge(i),\n            type = _match$edge.type,\n            next = _match$edge.next;\n          if (type == nodeType) return true;\n          if (seen.indexOf(next) < 0 && scan(next)) return true;\n        }\n      };\n    if (scan(parent.contentMatch)) return {\n      v: true\n    };\n  };\n  for (var name in nodes) {\n    var _ret = _loop4(name);\n    if (_ret === \"continue\") continue;\n    if (typeof _ret === \"object\") return _ret.v;\n  }\n}\nfunction findSameMarkInSet(mark, set) {\n  for (var i = 0; i < set.length; i++) {\n    if (mark.eq(set[i])) return set[i];\n  }\n}\n\n/**\nA DOM serializer knows how to convert ProseMirror nodes and\nmarks of various types to DOM nodes.\n*/\nvar DOMSerializer = /*#__PURE__*/function () {\n  /**\n  Create a serializer. `nodes` should map node names to functions\n  that take a node and return a description of the corresponding\n  DOM. `marks` does the same for mark names, but also gets an\n  argument that tells it whether the mark's content is block or\n  inline content (for typical use, it'll always be inline). A mark\n  serializer may be `null` to indicate that marks of that type\n  should not be serialized.\n  */\n  function DOMSerializer(\n  /**\n  The node serialization functions.\n  */\n  nodes,\n  /**\n  The mark serialization functions.\n  */\n  marks) {\n    _classCallCheck(this, DOMSerializer);\n    this.nodes = nodes;\n    this.marks = marks;\n  }\n  /**\n  Serialize the content of this fragment to a DOM fragment. When\n  not in the browser, the `document` option, containing a DOM\n  document, should be passed so that the serializer can create\n  nodes.\n  */\n  _createClass(DOMSerializer, [{\n    key: \"serializeFragment\",\n    value: function serializeFragment(fragment) {\n      var _this5 = this;\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var target = arguments.length > 2 ? arguments[2] : undefined;\n      if (!target) target = doc(options).createDocumentFragment();\n      var top = target,\n        active = [];\n      fragment.forEach(function (node) {\n        if (active.length || node.marks.length) {\n          var keep = 0,\n            rendered = 0;\n          while (keep < active.length && rendered < node.marks.length) {\n            var next = node.marks[rendered];\n            if (!_this5.marks[next.type.name]) {\n              rendered++;\n              continue;\n            }\n            if (!next.eq(active[keep][0]) || next.type.spec.spanning === false) break;\n            keep++;\n            rendered++;\n          }\n          while (keep < active.length) {\n            top = active.pop()[1];\n          }\n          while (rendered < node.marks.length) {\n            var add = node.marks[rendered++];\n            var markDOM = _this5.serializeMark(add, node.isInline, options);\n            if (markDOM) {\n              active.push([add, top]);\n              top.appendChild(markDOM.dom);\n              top = markDOM.contentDOM || markDOM.dom;\n            }\n          }\n        }\n        top.appendChild(_this5.serializeNodeInner(node, options));\n      });\n      return target;\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"serializeNodeInner\",\n    value: function serializeNodeInner(node, options) {\n      var _DOMSerializer$render = DOMSerializer.renderSpec(doc(options), this.nodes[node.type.name](node)),\n        dom = _DOMSerializer$render.dom,\n        contentDOM = _DOMSerializer$render.contentDOM;\n      if (contentDOM) {\n        if (node.isLeaf) throw new RangeError(\"Content hole not allowed in a leaf node spec\");\n        this.serializeFragment(node.content, options, contentDOM);\n      }\n      return dom;\n    }\n    /**\n    Serialize this node to a DOM node. This can be useful when you\n    need to serialize a part of a document, as opposed to the whole\n    document. To serialize a whole document, use\n    [`serializeFragment`](https://prosemirror.net/docs/ref/#model.DOMSerializer.serializeFragment) on\n    its [content](https://prosemirror.net/docs/ref/#model.Node.content).\n    */\n  }, {\n    key: \"serializeNode\",\n    value: function serializeNode(node) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var dom = this.serializeNodeInner(node, options);\n      for (var i = node.marks.length - 1; i >= 0; i--) {\n        var wrap = this.serializeMark(node.marks[i], node.isInline, options);\n        if (wrap) {\n          (wrap.contentDOM || wrap.dom).appendChild(dom);\n          dom = wrap.dom;\n        }\n      }\n      return dom;\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"serializeMark\",\n    value: function serializeMark(mark, inline) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var toDOM = this.marks[mark.type.name];\n      return toDOM && DOMSerializer.renderSpec(doc(options), toDOM(mark, inline));\n    }\n    /**\n    Render an [output spec](https://prosemirror.net/docs/ref/#model.DOMOutputSpec) to a DOM node. If\n    the spec has a hole (zero) in it, `contentDOM` will point at the\n    node with the hole.\n    */\n  }], [{\n    key: \"renderSpec\",\n    value: function renderSpec(doc, structure) {\n      var xmlNS = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      if (typeof structure == \"string\") return {\n        dom: doc.createTextNode(structure)\n      };\n      if (structure.nodeType != null) return {\n        dom: structure\n      };\n      if (structure.dom && structure.dom.nodeType != null) return structure;\n      var tagName = structure[0],\n        space = tagName.indexOf(\" \");\n      if (space > 0) {\n        xmlNS = tagName.slice(0, space);\n        tagName = tagName.slice(space + 1);\n      }\n      var contentDOM;\n      var dom = xmlNS ? doc.createElementNS(xmlNS, tagName) : doc.createElement(tagName);\n      var attrs = structure[1],\n        start = 1;\n      if (attrs && typeof attrs == \"object\" && attrs.nodeType == null && !Array.isArray(attrs)) {\n        start = 2;\n        for (var name in attrs) {\n          if (attrs[name] != null) {\n            var _space = name.indexOf(\" \");\n            if (_space > 0) dom.setAttributeNS(name.slice(0, _space), name.slice(_space + 1), attrs[name]);else dom.setAttribute(name, attrs[name]);\n          }\n        }\n      }\n      for (var i = start; i < structure.length; i++) {\n        var child = structure[i];\n        if (child === 0) {\n          if (i < structure.length - 1 || i > start) throw new RangeError(\"Content hole must be the only child of its parent node\");\n          return {\n            dom: dom,\n            contentDOM: dom\n          };\n        } else {\n          var _DOMSerializer$render2 = DOMSerializer.renderSpec(doc, child, xmlNS),\n            inner = _DOMSerializer$render2.dom,\n            innerContent = _DOMSerializer$render2.contentDOM;\n          dom.appendChild(inner);\n          if (innerContent) {\n            if (contentDOM) throw new RangeError(\"Multiple content holes\");\n            contentDOM = innerContent;\n          }\n        }\n      }\n      return {\n        dom: dom,\n        contentDOM: contentDOM\n      };\n    }\n    /**\n    Build a serializer using the [`toDOM`](https://prosemirror.net/docs/ref/#model.NodeSpec.toDOM)\n    properties in a schema's node and mark specs.\n    */\n  }, {\n    key: \"fromSchema\",\n    value: function fromSchema(schema) {\n      return schema.cached.domSerializer || (schema.cached.domSerializer = new DOMSerializer(this.nodesFromSchema(schema), this.marksFromSchema(schema)));\n    }\n    /**\n    Gather the serializers in a schema's node specs into an object.\n    This can be useful as a base to build a custom serializer from.\n    */\n  }, {\n    key: \"nodesFromSchema\",\n    value: function nodesFromSchema(schema) {\n      var result = gatherToDOM(schema.nodes);\n      if (!result.text) result.text = function (node) {\n        return node.text;\n      };\n      return result;\n    }\n    /**\n    Gather the serializers in a schema's mark specs into an object.\n    */\n  }, {\n    key: \"marksFromSchema\",\n    value: function marksFromSchema(schema) {\n      return gatherToDOM(schema.marks);\n    }\n  }]);\n  return DOMSerializer;\n}();\nfunction gatherToDOM(obj) {\n  var result = {};\n  for (var name in obj) {\n    var toDOM = obj[name].spec.toDOM;\n    if (toDOM) result[name] = toDOM;\n  }\n  return result;\n}\nfunction doc(options) {\n  return options.document || window.document;\n}\nexport { ContentMatch, DOMParser, DOMSerializer, Fragment, Mark, MarkType, Node, NodeRange, NodeType, ReplaceError, ResolvedPos, Schema, Slice };","map":{"version":3,"names":["OrderedMap","findDiffStart","a","b","pos","i","childCount","childA","child","childB","nodeSize","sameMarkup","isText","text","j","content","size","inner","findDiffEnd","posA","posB","iA","iB","same","minSize","Math","min","length","Fragment","from","to","f","nodeStart","parent","end","start","nodesBetween","max","blockSeparator","leafText","separated","node","slice","isLeaf","type","spec","isBlock","other","last","lastChild","first","firstChild","withText","push","result","cut","empty","index","current","copy","concat","eq","found","RangeError","p","otherPos","round","retIndex","curPos","cur","toStringInner","join","map","n","toJSON","schema","value","Array","isArray","nodeFromJSON","array","joined","nodes","fromArray","attrs","offset","compareDeep","Mark","set","placed","excludes","rank","obj","name","_","json","marks","create","none","sort","ReplaceError","Error","Slice","openStart","openEnd","fragment","insertInto","removeRange","fromJSON","openIsolating","isolating","findIndex","maybeChild","indexTo","offsetTo","append","replaceChild","dist","insert","canReplace","replace","$from","$to","depth","replaceOuter","close","replaceTwoWay","parentOffset","prepareSliceForReplace","replaceThreeWay","checkJoin","main","sub","compatibleContent","joinable","$before","$after","addNode","target","addRange","$start","$end","startIndex","endIndex","textOffset","nodeAfter","nodeBefore","validContent","$along","extra","resolveNoCache","ResolvedPos","path","val","resolveDepth","dOff","tmp","inclusive","isInSet","removeFromSet","after","isInline","next","pred","blockRange","d","inlineContent","NodeRange","str","doc","rem","resolveCache","cached","resolveCachePos","resolve","resolveCacheSize","before","indexAfter","emptyAttrs","Object","Node","forEach","startPos","textBetween","hasMarkup","defaultAttrs","sameSet","includeParents","sharedDepth","resolveCached","isTextblock","isAtom","toDebugString","wrapMarks","match","contentMatch","matchFragment","replacement","one","contentMatchAt","two","validEnd","allowsMarks","matchType","toString","addToSet","m","check","markFromJSON","nodeType","prototype","undefined","TextNode","JSON","stringify","base","ContentMatch","wrapCache","frag","hasRequiredAttrs","toEnd","seen","search","types","finished","tp","createAndFill","indexOf","computed","computeWrapping","active","via","shift","reverse","scan","out","string","nodeTypes","stream","TokenStream","expr","parseExpr","err","dfa","nfa","checkForDeadEnds","inline","tokens","split","pop","tok","SyntaxError","exprs","parseExprSeq","eat","parseExprSubscript","parseExprAtom","parseExprRange","parseNum","test","Number","resolveName","typeName","groups","connect","compile","edge","term","edges","reduce","loop","cmp","nullFrom","labeled","explore","states","state","work","dead","defaults","attrName","attr","hasDefault","default","computeAttrs","built","given","initAttrs","Attribute","NodeType","markSet","group","atom","whitespace","code","isRequired","compatible","setFrom","fillBefore","matched","markType","allowsMarkType","topType","topNode","options","hasOwnProperty","call","MarkType","excluded","instance","Schema","contentExprCache","prop","contentExpr","markExpr","parse","gatherMarks","excl","bind","topNodeType","wrappings","createChecked","mark","ok","DOMParser","rules","tags","styles","rule","tag","style","normalizeLists","some","r","dom","context","ParseContext","addAll","finish","maxOpen","matches","namespace","namespaceURI","matchesContext","getAttrs","charCodeAt","priority","nextPriority","splice","parseDOM","domParser","schemaRules","blockTags","address","article","aside","blockquote","canvas","dd","div","dl","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","hr","li","noscript","ol","output","pre","section","table","tfoot","ul","ignoreTags","head","object","script","title","listTags","OPT_PRESERVE_WS","OPT_PRESERVE_WS_FULL","OPT_OPEN_LEFT","wsOptionsFor","preserveWhitespace","NodeContext","pendingMarks","solid","activeMarks","stashMarks","fill","wrap","findWrapping","exec","nextType","pending","markMayApply","parentNode","nodeName","toLowerCase","parser","isOpen","open","topContext","topOptions","topMatch","find","findPositions","needsBlock","addTextNode","getAttribute","readStyles","parseStyles","top","addPendingMark","addElement","removePendingMark","nodeValue","inlineContext","domNodeBefore","previousSibling","insertNode","findInText","findInside","matchAfter","ruleID","normalizeList","ruleFromNode","matchTag","ignore","ignoreFallback","skip","closeParent","sync","oldNeedsBlock","leafFallback","addElementByRule","consuming","ownerDocument","createTextNode","findPlace","matchStyle","continueAfter","enter","startIn","getContent","contentDOM","contentElement","querySelector","findAround","childNodes","nextSibling","findAtPoint","addDOM","route","cx","enterInner","block","textblockFromContext","closeExtra","applyPending","preserveWS","topOpen","currentPos","contains","compareDocumentPosition","textNode","parts","option","useRoot","minDepth","part","$context","deflt","defaultType","findSameMarkInSet","upto","level","lastIndexOf","stashMark","popFromStashMark","prevItem","appendChild","selector","msMatchesSelector","webkitMatchesSelector","mozMatchesSelector","re","trim","edgeCount","DOMSerializer","createDocumentFragment","keep","rendered","spanning","add","markDOM","serializeMark","serializeNodeInner","renderSpec","serializeFragment","toDOM","structure","xmlNS","tagName","space","createElementNS","createElement","setAttributeNS","setAttribute","innerContent","domSerializer","nodesFromSchema","marksFromSchema","gatherToDOM","document","window"],"sources":["/Users/baxtiyoraxatov/Desktop/Desktop/ultragear-react/node_modules/prosemirror-model/dist/index.js"],"sourcesContent":["import OrderedMap from 'orderedmap';\n\nfunction findDiffStart(a, b, pos) {\n    for (let i = 0;; i++) {\n        if (i == a.childCount || i == b.childCount)\n            return a.childCount == b.childCount ? null : pos;\n        let childA = a.child(i), childB = b.child(i);\n        if (childA == childB) {\n            pos += childA.nodeSize;\n            continue;\n        }\n        if (!childA.sameMarkup(childB))\n            return pos;\n        if (childA.isText && childA.text != childB.text) {\n            for (let j = 0; childA.text[j] == childB.text[j]; j++)\n                pos++;\n            return pos;\n        }\n        if (childA.content.size || childB.content.size) {\n            let inner = findDiffStart(childA.content, childB.content, pos + 1);\n            if (inner != null)\n                return inner;\n        }\n        pos += childA.nodeSize;\n    }\n}\nfunction findDiffEnd(a, b, posA, posB) {\n    for (let iA = a.childCount, iB = b.childCount;;) {\n        if (iA == 0 || iB == 0)\n            return iA == iB ? null : { a: posA, b: posB };\n        let childA = a.child(--iA), childB = b.child(--iB), size = childA.nodeSize;\n        if (childA == childB) {\n            posA -= size;\n            posB -= size;\n            continue;\n        }\n        if (!childA.sameMarkup(childB))\n            return { a: posA, b: posB };\n        if (childA.isText && childA.text != childB.text) {\n            let same = 0, minSize = Math.min(childA.text.length, childB.text.length);\n            while (same < minSize && childA.text[childA.text.length - same - 1] == childB.text[childB.text.length - same - 1]) {\n                same++;\n                posA--;\n                posB--;\n            }\n            return { a: posA, b: posB };\n        }\n        if (childA.content.size || childB.content.size) {\n            let inner = findDiffEnd(childA.content, childB.content, posA - 1, posB - 1);\n            if (inner)\n                return inner;\n        }\n        posA -= size;\n        posB -= size;\n    }\n}\n\n/**\nA fragment represents a node's collection of child nodes.\n\nLike nodes, fragments are persistent data structures, and you\nshould not mutate them or their content. Rather, you create new\ninstances whenever needed. The API tries to make this easy.\n*/\nclass Fragment {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    @internal\n    */\n    content, size) {\n        this.content = content;\n        this.size = size || 0;\n        if (size == null)\n            for (let i = 0; i < content.length; i++)\n                this.size += content[i].nodeSize;\n    }\n    /**\n    Invoke a callback for all descendant nodes between the given two\n    positions (relative to start of this fragment). Doesn't descend\n    into a node when the callback returns `false`.\n    */\n    nodesBetween(from, to, f, nodeStart = 0, parent) {\n        for (let i = 0, pos = 0; pos < to; i++) {\n            let child = this.content[i], end = pos + child.nodeSize;\n            if (end > from && f(child, nodeStart + pos, parent || null, i) !== false && child.content.size) {\n                let start = pos + 1;\n                child.nodesBetween(Math.max(0, from - start), Math.min(child.content.size, to - start), f, nodeStart + start);\n            }\n            pos = end;\n        }\n    }\n    /**\n    Call the given callback for every descendant node. `pos` will be\n    relative to the start of the fragment. The callback may return\n    `false` to prevent traversal of a given node's children.\n    */\n    descendants(f) {\n        this.nodesBetween(0, this.size, f);\n    }\n    /**\n    Extract the text between `from` and `to`. See the same method on\n    [`Node`](https://prosemirror.net/docs/ref/#model.Node.textBetween).\n    */\n    textBetween(from, to, blockSeparator, leafText) {\n        let text = \"\", separated = true;\n        this.nodesBetween(from, to, (node, pos) => {\n            if (node.isText) {\n                text += node.text.slice(Math.max(from, pos) - pos, to - pos);\n                separated = !blockSeparator;\n            }\n            else if (node.isLeaf) {\n                if (leafText) {\n                    text += typeof leafText === \"function\" ? leafText(node) : leafText;\n                }\n                else if (node.type.spec.leafText) {\n                    text += node.type.spec.leafText(node);\n                }\n                separated = !blockSeparator;\n            }\n            else if (!separated && node.isBlock) {\n                text += blockSeparator;\n                separated = true;\n            }\n        }, 0);\n        return text;\n    }\n    /**\n    Create a new fragment containing the combined content of this\n    fragment and the other.\n    */\n    append(other) {\n        if (!other.size)\n            return this;\n        if (!this.size)\n            return other;\n        let last = this.lastChild, first = other.firstChild, content = this.content.slice(), i = 0;\n        if (last.isText && last.sameMarkup(first)) {\n            content[content.length - 1] = last.withText(last.text + first.text);\n            i = 1;\n        }\n        for (; i < other.content.length; i++)\n            content.push(other.content[i]);\n        return new Fragment(content, this.size + other.size);\n    }\n    /**\n    Cut out the sub-fragment between the two given positions.\n    */\n    cut(from, to = this.size) {\n        if (from == 0 && to == this.size)\n            return this;\n        let result = [], size = 0;\n        if (to > from)\n            for (let i = 0, pos = 0; pos < to; i++) {\n                let child = this.content[i], end = pos + child.nodeSize;\n                if (end > from) {\n                    if (pos < from || end > to) {\n                        if (child.isText)\n                            child = child.cut(Math.max(0, from - pos), Math.min(child.text.length, to - pos));\n                        else\n                            child = child.cut(Math.max(0, from - pos - 1), Math.min(child.content.size, to - pos - 1));\n                    }\n                    result.push(child);\n                    size += child.nodeSize;\n                }\n                pos = end;\n            }\n        return new Fragment(result, size);\n    }\n    /**\n    @internal\n    */\n    cutByIndex(from, to) {\n        if (from == to)\n            return Fragment.empty;\n        if (from == 0 && to == this.content.length)\n            return this;\n        return new Fragment(this.content.slice(from, to));\n    }\n    /**\n    Create a new fragment in which the node at the given index is\n    replaced by the given node.\n    */\n    replaceChild(index, node) {\n        let current = this.content[index];\n        if (current == node)\n            return this;\n        let copy = this.content.slice();\n        let size = this.size + node.nodeSize - current.nodeSize;\n        copy[index] = node;\n        return new Fragment(copy, size);\n    }\n    /**\n    Create a new fragment by prepending the given node to this\n    fragment.\n    */\n    addToStart(node) {\n        return new Fragment([node].concat(this.content), this.size + node.nodeSize);\n    }\n    /**\n    Create a new fragment by appending the given node to this\n    fragment.\n    */\n    addToEnd(node) {\n        return new Fragment(this.content.concat(node), this.size + node.nodeSize);\n    }\n    /**\n    Compare this fragment to another one.\n    */\n    eq(other) {\n        if (this.content.length != other.content.length)\n            return false;\n        for (let i = 0; i < this.content.length; i++)\n            if (!this.content[i].eq(other.content[i]))\n                return false;\n        return true;\n    }\n    /**\n    The first child of the fragment, or `null` if it is empty.\n    */\n    get firstChild() { return this.content.length ? this.content[0] : null; }\n    /**\n    The last child of the fragment, or `null` if it is empty.\n    */\n    get lastChild() { return this.content.length ? this.content[this.content.length - 1] : null; }\n    /**\n    The number of child nodes in this fragment.\n    */\n    get childCount() { return this.content.length; }\n    /**\n    Get the child node at the given index. Raise an error when the\n    index is out of range.\n    */\n    child(index) {\n        let found = this.content[index];\n        if (!found)\n            throw new RangeError(\"Index \" + index + \" out of range for \" + this);\n        return found;\n    }\n    /**\n    Get the child node at the given index, if it exists.\n    */\n    maybeChild(index) {\n        return this.content[index] || null;\n    }\n    /**\n    Call `f` for every child node, passing the node, its offset\n    into this parent node, and its index.\n    */\n    forEach(f) {\n        for (let i = 0, p = 0; i < this.content.length; i++) {\n            let child = this.content[i];\n            f(child, p, i);\n            p += child.nodeSize;\n        }\n    }\n    /**\n    Find the first position at which this fragment and another\n    fragment differ, or `null` if they are the same.\n    */\n    findDiffStart(other, pos = 0) {\n        return findDiffStart(this, other, pos);\n    }\n    /**\n    Find the first position, searching from the end, at which this\n    fragment and the given fragment differ, or `null` if they are\n    the same. Since this position will not be the same in both\n    nodes, an object with two separate positions is returned.\n    */\n    findDiffEnd(other, pos = this.size, otherPos = other.size) {\n        return findDiffEnd(this, other, pos, otherPos);\n    }\n    /**\n    Find the index and inner offset corresponding to a given relative\n    position in this fragment. The result object will be reused\n    (overwritten) the next time the function is called. (Not public.)\n    */\n    findIndex(pos, round = -1) {\n        if (pos == 0)\n            return retIndex(0, pos);\n        if (pos == this.size)\n            return retIndex(this.content.length, pos);\n        if (pos > this.size || pos < 0)\n            throw new RangeError(`Position ${pos} outside of fragment (${this})`);\n        for (let i = 0, curPos = 0;; i++) {\n            let cur = this.child(i), end = curPos + cur.nodeSize;\n            if (end >= pos) {\n                if (end == pos || round > 0)\n                    return retIndex(i + 1, end);\n                return retIndex(i, curPos);\n            }\n            curPos = end;\n        }\n    }\n    /**\n    Return a debugging string that describes this fragment.\n    */\n    toString() { return \"<\" + this.toStringInner() + \">\"; }\n    /**\n    @internal\n    */\n    toStringInner() { return this.content.join(\", \"); }\n    /**\n    Create a JSON-serializeable representation of this fragment.\n    */\n    toJSON() {\n        return this.content.length ? this.content.map(n => n.toJSON()) : null;\n    }\n    /**\n    Deserialize a fragment from its JSON representation.\n    */\n    static fromJSON(schema, value) {\n        if (!value)\n            return Fragment.empty;\n        if (!Array.isArray(value))\n            throw new RangeError(\"Invalid input for Fragment.fromJSON\");\n        return new Fragment(value.map(schema.nodeFromJSON));\n    }\n    /**\n    Build a fragment from an array of nodes. Ensures that adjacent\n    text nodes with the same marks are joined together.\n    */\n    static fromArray(array) {\n        if (!array.length)\n            return Fragment.empty;\n        let joined, size = 0;\n        for (let i = 0; i < array.length; i++) {\n            let node = array[i];\n            size += node.nodeSize;\n            if (i && node.isText && array[i - 1].sameMarkup(node)) {\n                if (!joined)\n                    joined = array.slice(0, i);\n                joined[joined.length - 1] = node\n                    .withText(joined[joined.length - 1].text + node.text);\n            }\n            else if (joined) {\n                joined.push(node);\n            }\n        }\n        return new Fragment(joined || array, size);\n    }\n    /**\n    Create a fragment from something that can be interpreted as a\n    set of nodes. For `null`, it returns the empty fragment. For a\n    fragment, the fragment itself. For a node or array of nodes, a\n    fragment containing those nodes.\n    */\n    static from(nodes) {\n        if (!nodes)\n            return Fragment.empty;\n        if (nodes instanceof Fragment)\n            return nodes;\n        if (Array.isArray(nodes))\n            return this.fromArray(nodes);\n        if (nodes.attrs)\n            return new Fragment([nodes], nodes.nodeSize);\n        throw new RangeError(\"Can not convert \" + nodes + \" to a Fragment\" +\n            (nodes.nodesBetween ? \" (looks like multiple versions of prosemirror-model were loaded)\" : \"\"));\n    }\n}\n/**\nAn empty fragment. Intended to be reused whenever a node doesn't\ncontain anything (rather than allocating a new empty fragment for\neach leaf node).\n*/\nFragment.empty = new Fragment([], 0);\nconst found = { index: 0, offset: 0 };\nfunction retIndex(index, offset) {\n    found.index = index;\n    found.offset = offset;\n    return found;\n}\n\nfunction compareDeep(a, b) {\n    if (a === b)\n        return true;\n    if (!(a && typeof a == \"object\") ||\n        !(b && typeof b == \"object\"))\n        return false;\n    let array = Array.isArray(a);\n    if (Array.isArray(b) != array)\n        return false;\n    if (array) {\n        if (a.length != b.length)\n            return false;\n        for (let i = 0; i < a.length; i++)\n            if (!compareDeep(a[i], b[i]))\n                return false;\n    }\n    else {\n        for (let p in a)\n            if (!(p in b) || !compareDeep(a[p], b[p]))\n                return false;\n        for (let p in b)\n            if (!(p in a))\n                return false;\n    }\n    return true;\n}\n\n/**\nA mark is a piece of information that can be attached to a node,\nsuch as it being emphasized, in code font, or a link. It has a\ntype and optionally a set of attributes that provide further\ninformation (such as the target of the link). Marks are created\nthrough a `Schema`, which controls which types exist and which\nattributes they have.\n*/\nclass Mark {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The type of this mark.\n    */\n    type, \n    /**\n    The attributes associated with this mark.\n    */\n    attrs) {\n        this.type = type;\n        this.attrs = attrs;\n    }\n    /**\n    Given a set of marks, create a new set which contains this one as\n    well, in the right position. If this mark is already in the set,\n    the set itself is returned. If any marks that are set to be\n    [exclusive](https://prosemirror.net/docs/ref/#model.MarkSpec.excludes) with this mark are present,\n    those are replaced by this one.\n    */\n    addToSet(set) {\n        let copy, placed = false;\n        for (let i = 0; i < set.length; i++) {\n            let other = set[i];\n            if (this.eq(other))\n                return set;\n            if (this.type.excludes(other.type)) {\n                if (!copy)\n                    copy = set.slice(0, i);\n            }\n            else if (other.type.excludes(this.type)) {\n                return set;\n            }\n            else {\n                if (!placed && other.type.rank > this.type.rank) {\n                    if (!copy)\n                        copy = set.slice(0, i);\n                    copy.push(this);\n                    placed = true;\n                }\n                if (copy)\n                    copy.push(other);\n            }\n        }\n        if (!copy)\n            copy = set.slice();\n        if (!placed)\n            copy.push(this);\n        return copy;\n    }\n    /**\n    Remove this mark from the given set, returning a new set. If this\n    mark is not in the set, the set itself is returned.\n    */\n    removeFromSet(set) {\n        for (let i = 0; i < set.length; i++)\n            if (this.eq(set[i]))\n                return set.slice(0, i).concat(set.slice(i + 1));\n        return set;\n    }\n    /**\n    Test whether this mark is in the given set of marks.\n    */\n    isInSet(set) {\n        for (let i = 0; i < set.length; i++)\n            if (this.eq(set[i]))\n                return true;\n        return false;\n    }\n    /**\n    Test whether this mark has the same type and attributes as\n    another mark.\n    */\n    eq(other) {\n        return this == other ||\n            (this.type == other.type && compareDeep(this.attrs, other.attrs));\n    }\n    /**\n    Convert this mark to a JSON-serializeable representation.\n    */\n    toJSON() {\n        let obj = { type: this.type.name };\n        for (let _ in this.attrs) {\n            obj.attrs = this.attrs;\n            break;\n        }\n        return obj;\n    }\n    /**\n    Deserialize a mark from JSON.\n    */\n    static fromJSON(schema, json) {\n        if (!json)\n            throw new RangeError(\"Invalid input for Mark.fromJSON\");\n        let type = schema.marks[json.type];\n        if (!type)\n            throw new RangeError(`There is no mark type ${json.type} in this schema`);\n        return type.create(json.attrs);\n    }\n    /**\n    Test whether two sets of marks are identical.\n    */\n    static sameSet(a, b) {\n        if (a == b)\n            return true;\n        if (a.length != b.length)\n            return false;\n        for (let i = 0; i < a.length; i++)\n            if (!a[i].eq(b[i]))\n                return false;\n        return true;\n    }\n    /**\n    Create a properly sorted mark set from null, a single mark, or an\n    unsorted array of marks.\n    */\n    static setFrom(marks) {\n        if (!marks || Array.isArray(marks) && marks.length == 0)\n            return Mark.none;\n        if (marks instanceof Mark)\n            return [marks];\n        let copy = marks.slice();\n        copy.sort((a, b) => a.type.rank - b.type.rank);\n        return copy;\n    }\n}\n/**\nThe empty set of marks.\n*/\nMark.none = [];\n\n/**\nError type raised by [`Node.replace`](https://prosemirror.net/docs/ref/#model.Node.replace) when\ngiven an invalid replacement.\n*/\nclass ReplaceError extends Error {\n}\n/*\nReplaceError = function(this: any, message: string) {\n  let err = Error.call(this, message)\n  ;(err as any).__proto__ = ReplaceError.prototype\n  return err\n} as any\n\nReplaceError.prototype = Object.create(Error.prototype)\nReplaceError.prototype.constructor = ReplaceError\nReplaceError.prototype.name = \"ReplaceError\"\n*/\n/**\nA slice represents a piece cut out of a larger document. It\nstores not only a fragment, but also the depth up to which nodes on\nboth side are ‘open’ (cut through).\n*/\nclass Slice {\n    /**\n    Create a slice. When specifying a non-zero open depth, you must\n    make sure that there are nodes of at least that depth at the\n    appropriate side of the fragment—i.e. if the fragment is an\n    empty paragraph node, `openStart` and `openEnd` can't be greater\n    than 1.\n    \n    It is not necessary for the content of open nodes to conform to\n    the schema's content constraints, though it should be a valid\n    start/end/middle for such a node, depending on which sides are\n    open.\n    */\n    constructor(\n    /**\n    The slice's content.\n    */\n    content, \n    /**\n    The open depth at the start of the fragment.\n    */\n    openStart, \n    /**\n    The open depth at the end.\n    */\n    openEnd) {\n        this.content = content;\n        this.openStart = openStart;\n        this.openEnd = openEnd;\n    }\n    /**\n    The size this slice would add when inserted into a document.\n    */\n    get size() {\n        return this.content.size - this.openStart - this.openEnd;\n    }\n    /**\n    @internal\n    */\n    insertAt(pos, fragment) {\n        let content = insertInto(this.content, pos + this.openStart, fragment);\n        return content && new Slice(content, this.openStart, this.openEnd);\n    }\n    /**\n    @internal\n    */\n    removeBetween(from, to) {\n        return new Slice(removeRange(this.content, from + this.openStart, to + this.openStart), this.openStart, this.openEnd);\n    }\n    /**\n    Tests whether this slice is equal to another slice.\n    */\n    eq(other) {\n        return this.content.eq(other.content) && this.openStart == other.openStart && this.openEnd == other.openEnd;\n    }\n    /**\n    @internal\n    */\n    toString() {\n        return this.content + \"(\" + this.openStart + \",\" + this.openEnd + \")\";\n    }\n    /**\n    Convert a slice to a JSON-serializable representation.\n    */\n    toJSON() {\n        if (!this.content.size)\n            return null;\n        let json = { content: this.content.toJSON() };\n        if (this.openStart > 0)\n            json.openStart = this.openStart;\n        if (this.openEnd > 0)\n            json.openEnd = this.openEnd;\n        return json;\n    }\n    /**\n    Deserialize a slice from its JSON representation.\n    */\n    static fromJSON(schema, json) {\n        if (!json)\n            return Slice.empty;\n        let openStart = json.openStart || 0, openEnd = json.openEnd || 0;\n        if (typeof openStart != \"number\" || typeof openEnd != \"number\")\n            throw new RangeError(\"Invalid input for Slice.fromJSON\");\n        return new Slice(Fragment.fromJSON(schema, json.content), openStart, openEnd);\n    }\n    /**\n    Create a slice from a fragment by taking the maximum possible\n    open value on both side of the fragment.\n    */\n    static maxOpen(fragment, openIsolating = true) {\n        let openStart = 0, openEnd = 0;\n        for (let n = fragment.firstChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.firstChild)\n            openStart++;\n        for (let n = fragment.lastChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.lastChild)\n            openEnd++;\n        return new Slice(fragment, openStart, openEnd);\n    }\n}\n/**\nThe empty slice.\n*/\nSlice.empty = new Slice(Fragment.empty, 0, 0);\nfunction removeRange(content, from, to) {\n    let { index, offset } = content.findIndex(from), child = content.maybeChild(index);\n    let { index: indexTo, offset: offsetTo } = content.findIndex(to);\n    if (offset == from || child.isText) {\n        if (offsetTo != to && !content.child(indexTo).isText)\n            throw new RangeError(\"Removing non-flat range\");\n        return content.cut(0, from).append(content.cut(to));\n    }\n    if (index != indexTo)\n        throw new RangeError(\"Removing non-flat range\");\n    return content.replaceChild(index, child.copy(removeRange(child.content, from - offset - 1, to - offset - 1)));\n}\nfunction insertInto(content, dist, insert, parent) {\n    let { index, offset } = content.findIndex(dist), child = content.maybeChild(index);\n    if (offset == dist || child.isText) {\n        if (parent && !parent.canReplace(index, index, insert))\n            return null;\n        return content.cut(0, dist).append(insert).append(content.cut(dist));\n    }\n    let inner = insertInto(child.content, dist - offset - 1, insert);\n    return inner && content.replaceChild(index, child.copy(inner));\n}\nfunction replace($from, $to, slice) {\n    if (slice.openStart > $from.depth)\n        throw new ReplaceError(\"Inserted content deeper than insertion position\");\n    if ($from.depth - slice.openStart != $to.depth - slice.openEnd)\n        throw new ReplaceError(\"Inconsistent open depths\");\n    return replaceOuter($from, $to, slice, 0);\n}\nfunction replaceOuter($from, $to, slice, depth) {\n    let index = $from.index(depth), node = $from.node(depth);\n    if (index == $to.index(depth) && depth < $from.depth - slice.openStart) {\n        let inner = replaceOuter($from, $to, slice, depth + 1);\n        return node.copy(node.content.replaceChild(index, inner));\n    }\n    else if (!slice.content.size) {\n        return close(node, replaceTwoWay($from, $to, depth));\n    }\n    else if (!slice.openStart && !slice.openEnd && $from.depth == depth && $to.depth == depth) { // Simple, flat case\n        let parent = $from.parent, content = parent.content;\n        return close(parent, content.cut(0, $from.parentOffset).append(slice.content).append(content.cut($to.parentOffset)));\n    }\n    else {\n        let { start, end } = prepareSliceForReplace(slice, $from);\n        return close(node, replaceThreeWay($from, start, end, $to, depth));\n    }\n}\nfunction checkJoin(main, sub) {\n    if (!sub.type.compatibleContent(main.type))\n        throw new ReplaceError(\"Cannot join \" + sub.type.name + \" onto \" + main.type.name);\n}\nfunction joinable($before, $after, depth) {\n    let node = $before.node(depth);\n    checkJoin(node, $after.node(depth));\n    return node;\n}\nfunction addNode(child, target) {\n    let last = target.length - 1;\n    if (last >= 0 && child.isText && child.sameMarkup(target[last]))\n        target[last] = child.withText(target[last].text + child.text);\n    else\n        target.push(child);\n}\nfunction addRange($start, $end, depth, target) {\n    let node = ($end || $start).node(depth);\n    let startIndex = 0, endIndex = $end ? $end.index(depth) : node.childCount;\n    if ($start) {\n        startIndex = $start.index(depth);\n        if ($start.depth > depth) {\n            startIndex++;\n        }\n        else if ($start.textOffset) {\n            addNode($start.nodeAfter, target);\n            startIndex++;\n        }\n    }\n    for (let i = startIndex; i < endIndex; i++)\n        addNode(node.child(i), target);\n    if ($end && $end.depth == depth && $end.textOffset)\n        addNode($end.nodeBefore, target);\n}\nfunction close(node, content) {\n    if (!node.type.validContent(content))\n        throw new ReplaceError(\"Invalid content for node \" + node.type.name);\n    return node.copy(content);\n}\nfunction replaceThreeWay($from, $start, $end, $to, depth) {\n    let openStart = $from.depth > depth && joinable($from, $start, depth + 1);\n    let openEnd = $to.depth > depth && joinable($end, $to, depth + 1);\n    let content = [];\n    addRange(null, $from, depth, content);\n    if (openStart && openEnd && $start.index(depth) == $end.index(depth)) {\n        checkJoin(openStart, openEnd);\n        addNode(close(openStart, replaceThreeWay($from, $start, $end, $to, depth + 1)), content);\n    }\n    else {\n        if (openStart)\n            addNode(close(openStart, replaceTwoWay($from, $start, depth + 1)), content);\n        addRange($start, $end, depth, content);\n        if (openEnd)\n            addNode(close(openEnd, replaceTwoWay($end, $to, depth + 1)), content);\n    }\n    addRange($to, null, depth, content);\n    return new Fragment(content);\n}\nfunction replaceTwoWay($from, $to, depth) {\n    let content = [];\n    addRange(null, $from, depth, content);\n    if ($from.depth > depth) {\n        let type = joinable($from, $to, depth + 1);\n        addNode(close(type, replaceTwoWay($from, $to, depth + 1)), content);\n    }\n    addRange($to, null, depth, content);\n    return new Fragment(content);\n}\nfunction prepareSliceForReplace(slice, $along) {\n    let extra = $along.depth - slice.openStart, parent = $along.node(extra);\n    let node = parent.copy(slice.content);\n    for (let i = extra - 1; i >= 0; i--)\n        node = $along.node(i).copy(Fragment.from(node));\n    return { start: node.resolveNoCache(slice.openStart + extra),\n        end: node.resolveNoCache(node.content.size - slice.openEnd - extra) };\n}\n\n/**\nYou can [_resolve_](https://prosemirror.net/docs/ref/#model.Node.resolve) a position to get more\ninformation about it. Objects of this class represent such a\nresolved position, providing various pieces of context\ninformation, and some helper methods.\n\nThroughout this interface, methods that take an optional `depth`\nparameter will interpret undefined as `this.depth` and negative\nnumbers as `this.depth + value`.\n*/\nclass ResolvedPos {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The position that was resolved.\n    */\n    pos, \n    /**\n    @internal\n    */\n    path, \n    /**\n    The offset this position has into its parent node.\n    */\n    parentOffset) {\n        this.pos = pos;\n        this.path = path;\n        this.parentOffset = parentOffset;\n        this.depth = path.length / 3 - 1;\n    }\n    /**\n    @internal\n    */\n    resolveDepth(val) {\n        if (val == null)\n            return this.depth;\n        if (val < 0)\n            return this.depth + val;\n        return val;\n    }\n    /**\n    The parent node that the position points into. Note that even if\n    a position points into a text node, that node is not considered\n    the parent—text nodes are ‘flat’ in this model, and have no content.\n    */\n    get parent() { return this.node(this.depth); }\n    /**\n    The root node in which the position was resolved.\n    */\n    get doc() { return this.node(0); }\n    /**\n    The ancestor node at the given level. `p.node(p.depth)` is the\n    same as `p.parent`.\n    */\n    node(depth) { return this.path[this.resolveDepth(depth) * 3]; }\n    /**\n    The index into the ancestor at the given level. If this points\n    at the 3rd node in the 2nd paragraph on the top level, for\n    example, `p.index(0)` is 1 and `p.index(1)` is 2.\n    */\n    index(depth) { return this.path[this.resolveDepth(depth) * 3 + 1]; }\n    /**\n    The index pointing after this position into the ancestor at the\n    given level.\n    */\n    indexAfter(depth) {\n        depth = this.resolveDepth(depth);\n        return this.index(depth) + (depth == this.depth && !this.textOffset ? 0 : 1);\n    }\n    /**\n    The (absolute) position at the start of the node at the given\n    level.\n    */\n    start(depth) {\n        depth = this.resolveDepth(depth);\n        return depth == 0 ? 0 : this.path[depth * 3 - 1] + 1;\n    }\n    /**\n    The (absolute) position at the end of the node at the given\n    level.\n    */\n    end(depth) {\n        depth = this.resolveDepth(depth);\n        return this.start(depth) + this.node(depth).content.size;\n    }\n    /**\n    The (absolute) position directly before the wrapping node at the\n    given level, or, when `depth` is `this.depth + 1`, the original\n    position.\n    */\n    before(depth) {\n        depth = this.resolveDepth(depth);\n        if (!depth)\n            throw new RangeError(\"There is no position before the top-level node\");\n        return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1];\n    }\n    /**\n    The (absolute) position directly after the wrapping node at the\n    given level, or the original position when `depth` is `this.depth + 1`.\n    */\n    after(depth) {\n        depth = this.resolveDepth(depth);\n        if (!depth)\n            throw new RangeError(\"There is no position after the top-level node\");\n        return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1] + this.path[depth * 3].nodeSize;\n    }\n    /**\n    When this position points into a text node, this returns the\n    distance between the position and the start of the text node.\n    Will be zero for positions that point between nodes.\n    */\n    get textOffset() { return this.pos - this.path[this.path.length - 1]; }\n    /**\n    Get the node directly after the position, if any. If the position\n    points into a text node, only the part of that node after the\n    position is returned.\n    */\n    get nodeAfter() {\n        let parent = this.parent, index = this.index(this.depth);\n        if (index == parent.childCount)\n            return null;\n        let dOff = this.pos - this.path[this.path.length - 1], child = parent.child(index);\n        return dOff ? parent.child(index).cut(dOff) : child;\n    }\n    /**\n    Get the node directly before the position, if any. If the\n    position points into a text node, only the part of that node\n    before the position is returned.\n    */\n    get nodeBefore() {\n        let index = this.index(this.depth);\n        let dOff = this.pos - this.path[this.path.length - 1];\n        if (dOff)\n            return this.parent.child(index).cut(0, dOff);\n        return index == 0 ? null : this.parent.child(index - 1);\n    }\n    /**\n    Get the position at the given index in the parent node at the\n    given depth (which defaults to `this.depth`).\n    */\n    posAtIndex(index, depth) {\n        depth = this.resolveDepth(depth);\n        let node = this.path[depth * 3], pos = depth == 0 ? 0 : this.path[depth * 3 - 1] + 1;\n        for (let i = 0; i < index; i++)\n            pos += node.child(i).nodeSize;\n        return pos;\n    }\n    /**\n    Get the marks at this position, factoring in the surrounding\n    marks' [`inclusive`](https://prosemirror.net/docs/ref/#model.MarkSpec.inclusive) property. If the\n    position is at the start of a non-empty node, the marks of the\n    node after it (if any) are returned.\n    */\n    marks() {\n        let parent = this.parent, index = this.index();\n        // In an empty parent, return the empty array\n        if (parent.content.size == 0)\n            return Mark.none;\n        // When inside a text node, just return the text node's marks\n        if (this.textOffset)\n            return parent.child(index).marks;\n        let main = parent.maybeChild(index - 1), other = parent.maybeChild(index);\n        // If the `after` flag is true of there is no node before, make\n        // the node after this position the main reference.\n        if (!main) {\n            let tmp = main;\n            main = other;\n            other = tmp;\n        }\n        // Use all marks in the main node, except those that have\n        // `inclusive` set to false and are not present in the other node.\n        let marks = main.marks;\n        for (var i = 0; i < marks.length; i++)\n            if (marks[i].type.spec.inclusive === false && (!other || !marks[i].isInSet(other.marks)))\n                marks = marks[i--].removeFromSet(marks);\n        return marks;\n    }\n    /**\n    Get the marks after the current position, if any, except those\n    that are non-inclusive and not present at position `$end`. This\n    is mostly useful for getting the set of marks to preserve after a\n    deletion. Will return `null` if this position is at the end of\n    its parent node or its parent node isn't a textblock (in which\n    case no marks should be preserved).\n    */\n    marksAcross($end) {\n        let after = this.parent.maybeChild(this.index());\n        if (!after || !after.isInline)\n            return null;\n        let marks = after.marks, next = $end.parent.maybeChild($end.index());\n        for (var i = 0; i < marks.length; i++)\n            if (marks[i].type.spec.inclusive === false && (!next || !marks[i].isInSet(next.marks)))\n                marks = marks[i--].removeFromSet(marks);\n        return marks;\n    }\n    /**\n    The depth up to which this position and the given (non-resolved)\n    position share the same parent nodes.\n    */\n    sharedDepth(pos) {\n        for (let depth = this.depth; depth > 0; depth--)\n            if (this.start(depth) <= pos && this.end(depth) >= pos)\n                return depth;\n        return 0;\n    }\n    /**\n    Returns a range based on the place where this position and the\n    given position diverge around block content. If both point into\n    the same textblock, for example, a range around that textblock\n    will be returned. If they point into different blocks, the range\n    around those blocks in their shared ancestor is returned. You can\n    pass in an optional predicate that will be called with a parent\n    node to see if a range into that parent is acceptable.\n    */\n    blockRange(other = this, pred) {\n        if (other.pos < this.pos)\n            return other.blockRange(this);\n        for (let d = this.depth - (this.parent.inlineContent || this.pos == other.pos ? 1 : 0); d >= 0; d--)\n            if (other.pos <= this.end(d) && (!pred || pred(this.node(d))))\n                return new NodeRange(this, other, d);\n        return null;\n    }\n    /**\n    Query whether the given position shares the same parent node.\n    */\n    sameParent(other) {\n        return this.pos - this.parentOffset == other.pos - other.parentOffset;\n    }\n    /**\n    Return the greater of this and the given position.\n    */\n    max(other) {\n        return other.pos > this.pos ? other : this;\n    }\n    /**\n    Return the smaller of this and the given position.\n    */\n    min(other) {\n        return other.pos < this.pos ? other : this;\n    }\n    /**\n    @internal\n    */\n    toString() {\n        let str = \"\";\n        for (let i = 1; i <= this.depth; i++)\n            str += (str ? \"/\" : \"\") + this.node(i).type.name + \"_\" + this.index(i - 1);\n        return str + \":\" + this.parentOffset;\n    }\n    /**\n    @internal\n    */\n    static resolve(doc, pos) {\n        if (!(pos >= 0 && pos <= doc.content.size))\n            throw new RangeError(\"Position \" + pos + \" out of range\");\n        let path = [];\n        let start = 0, parentOffset = pos;\n        for (let node = doc;;) {\n            let { index, offset } = node.content.findIndex(parentOffset);\n            let rem = parentOffset - offset;\n            path.push(node, index, start + offset);\n            if (!rem)\n                break;\n            node = node.child(index);\n            if (node.isText)\n                break;\n            parentOffset = rem - 1;\n            start += offset + 1;\n        }\n        return new ResolvedPos(pos, path, parentOffset);\n    }\n    /**\n    @internal\n    */\n    static resolveCached(doc, pos) {\n        for (let i = 0; i < resolveCache.length; i++) {\n            let cached = resolveCache[i];\n            if (cached.pos == pos && cached.doc == doc)\n                return cached;\n        }\n        let result = resolveCache[resolveCachePos] = ResolvedPos.resolve(doc, pos);\n        resolveCachePos = (resolveCachePos + 1) % resolveCacheSize;\n        return result;\n    }\n}\nlet resolveCache = [], resolveCachePos = 0, resolveCacheSize = 12;\n/**\nRepresents a flat range of content, i.e. one that starts and\nends in the same node.\n*/\nclass NodeRange {\n    /**\n    Construct a node range. `$from` and `$to` should point into the\n    same node until at least the given `depth`, since a node range\n    denotes an adjacent set of nodes in a single parent node.\n    */\n    constructor(\n    /**\n    A resolved position along the start of the content. May have a\n    `depth` greater than this object's `depth` property, since\n    these are the positions that were used to compute the range,\n    not re-resolved positions directly at its boundaries.\n    */\n    $from, \n    /**\n    A position along the end of the content. See\n    caveat for [`$from`](https://prosemirror.net/docs/ref/#model.NodeRange.$from).\n    */\n    $to, \n    /**\n    The depth of the node that this range points into.\n    */\n    depth) {\n        this.$from = $from;\n        this.$to = $to;\n        this.depth = depth;\n    }\n    /**\n    The position at the start of the range.\n    */\n    get start() { return this.$from.before(this.depth + 1); }\n    /**\n    The position at the end of the range.\n    */\n    get end() { return this.$to.after(this.depth + 1); }\n    /**\n    The parent node that the range points into.\n    */\n    get parent() { return this.$from.node(this.depth); }\n    /**\n    The start index of the range in the parent node.\n    */\n    get startIndex() { return this.$from.index(this.depth); }\n    /**\n    The end index of the range in the parent node.\n    */\n    get endIndex() { return this.$to.indexAfter(this.depth); }\n}\n\nconst emptyAttrs = Object.create(null);\n/**\nThis class represents a node in the tree that makes up a\nProseMirror document. So a document is an instance of `Node`, with\nchildren that are also instances of `Node`.\n\nNodes are persistent data structures. Instead of changing them, you\ncreate new ones with the content you want. Old ones keep pointing\nat the old document shape. This is made cheaper by sharing\nstructure between the old and new data as much as possible, which a\ntree shape like this (without back pointers) makes easy.\n\n**Do not** directly mutate the properties of a `Node` object. See\n[the guide](/docs/guide/#doc) for more information.\n*/\nclass Node {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The type of node that this is.\n    */\n    type, \n    /**\n    An object mapping attribute names to values. The kind of\n    attributes allowed and required are\n    [determined](https://prosemirror.net/docs/ref/#model.NodeSpec.attrs) by the node type.\n    */\n    attrs, \n    // A fragment holding the node's children.\n    content, \n    /**\n    The marks (things like whether it is emphasized or part of a\n    link) applied to this node.\n    */\n    marks = Mark.none) {\n        this.type = type;\n        this.attrs = attrs;\n        this.marks = marks;\n        this.content = content || Fragment.empty;\n    }\n    /**\n    The size of this node, as defined by the integer-based [indexing\n    scheme](/docs/guide/#doc.indexing). For text nodes, this is the\n    amount of characters. For other leaf nodes, it is one. For\n    non-leaf nodes, it is the size of the content plus two (the\n    start and end token).\n    */\n    get nodeSize() { return this.isLeaf ? 1 : 2 + this.content.size; }\n    /**\n    The number of children that the node has.\n    */\n    get childCount() { return this.content.childCount; }\n    /**\n    Get the child node at the given index. Raises an error when the\n    index is out of range.\n    */\n    child(index) { return this.content.child(index); }\n    /**\n    Get the child node at the given index, if it exists.\n    */\n    maybeChild(index) { return this.content.maybeChild(index); }\n    /**\n    Call `f` for every child node, passing the node, its offset\n    into this parent node, and its index.\n    */\n    forEach(f) { this.content.forEach(f); }\n    /**\n    Invoke a callback for all descendant nodes recursively between\n    the given two positions that are relative to start of this\n    node's content. The callback is invoked with the node, its\n    parent-relative position, its parent node, and its child index.\n    When the callback returns false for a given node, that node's\n    children will not be recursed over. The last parameter can be\n    used to specify a starting position to count from.\n    */\n    nodesBetween(from, to, f, startPos = 0) {\n        this.content.nodesBetween(from, to, f, startPos, this);\n    }\n    /**\n    Call the given callback for every descendant node. Doesn't\n    descend into a node when the callback returns `false`.\n    */\n    descendants(f) {\n        this.nodesBetween(0, this.content.size, f);\n    }\n    /**\n    Concatenates all the text nodes found in this fragment and its\n    children.\n    */\n    get textContent() {\n        return (this.isLeaf && this.type.spec.leafText)\n            ? this.type.spec.leafText(this)\n            : this.textBetween(0, this.content.size, \"\");\n    }\n    /**\n    Get all text between positions `from` and `to`. When\n    `blockSeparator` is given, it will be inserted to separate text\n    from different block nodes. If `leafText` is given, it'll be\n    inserted for every non-text leaf node encountered, otherwise\n    [`leafText`](https://prosemirror.net/docs/ref/#model.NodeSpec^leafText) will be used.\n    */\n    textBetween(from, to, blockSeparator, leafText) {\n        return this.content.textBetween(from, to, blockSeparator, leafText);\n    }\n    /**\n    Returns this node's first child, or `null` if there are no\n    children.\n    */\n    get firstChild() { return this.content.firstChild; }\n    /**\n    Returns this node's last child, or `null` if there are no\n    children.\n    */\n    get lastChild() { return this.content.lastChild; }\n    /**\n    Test whether two nodes represent the same piece of document.\n    */\n    eq(other) {\n        return this == other || (this.sameMarkup(other) && this.content.eq(other.content));\n    }\n    /**\n    Compare the markup (type, attributes, and marks) of this node to\n    those of another. Returns `true` if both have the same markup.\n    */\n    sameMarkup(other) {\n        return this.hasMarkup(other.type, other.attrs, other.marks);\n    }\n    /**\n    Check whether this node's markup correspond to the given type,\n    attributes, and marks.\n    */\n    hasMarkup(type, attrs, marks) {\n        return this.type == type &&\n            compareDeep(this.attrs, attrs || type.defaultAttrs || emptyAttrs) &&\n            Mark.sameSet(this.marks, marks || Mark.none);\n    }\n    /**\n    Create a new node with the same markup as this node, containing\n    the given content (or empty, if no content is given).\n    */\n    copy(content = null) {\n        if (content == this.content)\n            return this;\n        return new Node(this.type, this.attrs, content, this.marks);\n    }\n    /**\n    Create a copy of this node, with the given set of marks instead\n    of the node's own marks.\n    */\n    mark(marks) {\n        return marks == this.marks ? this : new Node(this.type, this.attrs, this.content, marks);\n    }\n    /**\n    Create a copy of this node with only the content between the\n    given positions. If `to` is not given, it defaults to the end of\n    the node.\n    */\n    cut(from, to = this.content.size) {\n        if (from == 0 && to == this.content.size)\n            return this;\n        return this.copy(this.content.cut(from, to));\n    }\n    /**\n    Cut out the part of the document between the given positions, and\n    return it as a `Slice` object.\n    */\n    slice(from, to = this.content.size, includeParents = false) {\n        if (from == to)\n            return Slice.empty;\n        let $from = this.resolve(from), $to = this.resolve(to);\n        let depth = includeParents ? 0 : $from.sharedDepth(to);\n        let start = $from.start(depth), node = $from.node(depth);\n        let content = node.content.cut($from.pos - start, $to.pos - start);\n        return new Slice(content, $from.depth - depth, $to.depth - depth);\n    }\n    /**\n    Replace the part of the document between the given positions with\n    the given slice. The slice must 'fit', meaning its open sides\n    must be able to connect to the surrounding content, and its\n    content nodes must be valid children for the node they are placed\n    into. If any of this is violated, an error of type\n    [`ReplaceError`](https://prosemirror.net/docs/ref/#model.ReplaceError) is thrown.\n    */\n    replace(from, to, slice) {\n        return replace(this.resolve(from), this.resolve(to), slice);\n    }\n    /**\n    Find the node directly after the given position.\n    */\n    nodeAt(pos) {\n        for (let node = this;;) {\n            let { index, offset } = node.content.findIndex(pos);\n            node = node.maybeChild(index);\n            if (!node)\n                return null;\n            if (offset == pos || node.isText)\n                return node;\n            pos -= offset + 1;\n        }\n    }\n    /**\n    Find the (direct) child node after the given offset, if any,\n    and return it along with its index and offset relative to this\n    node.\n    */\n    childAfter(pos) {\n        let { index, offset } = this.content.findIndex(pos);\n        return { node: this.content.maybeChild(index), index, offset };\n    }\n    /**\n    Find the (direct) child node before the given offset, if any,\n    and return it along with its index and offset relative to this\n    node.\n    */\n    childBefore(pos) {\n        if (pos == 0)\n            return { node: null, index: 0, offset: 0 };\n        let { index, offset } = this.content.findIndex(pos);\n        if (offset < pos)\n            return { node: this.content.child(index), index, offset };\n        let node = this.content.child(index - 1);\n        return { node, index: index - 1, offset: offset - node.nodeSize };\n    }\n    /**\n    Resolve the given position in the document, returning an\n    [object](https://prosemirror.net/docs/ref/#model.ResolvedPos) with information about its context.\n    */\n    resolve(pos) { return ResolvedPos.resolveCached(this, pos); }\n    /**\n    @internal\n    */\n    resolveNoCache(pos) { return ResolvedPos.resolve(this, pos); }\n    /**\n    Test whether a given mark or mark type occurs in this document\n    between the two given positions.\n    */\n    rangeHasMark(from, to, type) {\n        let found = false;\n        if (to > from)\n            this.nodesBetween(from, to, node => {\n                if (type.isInSet(node.marks))\n                    found = true;\n                return !found;\n            });\n        return found;\n    }\n    /**\n    True when this is a block (non-inline node)\n    */\n    get isBlock() { return this.type.isBlock; }\n    /**\n    True when this is a textblock node, a block node with inline\n    content.\n    */\n    get isTextblock() { return this.type.isTextblock; }\n    /**\n    True when this node allows inline content.\n    */\n    get inlineContent() { return this.type.inlineContent; }\n    /**\n    True when this is an inline node (a text node or a node that can\n    appear among text).\n    */\n    get isInline() { return this.type.isInline; }\n    /**\n    True when this is a text node.\n    */\n    get isText() { return this.type.isText; }\n    /**\n    True when this is a leaf node.\n    */\n    get isLeaf() { return this.type.isLeaf; }\n    /**\n    True when this is an atom, i.e. when it does not have directly\n    editable content. This is usually the same as `isLeaf`, but can\n    be configured with the [`atom` property](https://prosemirror.net/docs/ref/#model.NodeSpec.atom)\n    on a node's spec (typically used when the node is displayed as\n    an uneditable [node view](https://prosemirror.net/docs/ref/#view.NodeView)).\n    */\n    get isAtom() { return this.type.isAtom; }\n    /**\n    Return a string representation of this node for debugging\n    purposes.\n    */\n    toString() {\n        if (this.type.spec.toDebugString)\n            return this.type.spec.toDebugString(this);\n        let name = this.type.name;\n        if (this.content.size)\n            name += \"(\" + this.content.toStringInner() + \")\";\n        return wrapMarks(this.marks, name);\n    }\n    /**\n    Get the content match in this node at the given index.\n    */\n    contentMatchAt(index) {\n        let match = this.type.contentMatch.matchFragment(this.content, 0, index);\n        if (!match)\n            throw new Error(\"Called contentMatchAt on a node with invalid content\");\n        return match;\n    }\n    /**\n    Test whether replacing the range between `from` and `to` (by\n    child index) with the given replacement fragment (which defaults\n    to the empty fragment) would leave the node's content valid. You\n    can optionally pass `start` and `end` indices into the\n    replacement fragment.\n    */\n    canReplace(from, to, replacement = Fragment.empty, start = 0, end = replacement.childCount) {\n        let one = this.contentMatchAt(from).matchFragment(replacement, start, end);\n        let two = one && one.matchFragment(this.content, to);\n        if (!two || !two.validEnd)\n            return false;\n        for (let i = start; i < end; i++)\n            if (!this.type.allowsMarks(replacement.child(i).marks))\n                return false;\n        return true;\n    }\n    /**\n    Test whether replacing the range `from` to `to` (by index) with\n    a node of the given type would leave the node's content valid.\n    */\n    canReplaceWith(from, to, type, marks) {\n        if (marks && !this.type.allowsMarks(marks))\n            return false;\n        let start = this.contentMatchAt(from).matchType(type);\n        let end = start && start.matchFragment(this.content, to);\n        return end ? end.validEnd : false;\n    }\n    /**\n    Test whether the given node's content could be appended to this\n    node. If that node is empty, this will only return true if there\n    is at least one node type that can appear in both nodes (to avoid\n    merging completely incompatible nodes).\n    */\n    canAppend(other) {\n        if (other.content.size)\n            return this.canReplace(this.childCount, this.childCount, other.content);\n        else\n            return this.type.compatibleContent(other.type);\n    }\n    /**\n    Check whether this node and its descendants conform to the\n    schema, and raise error when they do not.\n    */\n    check() {\n        if (!this.type.validContent(this.content))\n            throw new RangeError(`Invalid content for node ${this.type.name}: ${this.content.toString().slice(0, 50)}`);\n        let copy = Mark.none;\n        for (let i = 0; i < this.marks.length; i++)\n            copy = this.marks[i].addToSet(copy);\n        if (!Mark.sameSet(copy, this.marks))\n            throw new RangeError(`Invalid collection of marks for node ${this.type.name}: ${this.marks.map(m => m.type.name)}`);\n        this.content.forEach(node => node.check());\n    }\n    /**\n    Return a JSON-serializeable representation of this node.\n    */\n    toJSON() {\n        let obj = { type: this.type.name };\n        for (let _ in this.attrs) {\n            obj.attrs = this.attrs;\n            break;\n        }\n        if (this.content.size)\n            obj.content = this.content.toJSON();\n        if (this.marks.length)\n            obj.marks = this.marks.map(n => n.toJSON());\n        return obj;\n    }\n    /**\n    Deserialize a node from its JSON representation.\n    */\n    static fromJSON(schema, json) {\n        if (!json)\n            throw new RangeError(\"Invalid input for Node.fromJSON\");\n        let marks = null;\n        if (json.marks) {\n            if (!Array.isArray(json.marks))\n                throw new RangeError(\"Invalid mark data for Node.fromJSON\");\n            marks = json.marks.map(schema.markFromJSON);\n        }\n        if (json.type == \"text\") {\n            if (typeof json.text != \"string\")\n                throw new RangeError(\"Invalid text node in JSON\");\n            return schema.text(json.text, marks);\n        }\n        let content = Fragment.fromJSON(schema, json.content);\n        return schema.nodeType(json.type).create(json.attrs, content, marks);\n    }\n}\nNode.prototype.text = undefined;\nclass TextNode extends Node {\n    /**\n    @internal\n    */\n    constructor(type, attrs, content, marks) {\n        super(type, attrs, null, marks);\n        if (!content)\n            throw new RangeError(\"Empty text nodes are not allowed\");\n        this.text = content;\n    }\n    toString() {\n        if (this.type.spec.toDebugString)\n            return this.type.spec.toDebugString(this);\n        return wrapMarks(this.marks, JSON.stringify(this.text));\n    }\n    get textContent() { return this.text; }\n    textBetween(from, to) { return this.text.slice(from, to); }\n    get nodeSize() { return this.text.length; }\n    mark(marks) {\n        return marks == this.marks ? this : new TextNode(this.type, this.attrs, this.text, marks);\n    }\n    withText(text) {\n        if (text == this.text)\n            return this;\n        return new TextNode(this.type, this.attrs, text, this.marks);\n    }\n    cut(from = 0, to = this.text.length) {\n        if (from == 0 && to == this.text.length)\n            return this;\n        return this.withText(this.text.slice(from, to));\n    }\n    eq(other) {\n        return this.sameMarkup(other) && this.text == other.text;\n    }\n    toJSON() {\n        let base = super.toJSON();\n        base.text = this.text;\n        return base;\n    }\n}\nfunction wrapMarks(marks, str) {\n    for (let i = marks.length - 1; i >= 0; i--)\n        str = marks[i].type.name + \"(\" + str + \")\";\n    return str;\n}\n\n/**\nInstances of this class represent a match state of a node type's\n[content expression](https://prosemirror.net/docs/ref/#model.NodeSpec.content), and can be used to\nfind out whether further content matches here, and whether a given\nposition is a valid end of the node.\n*/\nclass ContentMatch {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    True when this match state represents a valid end of the node.\n    */\n    validEnd) {\n        this.validEnd = validEnd;\n        /**\n        @internal\n        */\n        this.next = [];\n        /**\n        @internal\n        */\n        this.wrapCache = [];\n    }\n    /**\n    @internal\n    */\n    static parse(string, nodeTypes) {\n        let stream = new TokenStream(string, nodeTypes);\n        if (stream.next == null)\n            return ContentMatch.empty;\n        let expr = parseExpr(stream);\n        if (stream.next)\n            stream.err(\"Unexpected trailing text\");\n        let match = dfa(nfa(expr));\n        checkForDeadEnds(match, stream);\n        return match;\n    }\n    /**\n    Match a node type, returning a match after that node if\n    successful.\n    */\n    matchType(type) {\n        for (let i = 0; i < this.next.length; i++)\n            if (this.next[i].type == type)\n                return this.next[i].next;\n        return null;\n    }\n    /**\n    Try to match a fragment. Returns the resulting match when\n    successful.\n    */\n    matchFragment(frag, start = 0, end = frag.childCount) {\n        let cur = this;\n        for (let i = start; cur && i < end; i++)\n            cur = cur.matchType(frag.child(i).type);\n        return cur;\n    }\n    /**\n    @internal\n    */\n    get inlineContent() {\n        return this.next.length && this.next[0].type.isInline;\n    }\n    /**\n    Get the first matching node type at this match position that can\n    be generated.\n    */\n    get defaultType() {\n        for (let i = 0; i < this.next.length; i++) {\n            let { type } = this.next[i];\n            if (!(type.isText || type.hasRequiredAttrs()))\n                return type;\n        }\n        return null;\n    }\n    /**\n    @internal\n    */\n    compatible(other) {\n        for (let i = 0; i < this.next.length; i++)\n            for (let j = 0; j < other.next.length; j++)\n                if (this.next[i].type == other.next[j].type)\n                    return true;\n        return false;\n    }\n    /**\n    Try to match the given fragment, and if that fails, see if it can\n    be made to match by inserting nodes in front of it. When\n    successful, return a fragment of inserted nodes (which may be\n    empty if nothing had to be inserted). When `toEnd` is true, only\n    return a fragment if the resulting match goes to the end of the\n    content expression.\n    */\n    fillBefore(after, toEnd = false, startIndex = 0) {\n        let seen = [this];\n        function search(match, types) {\n            let finished = match.matchFragment(after, startIndex);\n            if (finished && (!toEnd || finished.validEnd))\n                return Fragment.from(types.map(tp => tp.createAndFill()));\n            for (let i = 0; i < match.next.length; i++) {\n                let { type, next } = match.next[i];\n                if (!(type.isText || type.hasRequiredAttrs()) && seen.indexOf(next) == -1) {\n                    seen.push(next);\n                    let found = search(next, types.concat(type));\n                    if (found)\n                        return found;\n                }\n            }\n            return null;\n        }\n        return search(this, []);\n    }\n    /**\n    Find a set of wrapping node types that would allow a node of the\n    given type to appear at this position. The result may be empty\n    (when it fits directly) and will be null when no such wrapping\n    exists.\n    */\n    findWrapping(target) {\n        for (let i = 0; i < this.wrapCache.length; i += 2)\n            if (this.wrapCache[i] == target)\n                return this.wrapCache[i + 1];\n        let computed = this.computeWrapping(target);\n        this.wrapCache.push(target, computed);\n        return computed;\n    }\n    /**\n    @internal\n    */\n    computeWrapping(target) {\n        let seen = Object.create(null), active = [{ match: this, type: null, via: null }];\n        while (active.length) {\n            let current = active.shift(), match = current.match;\n            if (match.matchType(target)) {\n                let result = [];\n                for (let obj = current; obj.type; obj = obj.via)\n                    result.push(obj.type);\n                return result.reverse();\n            }\n            for (let i = 0; i < match.next.length; i++) {\n                let { type, next } = match.next[i];\n                if (!type.isLeaf && !type.hasRequiredAttrs() && !(type.name in seen) && (!current.type || next.validEnd)) {\n                    active.push({ match: type.contentMatch, type, via: current });\n                    seen[type.name] = true;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n    The number of outgoing edges this node has in the finite\n    automaton that describes the content expression.\n    */\n    get edgeCount() {\n        return this.next.length;\n    }\n    /**\n    Get the _n_​th outgoing edge from this node in the finite\n    automaton that describes the content expression.\n    */\n    edge(n) {\n        if (n >= this.next.length)\n            throw new RangeError(`There's no ${n}th edge in this content match`);\n        return this.next[n];\n    }\n    /**\n    @internal\n    */\n    toString() {\n        let seen = [];\n        function scan(m) {\n            seen.push(m);\n            for (let i = 0; i < m.next.length; i++)\n                if (seen.indexOf(m.next[i].next) == -1)\n                    scan(m.next[i].next);\n        }\n        scan(this);\n        return seen.map((m, i) => {\n            let out = i + (m.validEnd ? \"*\" : \" \") + \" \";\n            for (let i = 0; i < m.next.length; i++)\n                out += (i ? \", \" : \"\") + m.next[i].type.name + \"->\" + seen.indexOf(m.next[i].next);\n            return out;\n        }).join(\"\\n\");\n    }\n}\n/**\n@internal\n*/\nContentMatch.empty = new ContentMatch(true);\nclass TokenStream {\n    constructor(string, nodeTypes) {\n        this.string = string;\n        this.nodeTypes = nodeTypes;\n        this.inline = null;\n        this.pos = 0;\n        this.tokens = string.split(/\\s*(?=\\b|\\W|$)/);\n        if (this.tokens[this.tokens.length - 1] == \"\")\n            this.tokens.pop();\n        if (this.tokens[0] == \"\")\n            this.tokens.shift();\n    }\n    get next() { return this.tokens[this.pos]; }\n    eat(tok) { return this.next == tok && (this.pos++ || true); }\n    err(str) { throw new SyntaxError(str + \" (in content expression '\" + this.string + \"')\"); }\n}\nfunction parseExpr(stream) {\n    let exprs = [];\n    do {\n        exprs.push(parseExprSeq(stream));\n    } while (stream.eat(\"|\"));\n    return exprs.length == 1 ? exprs[0] : { type: \"choice\", exprs };\n}\nfunction parseExprSeq(stream) {\n    let exprs = [];\n    do {\n        exprs.push(parseExprSubscript(stream));\n    } while (stream.next && stream.next != \")\" && stream.next != \"|\");\n    return exprs.length == 1 ? exprs[0] : { type: \"seq\", exprs };\n}\nfunction parseExprSubscript(stream) {\n    let expr = parseExprAtom(stream);\n    for (;;) {\n        if (stream.eat(\"+\"))\n            expr = { type: \"plus\", expr };\n        else if (stream.eat(\"*\"))\n            expr = { type: \"star\", expr };\n        else if (stream.eat(\"?\"))\n            expr = { type: \"opt\", expr };\n        else if (stream.eat(\"{\"))\n            expr = parseExprRange(stream, expr);\n        else\n            break;\n    }\n    return expr;\n}\nfunction parseNum(stream) {\n    if (/\\D/.test(stream.next))\n        stream.err(\"Expected number, got '\" + stream.next + \"'\");\n    let result = Number(stream.next);\n    stream.pos++;\n    return result;\n}\nfunction parseExprRange(stream, expr) {\n    let min = parseNum(stream), max = min;\n    if (stream.eat(\",\")) {\n        if (stream.next != \"}\")\n            max = parseNum(stream);\n        else\n            max = -1;\n    }\n    if (!stream.eat(\"}\"))\n        stream.err(\"Unclosed braced range\");\n    return { type: \"range\", min, max, expr };\n}\nfunction resolveName(stream, name) {\n    let types = stream.nodeTypes, type = types[name];\n    if (type)\n        return [type];\n    let result = [];\n    for (let typeName in types) {\n        let type = types[typeName];\n        if (type.groups.indexOf(name) > -1)\n            result.push(type);\n    }\n    if (result.length == 0)\n        stream.err(\"No node type or group '\" + name + \"' found\");\n    return result;\n}\nfunction parseExprAtom(stream) {\n    if (stream.eat(\"(\")) {\n        let expr = parseExpr(stream);\n        if (!stream.eat(\")\"))\n            stream.err(\"Missing closing paren\");\n        return expr;\n    }\n    else if (!/\\W/.test(stream.next)) {\n        let exprs = resolveName(stream, stream.next).map(type => {\n            if (stream.inline == null)\n                stream.inline = type.isInline;\n            else if (stream.inline != type.isInline)\n                stream.err(\"Mixing inline and block content\");\n            return { type: \"name\", value: type };\n        });\n        stream.pos++;\n        return exprs.length == 1 ? exprs[0] : { type: \"choice\", exprs };\n    }\n    else {\n        stream.err(\"Unexpected token '\" + stream.next + \"'\");\n    }\n}\n/**\nConstruct an NFA from an expression as returned by the parser. The\nNFA is represented as an array of states, which are themselves\narrays of edges, which are `{term, to}` objects. The first state is\nthe entry state and the last node is the success state.\n\nNote that unlike typical NFAs, the edge ordering in this one is\nsignificant, in that it is used to contruct filler content when\nnecessary.\n*/\nfunction nfa(expr) {\n    let nfa = [[]];\n    connect(compile(expr, 0), node());\n    return nfa;\n    function node() { return nfa.push([]) - 1; }\n    function edge(from, to, term) {\n        let edge = { term, to };\n        nfa[from].push(edge);\n        return edge;\n    }\n    function connect(edges, to) {\n        edges.forEach(edge => edge.to = to);\n    }\n    function compile(expr, from) {\n        if (expr.type == \"choice\") {\n            return expr.exprs.reduce((out, expr) => out.concat(compile(expr, from)), []);\n        }\n        else if (expr.type == \"seq\") {\n            for (let i = 0;; i++) {\n                let next = compile(expr.exprs[i], from);\n                if (i == expr.exprs.length - 1)\n                    return next;\n                connect(next, from = node());\n            }\n        }\n        else if (expr.type == \"star\") {\n            let loop = node();\n            edge(from, loop);\n            connect(compile(expr.expr, loop), loop);\n            return [edge(loop)];\n        }\n        else if (expr.type == \"plus\") {\n            let loop = node();\n            connect(compile(expr.expr, from), loop);\n            connect(compile(expr.expr, loop), loop);\n            return [edge(loop)];\n        }\n        else if (expr.type == \"opt\") {\n            return [edge(from)].concat(compile(expr.expr, from));\n        }\n        else if (expr.type == \"range\") {\n            let cur = from;\n            for (let i = 0; i < expr.min; i++) {\n                let next = node();\n                connect(compile(expr.expr, cur), next);\n                cur = next;\n            }\n            if (expr.max == -1) {\n                connect(compile(expr.expr, cur), cur);\n            }\n            else {\n                for (let i = expr.min; i < expr.max; i++) {\n                    let next = node();\n                    edge(cur, next);\n                    connect(compile(expr.expr, cur), next);\n                    cur = next;\n                }\n            }\n            return [edge(cur)];\n        }\n        else if (expr.type == \"name\") {\n            return [edge(from, undefined, expr.value)];\n        }\n        else {\n            throw new Error(\"Unknown expr type\");\n        }\n    }\n}\nfunction cmp(a, b) { return b - a; }\n// Get the set of nodes reachable by null edges from `node`. Omit\n// nodes with only a single null-out-edge, since they may lead to\n// needless duplicated nodes.\nfunction nullFrom(nfa, node) {\n    let result = [];\n    scan(node);\n    return result.sort(cmp);\n    function scan(node) {\n        let edges = nfa[node];\n        if (edges.length == 1 && !edges[0].term)\n            return scan(edges[0].to);\n        result.push(node);\n        for (let i = 0; i < edges.length; i++) {\n            let { term, to } = edges[i];\n            if (!term && result.indexOf(to) == -1)\n                scan(to);\n        }\n    }\n}\n// Compiles an NFA as produced by `nfa` into a DFA, modeled as a set\n// of state objects (`ContentMatch` instances) with transitions\n// between them.\nfunction dfa(nfa) {\n    let labeled = Object.create(null);\n    return explore(nullFrom(nfa, 0));\n    function explore(states) {\n        let out = [];\n        states.forEach(node => {\n            nfa[node].forEach(({ term, to }) => {\n                if (!term)\n                    return;\n                let set;\n                for (let i = 0; i < out.length; i++)\n                    if (out[i][0] == term)\n                        set = out[i][1];\n                nullFrom(nfa, to).forEach(node => {\n                    if (!set)\n                        out.push([term, set = []]);\n                    if (set.indexOf(node) == -1)\n                        set.push(node);\n                });\n            });\n        });\n        let state = labeled[states.join(\",\")] = new ContentMatch(states.indexOf(nfa.length - 1) > -1);\n        for (let i = 0; i < out.length; i++) {\n            let states = out[i][1].sort(cmp);\n            state.next.push({ type: out[i][0], next: labeled[states.join(\",\")] || explore(states) });\n        }\n        return state;\n    }\n}\nfunction checkForDeadEnds(match, stream) {\n    for (let i = 0, work = [match]; i < work.length; i++) {\n        let state = work[i], dead = !state.validEnd, nodes = [];\n        for (let j = 0; j < state.next.length; j++) {\n            let { type, next } = state.next[j];\n            nodes.push(type.name);\n            if (dead && !(type.isText || type.hasRequiredAttrs()))\n                dead = false;\n            if (work.indexOf(next) == -1)\n                work.push(next);\n        }\n        if (dead)\n            stream.err(\"Only non-generatable nodes (\" + nodes.join(\", \") + \") in a required position (see https://prosemirror.net/docs/guide/#generatable)\");\n    }\n}\n\n// For node types where all attrs have a default value (or which don't\n// have any attributes), build up a single reusable default attribute\n// object, and use it for all nodes that don't specify specific\n// attributes.\nfunction defaultAttrs(attrs) {\n    let defaults = Object.create(null);\n    for (let attrName in attrs) {\n        let attr = attrs[attrName];\n        if (!attr.hasDefault)\n            return null;\n        defaults[attrName] = attr.default;\n    }\n    return defaults;\n}\nfunction computeAttrs(attrs, value) {\n    let built = Object.create(null);\n    for (let name in attrs) {\n        let given = value && value[name];\n        if (given === undefined) {\n            let attr = attrs[name];\n            if (attr.hasDefault)\n                given = attr.default;\n            else\n                throw new RangeError(\"No value supplied for attribute \" + name);\n        }\n        built[name] = given;\n    }\n    return built;\n}\nfunction initAttrs(attrs) {\n    let result = Object.create(null);\n    if (attrs)\n        for (let name in attrs)\n            result[name] = new Attribute(attrs[name]);\n    return result;\n}\n/**\nNode types are objects allocated once per `Schema` and used to\n[tag](https://prosemirror.net/docs/ref/#model.Node.type) `Node` instances. They contain information\nabout the node type, such as its name and what kind of node it\nrepresents.\n*/\nclass NodeType {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The name the node type has in this schema.\n    */\n    name, \n    /**\n    A link back to the `Schema` the node type belongs to.\n    */\n    schema, \n    /**\n    The spec that this type is based on\n    */\n    spec) {\n        this.name = name;\n        this.schema = schema;\n        this.spec = spec;\n        /**\n        The set of marks allowed in this node. `null` means all marks\n        are allowed.\n        */\n        this.markSet = null;\n        this.groups = spec.group ? spec.group.split(\" \") : [];\n        this.attrs = initAttrs(spec.attrs);\n        this.defaultAttrs = defaultAttrs(this.attrs);\n        this.contentMatch = null;\n        this.inlineContent = null;\n        this.isBlock = !(spec.inline || name == \"text\");\n        this.isText = name == \"text\";\n    }\n    /**\n    True if this is an inline type.\n    */\n    get isInline() { return !this.isBlock; }\n    /**\n    True if this is a textblock type, a block that contains inline\n    content.\n    */\n    get isTextblock() { return this.isBlock && this.inlineContent; }\n    /**\n    True for node types that allow no content.\n    */\n    get isLeaf() { return this.contentMatch == ContentMatch.empty; }\n    /**\n    True when this node is an atom, i.e. when it does not have\n    directly editable content.\n    */\n    get isAtom() { return this.isLeaf || !!this.spec.atom; }\n    /**\n    The node type's [whitespace](https://prosemirror.net/docs/ref/#model.NodeSpec.whitespace) option.\n    */\n    get whitespace() {\n        return this.spec.whitespace || (this.spec.code ? \"pre\" : \"normal\");\n    }\n    /**\n    Tells you whether this node type has any required attributes.\n    */\n    hasRequiredAttrs() {\n        for (let n in this.attrs)\n            if (this.attrs[n].isRequired)\n                return true;\n        return false;\n    }\n    /**\n    Indicates whether this node allows some of the same content as\n    the given node type.\n    */\n    compatibleContent(other) {\n        return this == other || this.contentMatch.compatible(other.contentMatch);\n    }\n    /**\n    @internal\n    */\n    computeAttrs(attrs) {\n        if (!attrs && this.defaultAttrs)\n            return this.defaultAttrs;\n        else\n            return computeAttrs(this.attrs, attrs);\n    }\n    /**\n    Create a `Node` of this type. The given attributes are\n    checked and defaulted (you can pass `null` to use the type's\n    defaults entirely, if no required attributes exist). `content`\n    may be a `Fragment`, a node, an array of nodes, or\n    `null`. Similarly `marks` may be `null` to default to the empty\n    set of marks.\n    */\n    create(attrs = null, content, marks) {\n        if (this.isText)\n            throw new Error(\"NodeType.create can't construct text nodes\");\n        return new Node(this, this.computeAttrs(attrs), Fragment.from(content), Mark.setFrom(marks));\n    }\n    /**\n    Like [`create`](https://prosemirror.net/docs/ref/#model.NodeType.create), but check the given content\n    against the node type's content restrictions, and throw an error\n    if it doesn't match.\n    */\n    createChecked(attrs = null, content, marks) {\n        content = Fragment.from(content);\n        if (!this.validContent(content))\n            throw new RangeError(\"Invalid content for node \" + this.name);\n        return new Node(this, this.computeAttrs(attrs), content, Mark.setFrom(marks));\n    }\n    /**\n    Like [`create`](https://prosemirror.net/docs/ref/#model.NodeType.create), but see if it is\n    necessary to add nodes to the start or end of the given fragment\n    to make it fit the node. If no fitting wrapping can be found,\n    return null. Note that, due to the fact that required nodes can\n    always be created, this will always succeed if you pass null or\n    `Fragment.empty` as content.\n    */\n    createAndFill(attrs = null, content, marks) {\n        attrs = this.computeAttrs(attrs);\n        content = Fragment.from(content);\n        if (content.size) {\n            let before = this.contentMatch.fillBefore(content);\n            if (!before)\n                return null;\n            content = before.append(content);\n        }\n        let matched = this.contentMatch.matchFragment(content);\n        let after = matched && matched.fillBefore(Fragment.empty, true);\n        if (!after)\n            return null;\n        return new Node(this, attrs, content.append(after), Mark.setFrom(marks));\n    }\n    /**\n    Returns true if the given fragment is valid content for this node\n    type with the given attributes.\n    */\n    validContent(content) {\n        let result = this.contentMatch.matchFragment(content);\n        if (!result || !result.validEnd)\n            return false;\n        for (let i = 0; i < content.childCount; i++)\n            if (!this.allowsMarks(content.child(i).marks))\n                return false;\n        return true;\n    }\n    /**\n    Check whether the given mark type is allowed in this node.\n    */\n    allowsMarkType(markType) {\n        return this.markSet == null || this.markSet.indexOf(markType) > -1;\n    }\n    /**\n    Test whether the given set of marks are allowed in this node.\n    */\n    allowsMarks(marks) {\n        if (this.markSet == null)\n            return true;\n        for (let i = 0; i < marks.length; i++)\n            if (!this.allowsMarkType(marks[i].type))\n                return false;\n        return true;\n    }\n    /**\n    Removes the marks that are not allowed in this node from the given set.\n    */\n    allowedMarks(marks) {\n        if (this.markSet == null)\n            return marks;\n        let copy;\n        for (let i = 0; i < marks.length; i++) {\n            if (!this.allowsMarkType(marks[i].type)) {\n                if (!copy)\n                    copy = marks.slice(0, i);\n            }\n            else if (copy) {\n                copy.push(marks[i]);\n            }\n        }\n        return !copy ? marks : copy.length ? copy : Mark.none;\n    }\n    /**\n    @internal\n    */\n    static compile(nodes, schema) {\n        let result = Object.create(null);\n        nodes.forEach((name, spec) => result[name] = new NodeType(name, schema, spec));\n        let topType = schema.spec.topNode || \"doc\";\n        if (!result[topType])\n            throw new RangeError(\"Schema is missing its top node type ('\" + topType + \"')\");\n        if (!result.text)\n            throw new RangeError(\"Every schema needs a 'text' type\");\n        for (let _ in result.text.attrs)\n            throw new RangeError(\"The text node type should not have attributes\");\n        return result;\n    }\n}\n// Attribute descriptors\nclass Attribute {\n    constructor(options) {\n        this.hasDefault = Object.prototype.hasOwnProperty.call(options, \"default\");\n        this.default = options.default;\n    }\n    get isRequired() {\n        return !this.hasDefault;\n    }\n}\n// Marks\n/**\nLike nodes, marks (which are associated with nodes to signify\nthings like emphasis or being part of a link) are\n[tagged](https://prosemirror.net/docs/ref/#model.Mark.type) with type objects, which are\ninstantiated once per `Schema`.\n*/\nclass MarkType {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The name of the mark type.\n    */\n    name, \n    /**\n    @internal\n    */\n    rank, \n    /**\n    The schema that this mark type instance is part of.\n    */\n    schema, \n    /**\n    The spec on which the type is based.\n    */\n    spec) {\n        this.name = name;\n        this.rank = rank;\n        this.schema = schema;\n        this.spec = spec;\n        this.attrs = initAttrs(spec.attrs);\n        this.excluded = null;\n        let defaults = defaultAttrs(this.attrs);\n        this.instance = defaults ? new Mark(this, defaults) : null;\n    }\n    /**\n    Create a mark of this type. `attrs` may be `null` or an object\n    containing only some of the mark's attributes. The others, if\n    they have defaults, will be added.\n    */\n    create(attrs = null) {\n        if (!attrs && this.instance)\n            return this.instance;\n        return new Mark(this, computeAttrs(this.attrs, attrs));\n    }\n    /**\n    @internal\n    */\n    static compile(marks, schema) {\n        let result = Object.create(null), rank = 0;\n        marks.forEach((name, spec) => result[name] = new MarkType(name, rank++, schema, spec));\n        return result;\n    }\n    /**\n    When there is a mark of this type in the given set, a new set\n    without it is returned. Otherwise, the input set is returned.\n    */\n    removeFromSet(set) {\n        for (var i = 0; i < set.length; i++)\n            if (set[i].type == this) {\n                set = set.slice(0, i).concat(set.slice(i + 1));\n                i--;\n            }\n        return set;\n    }\n    /**\n    Tests whether there is a mark of this type in the given set.\n    */\n    isInSet(set) {\n        for (let i = 0; i < set.length; i++)\n            if (set[i].type == this)\n                return set[i];\n    }\n    /**\n    Queries whether a given mark type is\n    [excluded](https://prosemirror.net/docs/ref/#model.MarkSpec.excludes) by this one.\n    */\n    excludes(other) {\n        return this.excluded.indexOf(other) > -1;\n    }\n}\n/**\nA document schema. Holds [node](https://prosemirror.net/docs/ref/#model.NodeType) and [mark\ntype](https://prosemirror.net/docs/ref/#model.MarkType) objects for the nodes and marks that may\noccur in conforming documents, and provides functionality for\ncreating and deserializing such documents.\n\nWhen given, the type parameters provide the names of the nodes and\nmarks in this schema.\n*/\nclass Schema {\n    /**\n    Construct a schema from a schema [specification](https://prosemirror.net/docs/ref/#model.SchemaSpec).\n    */\n    constructor(spec) {\n        /**\n        An object for storing whatever values modules may want to\n        compute and cache per schema. (If you want to store something\n        in it, try to use property names unlikely to clash.)\n        */\n        this.cached = Object.create(null);\n        this.spec = {\n            nodes: OrderedMap.from(spec.nodes),\n            marks: OrderedMap.from(spec.marks || {}),\n            topNode: spec.topNode\n        };\n        this.nodes = NodeType.compile(this.spec.nodes, this);\n        this.marks = MarkType.compile(this.spec.marks, this);\n        let contentExprCache = Object.create(null);\n        for (let prop in this.nodes) {\n            if (prop in this.marks)\n                throw new RangeError(prop + \" can not be both a node and a mark\");\n            let type = this.nodes[prop], contentExpr = type.spec.content || \"\", markExpr = type.spec.marks;\n            type.contentMatch = contentExprCache[contentExpr] ||\n                (contentExprCache[contentExpr] = ContentMatch.parse(contentExpr, this.nodes));\n            type.inlineContent = type.contentMatch.inlineContent;\n            type.markSet = markExpr == \"_\" ? null :\n                markExpr ? gatherMarks(this, markExpr.split(\" \")) :\n                    markExpr == \"\" || !type.inlineContent ? [] : null;\n        }\n        for (let prop in this.marks) {\n            let type = this.marks[prop], excl = type.spec.excludes;\n            type.excluded = excl == null ? [type] : excl == \"\" ? [] : gatherMarks(this, excl.split(\" \"));\n        }\n        this.nodeFromJSON = this.nodeFromJSON.bind(this);\n        this.markFromJSON = this.markFromJSON.bind(this);\n        this.topNodeType = this.nodes[this.spec.topNode || \"doc\"];\n        this.cached.wrappings = Object.create(null);\n    }\n    /**\n    Create a node in this schema. The `type` may be a string or a\n    `NodeType` instance. Attributes will be extended with defaults,\n    `content` may be a `Fragment`, `null`, a `Node`, or an array of\n    nodes.\n    */\n    node(type, attrs = null, content, marks) {\n        if (typeof type == \"string\")\n            type = this.nodeType(type);\n        else if (!(type instanceof NodeType))\n            throw new RangeError(\"Invalid node type: \" + type);\n        else if (type.schema != this)\n            throw new RangeError(\"Node type from different schema used (\" + type.name + \")\");\n        return type.createChecked(attrs, content, marks);\n    }\n    /**\n    Create a text node in the schema. Empty text nodes are not\n    allowed.\n    */\n    text(text, marks) {\n        let type = this.nodes.text;\n        return new TextNode(type, type.defaultAttrs, text, Mark.setFrom(marks));\n    }\n    /**\n    Create a mark with the given type and attributes.\n    */\n    mark(type, attrs) {\n        if (typeof type == \"string\")\n            type = this.marks[type];\n        return type.create(attrs);\n    }\n    /**\n    Deserialize a node from its JSON representation. This method is\n    bound.\n    */\n    nodeFromJSON(json) {\n        return Node.fromJSON(this, json);\n    }\n    /**\n    Deserialize a mark from its JSON representation. This method is\n    bound.\n    */\n    markFromJSON(json) {\n        return Mark.fromJSON(this, json);\n    }\n    /**\n    @internal\n    */\n    nodeType(name) {\n        let found = this.nodes[name];\n        if (!found)\n            throw new RangeError(\"Unknown node type: \" + name);\n        return found;\n    }\n}\nfunction gatherMarks(schema, marks) {\n    let found = [];\n    for (let i = 0; i < marks.length; i++) {\n        let name = marks[i], mark = schema.marks[name], ok = mark;\n        if (mark) {\n            found.push(mark);\n        }\n        else {\n            for (let prop in schema.marks) {\n                let mark = schema.marks[prop];\n                if (name == \"_\" || (mark.spec.group && mark.spec.group.split(\" \").indexOf(name) > -1))\n                    found.push(ok = mark);\n            }\n        }\n        if (!ok)\n            throw new SyntaxError(\"Unknown mark type: '\" + marks[i] + \"'\");\n    }\n    return found;\n}\n\n/**\nA DOM parser represents a strategy for parsing DOM content into a\nProseMirror document conforming to a given schema. Its behavior is\ndefined by an array of [rules](https://prosemirror.net/docs/ref/#model.ParseRule).\n*/\nclass DOMParser {\n    /**\n    Create a parser that targets the given schema, using the given\n    parsing rules.\n    */\n    constructor(\n    /**\n    The schema into which the parser parses.\n    */\n    schema, \n    /**\n    The set of [parse rules](https://prosemirror.net/docs/ref/#model.ParseRule) that the parser\n    uses, in order of precedence.\n    */\n    rules) {\n        this.schema = schema;\n        this.rules = rules;\n        /**\n        @internal\n        */\n        this.tags = [];\n        /**\n        @internal\n        */\n        this.styles = [];\n        rules.forEach(rule => {\n            if (rule.tag)\n                this.tags.push(rule);\n            else if (rule.style)\n                this.styles.push(rule);\n        });\n        // Only normalize list elements when lists in the schema can't directly contain themselves\n        this.normalizeLists = !this.tags.some(r => {\n            if (!/^(ul|ol)\\b/.test(r.tag) || !r.node)\n                return false;\n            let node = schema.nodes[r.node];\n            return node.contentMatch.matchType(node);\n        });\n    }\n    /**\n    Parse a document from the content of a DOM node.\n    */\n    parse(dom, options = {}) {\n        let context = new ParseContext(this, options, false);\n        context.addAll(dom, options.from, options.to);\n        return context.finish();\n    }\n    /**\n    Parses the content of the given DOM node, like\n    [`parse`](https://prosemirror.net/docs/ref/#model.DOMParser.parse), and takes the same set of\n    options. But unlike that method, which produces a whole node,\n    this one returns a slice that is open at the sides, meaning that\n    the schema constraints aren't applied to the start of nodes to\n    the left of the input and the end of nodes at the end.\n    */\n    parseSlice(dom, options = {}) {\n        let context = new ParseContext(this, options, true);\n        context.addAll(dom, options.from, options.to);\n        return Slice.maxOpen(context.finish());\n    }\n    /**\n    @internal\n    */\n    matchTag(dom, context, after) {\n        for (let i = after ? this.tags.indexOf(after) + 1 : 0; i < this.tags.length; i++) {\n            let rule = this.tags[i];\n            if (matches(dom, rule.tag) &&\n                (rule.namespace === undefined || dom.namespaceURI == rule.namespace) &&\n                (!rule.context || context.matchesContext(rule.context))) {\n                if (rule.getAttrs) {\n                    let result = rule.getAttrs(dom);\n                    if (result === false)\n                        continue;\n                    rule.attrs = result || undefined;\n                }\n                return rule;\n            }\n        }\n    }\n    /**\n    @internal\n    */\n    matchStyle(prop, value, context, after) {\n        for (let i = after ? this.styles.indexOf(after) + 1 : 0; i < this.styles.length; i++) {\n            let rule = this.styles[i], style = rule.style;\n            if (style.indexOf(prop) != 0 ||\n                rule.context && !context.matchesContext(rule.context) ||\n                // Test that the style string either precisely matches the prop,\n                // or has an '=' sign after the prop, followed by the given\n                // value.\n                style.length > prop.length &&\n                    (style.charCodeAt(prop.length) != 61 || style.slice(prop.length + 1) != value))\n                continue;\n            if (rule.getAttrs) {\n                let result = rule.getAttrs(value);\n                if (result === false)\n                    continue;\n                rule.attrs = result || undefined;\n            }\n            return rule;\n        }\n    }\n    /**\n    @internal\n    */\n    static schemaRules(schema) {\n        let result = [];\n        function insert(rule) {\n            let priority = rule.priority == null ? 50 : rule.priority, i = 0;\n            for (; i < result.length; i++) {\n                let next = result[i], nextPriority = next.priority == null ? 50 : next.priority;\n                if (nextPriority < priority)\n                    break;\n            }\n            result.splice(i, 0, rule);\n        }\n        for (let name in schema.marks) {\n            let rules = schema.marks[name].spec.parseDOM;\n            if (rules)\n                rules.forEach(rule => {\n                    insert(rule = copy(rule));\n                    rule.mark = name;\n                });\n        }\n        for (let name in schema.nodes) {\n            let rules = schema.nodes[name].spec.parseDOM;\n            if (rules)\n                rules.forEach(rule => {\n                    insert(rule = copy(rule));\n                    rule.node = name;\n                });\n        }\n        return result;\n    }\n    /**\n    Construct a DOM parser using the parsing rules listed in a\n    schema's [node specs](https://prosemirror.net/docs/ref/#model.NodeSpec.parseDOM), reordered by\n    [priority](https://prosemirror.net/docs/ref/#model.ParseRule.priority).\n    */\n    static fromSchema(schema) {\n        return schema.cached.domParser ||\n            (schema.cached.domParser = new DOMParser(schema, DOMParser.schemaRules(schema)));\n    }\n}\nconst blockTags = {\n    address: true, article: true, aside: true, blockquote: true, canvas: true,\n    dd: true, div: true, dl: true, fieldset: true, figcaption: true, figure: true,\n    footer: true, form: true, h1: true, h2: true, h3: true, h4: true, h5: true,\n    h6: true, header: true, hgroup: true, hr: true, li: true, noscript: true, ol: true,\n    output: true, p: true, pre: true, section: true, table: true, tfoot: true, ul: true\n};\nconst ignoreTags = {\n    head: true, noscript: true, object: true, script: true, style: true, title: true\n};\nconst listTags = { ol: true, ul: true };\n// Using a bitfield for node context options\nconst OPT_PRESERVE_WS = 1, OPT_PRESERVE_WS_FULL = 2, OPT_OPEN_LEFT = 4;\nfunction wsOptionsFor(type, preserveWhitespace, base) {\n    if (preserveWhitespace != null)\n        return (preserveWhitespace ? OPT_PRESERVE_WS : 0) |\n            (preserveWhitespace === \"full\" ? OPT_PRESERVE_WS_FULL : 0);\n    return type && type.whitespace == \"pre\" ? OPT_PRESERVE_WS | OPT_PRESERVE_WS_FULL : base & ~OPT_OPEN_LEFT;\n}\nclass NodeContext {\n    constructor(type, attrs, \n    // Marks applied to this node itself\n    marks, \n    // Marks that can't apply here, but will be used in children if possible\n    pendingMarks, solid, match, options) {\n        this.type = type;\n        this.attrs = attrs;\n        this.marks = marks;\n        this.pendingMarks = pendingMarks;\n        this.solid = solid;\n        this.options = options;\n        this.content = [];\n        // Marks applied to the node's children\n        this.activeMarks = Mark.none;\n        // Nested Marks with same type\n        this.stashMarks = [];\n        this.match = match || (options & OPT_OPEN_LEFT ? null : type.contentMatch);\n    }\n    findWrapping(node) {\n        if (!this.match) {\n            if (!this.type)\n                return [];\n            let fill = this.type.contentMatch.fillBefore(Fragment.from(node));\n            if (fill) {\n                this.match = this.type.contentMatch.matchFragment(fill);\n            }\n            else {\n                let start = this.type.contentMatch, wrap;\n                if (wrap = start.findWrapping(node.type)) {\n                    this.match = start;\n                    return wrap;\n                }\n                else {\n                    return null;\n                }\n            }\n        }\n        return this.match.findWrapping(node.type);\n    }\n    finish(openEnd) {\n        if (!(this.options & OPT_PRESERVE_WS)) { // Strip trailing whitespace\n            let last = this.content[this.content.length - 1], m;\n            if (last && last.isText && (m = /[ \\t\\r\\n\\u000c]+$/.exec(last.text))) {\n                let text = last;\n                if (last.text.length == m[0].length)\n                    this.content.pop();\n                else\n                    this.content[this.content.length - 1] = text.withText(text.text.slice(0, text.text.length - m[0].length));\n            }\n        }\n        let content = Fragment.from(this.content);\n        if (!openEnd && this.match)\n            content = content.append(this.match.fillBefore(Fragment.empty, true));\n        return this.type ? this.type.create(this.attrs, content, this.marks) : content;\n    }\n    popFromStashMark(mark) {\n        for (let i = this.stashMarks.length - 1; i >= 0; i--)\n            if (mark.eq(this.stashMarks[i]))\n                return this.stashMarks.splice(i, 1)[0];\n    }\n    applyPending(nextType) {\n        for (let i = 0, pending = this.pendingMarks; i < pending.length; i++) {\n            let mark = pending[i];\n            if ((this.type ? this.type.allowsMarkType(mark.type) : markMayApply(mark.type, nextType)) &&\n                !mark.isInSet(this.activeMarks)) {\n                this.activeMarks = mark.addToSet(this.activeMarks);\n                this.pendingMarks = mark.removeFromSet(this.pendingMarks);\n            }\n        }\n    }\n    inlineContext(node) {\n        if (this.type)\n            return this.type.inlineContent;\n        if (this.content.length)\n            return this.content[0].isInline;\n        return node.parentNode && !blockTags.hasOwnProperty(node.parentNode.nodeName.toLowerCase());\n    }\n}\nclass ParseContext {\n    constructor(\n    // The parser we are using.\n    parser, \n    // The options passed to this parse.\n    options, isOpen) {\n        this.parser = parser;\n        this.options = options;\n        this.isOpen = isOpen;\n        this.open = 0;\n        let topNode = options.topNode, topContext;\n        let topOptions = wsOptionsFor(null, options.preserveWhitespace, 0) | (isOpen ? OPT_OPEN_LEFT : 0);\n        if (topNode)\n            topContext = new NodeContext(topNode.type, topNode.attrs, Mark.none, Mark.none, true, options.topMatch || topNode.type.contentMatch, topOptions);\n        else if (isOpen)\n            topContext = new NodeContext(null, null, Mark.none, Mark.none, true, null, topOptions);\n        else\n            topContext = new NodeContext(parser.schema.topNodeType, null, Mark.none, Mark.none, true, null, topOptions);\n        this.nodes = [topContext];\n        this.find = options.findPositions;\n        this.needsBlock = false;\n    }\n    get top() {\n        return this.nodes[this.open];\n    }\n    // Add a DOM node to the content. Text is inserted as text node,\n    // otherwise, the node is passed to `addElement` or, if it has a\n    // `style` attribute, `addElementWithStyles`.\n    addDOM(dom) {\n        if (dom.nodeType == 3) {\n            this.addTextNode(dom);\n        }\n        else if (dom.nodeType == 1) {\n            let style = dom.getAttribute(\"style\");\n            let marks = style ? this.readStyles(parseStyles(style)) : null, top = this.top;\n            if (marks != null)\n                for (let i = 0; i < marks.length; i++)\n                    this.addPendingMark(marks[i]);\n            this.addElement(dom);\n            if (marks != null)\n                for (let i = 0; i < marks.length; i++)\n                    this.removePendingMark(marks[i], top);\n        }\n    }\n    addTextNode(dom) {\n        let value = dom.nodeValue;\n        let top = this.top;\n        if (top.options & OPT_PRESERVE_WS_FULL ||\n            top.inlineContext(dom) ||\n            /[^ \\t\\r\\n\\u000c]/.test(value)) {\n            if (!(top.options & OPT_PRESERVE_WS)) {\n                value = value.replace(/[ \\t\\r\\n\\u000c]+/g, \" \");\n                // If this starts with whitespace, and there is no node before it, or\n                // a hard break, or a text node that ends with whitespace, strip the\n                // leading space.\n                if (/^[ \\t\\r\\n\\u000c]/.test(value) && this.open == this.nodes.length - 1) {\n                    let nodeBefore = top.content[top.content.length - 1];\n                    let domNodeBefore = dom.previousSibling;\n                    if (!nodeBefore ||\n                        (domNodeBefore && domNodeBefore.nodeName == 'BR') ||\n                        (nodeBefore.isText && /[ \\t\\r\\n\\u000c]$/.test(nodeBefore.text)))\n                        value = value.slice(1);\n                }\n            }\n            else if (!(top.options & OPT_PRESERVE_WS_FULL)) {\n                value = value.replace(/\\r?\\n|\\r/g, \" \");\n            }\n            else {\n                value = value.replace(/\\r\\n?/g, \"\\n\");\n            }\n            if (value)\n                this.insertNode(this.parser.schema.text(value));\n            this.findInText(dom);\n        }\n        else {\n            this.findInside(dom);\n        }\n    }\n    // Try to find a handler for the given tag and use that to parse. If\n    // none is found, the element's content nodes are added directly.\n    addElement(dom, matchAfter) {\n        let name = dom.nodeName.toLowerCase(), ruleID;\n        if (listTags.hasOwnProperty(name) && this.parser.normalizeLists)\n            normalizeList(dom);\n        let rule = (this.options.ruleFromNode && this.options.ruleFromNode(dom)) ||\n            (ruleID = this.parser.matchTag(dom, this, matchAfter));\n        if (rule ? rule.ignore : ignoreTags.hasOwnProperty(name)) {\n            this.findInside(dom);\n            this.ignoreFallback(dom);\n        }\n        else if (!rule || rule.skip || rule.closeParent) {\n            if (rule && rule.closeParent)\n                this.open = Math.max(0, this.open - 1);\n            else if (rule && rule.skip.nodeType)\n                dom = rule.skip;\n            let sync, top = this.top, oldNeedsBlock = this.needsBlock;\n            if (blockTags.hasOwnProperty(name)) {\n                sync = true;\n                if (!top.type)\n                    this.needsBlock = true;\n            }\n            else if (!dom.firstChild) {\n                this.leafFallback(dom);\n                return;\n            }\n            this.addAll(dom);\n            if (sync)\n                this.sync(top);\n            this.needsBlock = oldNeedsBlock;\n        }\n        else {\n            this.addElementByRule(dom, rule, rule.consuming === false ? ruleID : undefined);\n        }\n    }\n    // Called for leaf DOM nodes that would otherwise be ignored\n    leafFallback(dom) {\n        if (dom.nodeName == \"BR\" && this.top.type && this.top.type.inlineContent)\n            this.addTextNode(dom.ownerDocument.createTextNode(\"\\n\"));\n    }\n    // Called for ignored nodes\n    ignoreFallback(dom) {\n        // Ignored BR nodes should at least create an inline context\n        if (dom.nodeName == \"BR\" && (!this.top.type || !this.top.type.inlineContent))\n            this.findPlace(this.parser.schema.text(\"-\"));\n    }\n    // Run any style parser associated with the node's styles. Either\n    // return an array of marks, or null to indicate some of the styles\n    // had a rule with `ignore` set.\n    readStyles(styles) {\n        let marks = Mark.none;\n        style: for (let i = 0; i < styles.length; i += 2) {\n            for (let after = undefined;;) {\n                let rule = this.parser.matchStyle(styles[i], styles[i + 1], this, after);\n                if (!rule)\n                    continue style;\n                if (rule.ignore)\n                    return null;\n                marks = this.parser.schema.marks[rule.mark].create(rule.attrs).addToSet(marks);\n                if (rule.consuming === false)\n                    after = rule;\n                else\n                    break;\n            }\n        }\n        return marks;\n    }\n    // Look up a handler for the given node. If none are found, return\n    // false. Otherwise, apply it, use its return value to drive the way\n    // the node's content is wrapped, and return true.\n    addElementByRule(dom, rule, continueAfter) {\n        let sync, nodeType, mark;\n        if (rule.node) {\n            nodeType = this.parser.schema.nodes[rule.node];\n            if (!nodeType.isLeaf) {\n                sync = this.enter(nodeType, rule.attrs || null, rule.preserveWhitespace);\n            }\n            else if (!this.insertNode(nodeType.create(rule.attrs))) {\n                this.leafFallback(dom);\n            }\n        }\n        else {\n            let markType = this.parser.schema.marks[rule.mark];\n            mark = markType.create(rule.attrs);\n            this.addPendingMark(mark);\n        }\n        let startIn = this.top;\n        if (nodeType && nodeType.isLeaf) {\n            this.findInside(dom);\n        }\n        else if (continueAfter) {\n            this.addElement(dom, continueAfter);\n        }\n        else if (rule.getContent) {\n            this.findInside(dom);\n            rule.getContent(dom, this.parser.schema).forEach(node => this.insertNode(node));\n        }\n        else {\n            let contentDOM = dom;\n            if (typeof rule.contentElement == \"string\")\n                contentDOM = dom.querySelector(rule.contentElement);\n            else if (typeof rule.contentElement == \"function\")\n                contentDOM = rule.contentElement(dom);\n            else if (rule.contentElement)\n                contentDOM = rule.contentElement;\n            this.findAround(dom, contentDOM, true);\n            this.addAll(contentDOM);\n        }\n        if (sync && this.sync(startIn))\n            this.open--;\n        if (mark)\n            this.removePendingMark(mark, startIn);\n    }\n    // Add all child nodes between `startIndex` and `endIndex` (or the\n    // whole node, if not given). If `sync` is passed, use it to\n    // synchronize after every block element.\n    addAll(parent, startIndex, endIndex) {\n        let index = startIndex || 0;\n        for (let dom = startIndex ? parent.childNodes[startIndex] : parent.firstChild, end = endIndex == null ? null : parent.childNodes[endIndex]; dom != end; dom = dom.nextSibling, ++index) {\n            this.findAtPoint(parent, index);\n            this.addDOM(dom);\n        }\n        this.findAtPoint(parent, index);\n    }\n    // Try to find a way to fit the given node type into the current\n    // context. May add intermediate wrappers and/or leave non-solid\n    // nodes that we're in.\n    findPlace(node) {\n        let route, sync;\n        for (let depth = this.open; depth >= 0; depth--) {\n            let cx = this.nodes[depth];\n            let found = cx.findWrapping(node);\n            if (found && (!route || route.length > found.length)) {\n                route = found;\n                sync = cx;\n                if (!found.length)\n                    break;\n            }\n            if (cx.solid)\n                break;\n        }\n        if (!route)\n            return false;\n        this.sync(sync);\n        for (let i = 0; i < route.length; i++)\n            this.enterInner(route[i], null, false);\n        return true;\n    }\n    // Try to insert the given node, adjusting the context when needed.\n    insertNode(node) {\n        if (node.isInline && this.needsBlock && !this.top.type) {\n            let block = this.textblockFromContext();\n            if (block)\n                this.enterInner(block);\n        }\n        if (this.findPlace(node)) {\n            this.closeExtra();\n            let top = this.top;\n            top.applyPending(node.type);\n            if (top.match)\n                top.match = top.match.matchType(node.type);\n            let marks = top.activeMarks;\n            for (let i = 0; i < node.marks.length; i++)\n                if (!top.type || top.type.allowsMarkType(node.marks[i].type))\n                    marks = node.marks[i].addToSet(marks);\n            top.content.push(node.mark(marks));\n            return true;\n        }\n        return false;\n    }\n    // Try to start a node of the given type, adjusting the context when\n    // necessary.\n    enter(type, attrs, preserveWS) {\n        let ok = this.findPlace(type.create(attrs));\n        if (ok)\n            this.enterInner(type, attrs, true, preserveWS);\n        return ok;\n    }\n    // Open a node of the given type\n    enterInner(type, attrs = null, solid = false, preserveWS) {\n        this.closeExtra();\n        let top = this.top;\n        top.applyPending(type);\n        top.match = top.match && top.match.matchType(type);\n        let options = wsOptionsFor(type, preserveWS, top.options);\n        if ((top.options & OPT_OPEN_LEFT) && top.content.length == 0)\n            options |= OPT_OPEN_LEFT;\n        this.nodes.push(new NodeContext(type, attrs, top.activeMarks, top.pendingMarks, solid, null, options));\n        this.open++;\n    }\n    // Make sure all nodes above this.open are finished and added to\n    // their parents\n    closeExtra(openEnd = false) {\n        let i = this.nodes.length - 1;\n        if (i > this.open) {\n            for (; i > this.open; i--)\n                this.nodes[i - 1].content.push(this.nodes[i].finish(openEnd));\n            this.nodes.length = this.open + 1;\n        }\n    }\n    finish() {\n        this.open = 0;\n        this.closeExtra(this.isOpen);\n        return this.nodes[0].finish(this.isOpen || this.options.topOpen);\n    }\n    sync(to) {\n        for (let i = this.open; i >= 0; i--)\n            if (this.nodes[i] == to) {\n                this.open = i;\n                return true;\n            }\n        return false;\n    }\n    get currentPos() {\n        this.closeExtra();\n        let pos = 0;\n        for (let i = this.open; i >= 0; i--) {\n            let content = this.nodes[i].content;\n            for (let j = content.length - 1; j >= 0; j--)\n                pos += content[j].nodeSize;\n            if (i)\n                pos++;\n        }\n        return pos;\n    }\n    findAtPoint(parent, offset) {\n        if (this.find)\n            for (let i = 0; i < this.find.length; i++) {\n                if (this.find[i].node == parent && this.find[i].offset == offset)\n                    this.find[i].pos = this.currentPos;\n            }\n    }\n    findInside(parent) {\n        if (this.find)\n            for (let i = 0; i < this.find.length; i++) {\n                if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node))\n                    this.find[i].pos = this.currentPos;\n            }\n    }\n    findAround(parent, content, before) {\n        if (parent != content && this.find)\n            for (let i = 0; i < this.find.length; i++) {\n                if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node)) {\n                    let pos = content.compareDocumentPosition(this.find[i].node);\n                    if (pos & (before ? 2 : 4))\n                        this.find[i].pos = this.currentPos;\n                }\n            }\n    }\n    findInText(textNode) {\n        if (this.find)\n            for (let i = 0; i < this.find.length; i++) {\n                if (this.find[i].node == textNode)\n                    this.find[i].pos = this.currentPos - (textNode.nodeValue.length - this.find[i].offset);\n            }\n    }\n    // Determines whether the given context string matches this context.\n    matchesContext(context) {\n        if (context.indexOf(\"|\") > -1)\n            return context.split(/\\s*\\|\\s*/).some(this.matchesContext, this);\n        let parts = context.split(\"/\");\n        let option = this.options.context;\n        let useRoot = !this.isOpen && (!option || option.parent.type == this.nodes[0].type);\n        let minDepth = -(option ? option.depth + 1 : 0) + (useRoot ? 0 : 1);\n        let match = (i, depth) => {\n            for (; i >= 0; i--) {\n                let part = parts[i];\n                if (part == \"\") {\n                    if (i == parts.length - 1 || i == 0)\n                        continue;\n                    for (; depth >= minDepth; depth--)\n                        if (match(i - 1, depth))\n                            return true;\n                    return false;\n                }\n                else {\n                    let next = depth > 0 || (depth == 0 && useRoot) ? this.nodes[depth].type\n                        : option && depth >= minDepth ? option.node(depth - minDepth).type\n                            : null;\n                    if (!next || (next.name != part && next.groups.indexOf(part) == -1))\n                        return false;\n                    depth--;\n                }\n            }\n            return true;\n        };\n        return match(parts.length - 1, this.open);\n    }\n    textblockFromContext() {\n        let $context = this.options.context;\n        if ($context)\n            for (let d = $context.depth; d >= 0; d--) {\n                let deflt = $context.node(d).contentMatchAt($context.indexAfter(d)).defaultType;\n                if (deflt && deflt.isTextblock && deflt.defaultAttrs)\n                    return deflt;\n            }\n        for (let name in this.parser.schema.nodes) {\n            let type = this.parser.schema.nodes[name];\n            if (type.isTextblock && type.defaultAttrs)\n                return type;\n        }\n    }\n    addPendingMark(mark) {\n        let found = findSameMarkInSet(mark, this.top.pendingMarks);\n        if (found)\n            this.top.stashMarks.push(found);\n        this.top.pendingMarks = mark.addToSet(this.top.pendingMarks);\n    }\n    removePendingMark(mark, upto) {\n        for (let depth = this.open; depth >= 0; depth--) {\n            let level = this.nodes[depth];\n            let found = level.pendingMarks.lastIndexOf(mark);\n            if (found > -1) {\n                level.pendingMarks = mark.removeFromSet(level.pendingMarks);\n            }\n            else {\n                level.activeMarks = mark.removeFromSet(level.activeMarks);\n                let stashMark = level.popFromStashMark(mark);\n                if (stashMark && level.type && level.type.allowsMarkType(stashMark.type))\n                    level.activeMarks = stashMark.addToSet(level.activeMarks);\n            }\n            if (level == upto)\n                break;\n        }\n    }\n}\n// Kludge to work around directly nested list nodes produced by some\n// tools and allowed by browsers to mean that the nested list is\n// actually part of the list item above it.\nfunction normalizeList(dom) {\n    for (let child = dom.firstChild, prevItem = null; child; child = child.nextSibling) {\n        let name = child.nodeType == 1 ? child.nodeName.toLowerCase() : null;\n        if (name && listTags.hasOwnProperty(name) && prevItem) {\n            prevItem.appendChild(child);\n            child = prevItem;\n        }\n        else if (name == \"li\") {\n            prevItem = child;\n        }\n        else if (name) {\n            prevItem = null;\n        }\n    }\n}\n// Apply a CSS selector.\nfunction matches(dom, selector) {\n    return (dom.matches || dom.msMatchesSelector || dom.webkitMatchesSelector || dom.mozMatchesSelector).call(dom, selector);\n}\n// Tokenize a style attribute into property/value pairs.\nfunction parseStyles(style) {\n    let re = /\\s*([\\w-]+)\\s*:\\s*([^;]+)/g, m, result = [];\n    while (m = re.exec(style))\n        result.push(m[1], m[2].trim());\n    return result;\n}\nfunction copy(obj) {\n    let copy = {};\n    for (let prop in obj)\n        copy[prop] = obj[prop];\n    return copy;\n}\n// Used when finding a mark at the top level of a fragment parse.\n// Checks whether it would be reasonable to apply a given mark type to\n// a given node, by looking at the way the mark occurs in the schema.\nfunction markMayApply(markType, nodeType) {\n    let nodes = nodeType.schema.nodes;\n    for (let name in nodes) {\n        let parent = nodes[name];\n        if (!parent.allowsMarkType(markType))\n            continue;\n        let seen = [], scan = (match) => {\n            seen.push(match);\n            for (let i = 0; i < match.edgeCount; i++) {\n                let { type, next } = match.edge(i);\n                if (type == nodeType)\n                    return true;\n                if (seen.indexOf(next) < 0 && scan(next))\n                    return true;\n            }\n        };\n        if (scan(parent.contentMatch))\n            return true;\n    }\n}\nfunction findSameMarkInSet(mark, set) {\n    for (let i = 0; i < set.length; i++) {\n        if (mark.eq(set[i]))\n            return set[i];\n    }\n}\n\n/**\nA DOM serializer knows how to convert ProseMirror nodes and\nmarks of various types to DOM nodes.\n*/\nclass DOMSerializer {\n    /**\n    Create a serializer. `nodes` should map node names to functions\n    that take a node and return a description of the corresponding\n    DOM. `marks` does the same for mark names, but also gets an\n    argument that tells it whether the mark's content is block or\n    inline content (for typical use, it'll always be inline). A mark\n    serializer may be `null` to indicate that marks of that type\n    should not be serialized.\n    */\n    constructor(\n    /**\n    The node serialization functions.\n    */\n    nodes, \n    /**\n    The mark serialization functions.\n    */\n    marks) {\n        this.nodes = nodes;\n        this.marks = marks;\n    }\n    /**\n    Serialize the content of this fragment to a DOM fragment. When\n    not in the browser, the `document` option, containing a DOM\n    document, should be passed so that the serializer can create\n    nodes.\n    */\n    serializeFragment(fragment, options = {}, target) {\n        if (!target)\n            target = doc(options).createDocumentFragment();\n        let top = target, active = [];\n        fragment.forEach(node => {\n            if (active.length || node.marks.length) {\n                let keep = 0, rendered = 0;\n                while (keep < active.length && rendered < node.marks.length) {\n                    let next = node.marks[rendered];\n                    if (!this.marks[next.type.name]) {\n                        rendered++;\n                        continue;\n                    }\n                    if (!next.eq(active[keep][0]) || next.type.spec.spanning === false)\n                        break;\n                    keep++;\n                    rendered++;\n                }\n                while (keep < active.length)\n                    top = active.pop()[1];\n                while (rendered < node.marks.length) {\n                    let add = node.marks[rendered++];\n                    let markDOM = this.serializeMark(add, node.isInline, options);\n                    if (markDOM) {\n                        active.push([add, top]);\n                        top.appendChild(markDOM.dom);\n                        top = markDOM.contentDOM || markDOM.dom;\n                    }\n                }\n            }\n            top.appendChild(this.serializeNodeInner(node, options));\n        });\n        return target;\n    }\n    /**\n    @internal\n    */\n    serializeNodeInner(node, options) {\n        let { dom, contentDOM } = DOMSerializer.renderSpec(doc(options), this.nodes[node.type.name](node));\n        if (contentDOM) {\n            if (node.isLeaf)\n                throw new RangeError(\"Content hole not allowed in a leaf node spec\");\n            this.serializeFragment(node.content, options, contentDOM);\n        }\n        return dom;\n    }\n    /**\n    Serialize this node to a DOM node. This can be useful when you\n    need to serialize a part of a document, as opposed to the whole\n    document. To serialize a whole document, use\n    [`serializeFragment`](https://prosemirror.net/docs/ref/#model.DOMSerializer.serializeFragment) on\n    its [content](https://prosemirror.net/docs/ref/#model.Node.content).\n    */\n    serializeNode(node, options = {}) {\n        let dom = this.serializeNodeInner(node, options);\n        for (let i = node.marks.length - 1; i >= 0; i--) {\n            let wrap = this.serializeMark(node.marks[i], node.isInline, options);\n            if (wrap) {\n                (wrap.contentDOM || wrap.dom).appendChild(dom);\n                dom = wrap.dom;\n            }\n        }\n        return dom;\n    }\n    /**\n    @internal\n    */\n    serializeMark(mark, inline, options = {}) {\n        let toDOM = this.marks[mark.type.name];\n        return toDOM && DOMSerializer.renderSpec(doc(options), toDOM(mark, inline));\n    }\n    /**\n    Render an [output spec](https://prosemirror.net/docs/ref/#model.DOMOutputSpec) to a DOM node. If\n    the spec has a hole (zero) in it, `contentDOM` will point at the\n    node with the hole.\n    */\n    static renderSpec(doc, structure, xmlNS = null) {\n        if (typeof structure == \"string\")\n            return { dom: doc.createTextNode(structure) };\n        if (structure.nodeType != null)\n            return { dom: structure };\n        if (structure.dom && structure.dom.nodeType != null)\n            return structure;\n        let tagName = structure[0], space = tagName.indexOf(\" \");\n        if (space > 0) {\n            xmlNS = tagName.slice(0, space);\n            tagName = tagName.slice(space + 1);\n        }\n        let contentDOM;\n        let dom = (xmlNS ? doc.createElementNS(xmlNS, tagName) : doc.createElement(tagName));\n        let attrs = structure[1], start = 1;\n        if (attrs && typeof attrs == \"object\" && attrs.nodeType == null && !Array.isArray(attrs)) {\n            start = 2;\n            for (let name in attrs)\n                if (attrs[name] != null) {\n                    let space = name.indexOf(\" \");\n                    if (space > 0)\n                        dom.setAttributeNS(name.slice(0, space), name.slice(space + 1), attrs[name]);\n                    else\n                        dom.setAttribute(name, attrs[name]);\n                }\n        }\n        for (let i = start; i < structure.length; i++) {\n            let child = structure[i];\n            if (child === 0) {\n                if (i < structure.length - 1 || i > start)\n                    throw new RangeError(\"Content hole must be the only child of its parent node\");\n                return { dom, contentDOM: dom };\n            }\n            else {\n                let { dom: inner, contentDOM: innerContent } = DOMSerializer.renderSpec(doc, child, xmlNS);\n                dom.appendChild(inner);\n                if (innerContent) {\n                    if (contentDOM)\n                        throw new RangeError(\"Multiple content holes\");\n                    contentDOM = innerContent;\n                }\n            }\n        }\n        return { dom, contentDOM };\n    }\n    /**\n    Build a serializer using the [`toDOM`](https://prosemirror.net/docs/ref/#model.NodeSpec.toDOM)\n    properties in a schema's node and mark specs.\n    */\n    static fromSchema(schema) {\n        return schema.cached.domSerializer ||\n            (schema.cached.domSerializer = new DOMSerializer(this.nodesFromSchema(schema), this.marksFromSchema(schema)));\n    }\n    /**\n    Gather the serializers in a schema's node specs into an object.\n    This can be useful as a base to build a custom serializer from.\n    */\n    static nodesFromSchema(schema) {\n        let result = gatherToDOM(schema.nodes);\n        if (!result.text)\n            result.text = node => node.text;\n        return result;\n    }\n    /**\n    Gather the serializers in a schema's mark specs into an object.\n    */\n    static marksFromSchema(schema) {\n        return gatherToDOM(schema.marks);\n    }\n}\nfunction gatherToDOM(obj) {\n    let result = {};\n    for (let name in obj) {\n        let toDOM = obj[name].spec.toDOM;\n        if (toDOM)\n            result[name] = toDOM;\n    }\n    return result;\n}\nfunction doc(options) {\n    return options.document || window.document;\n}\n\nexport { ContentMatch, DOMParser, DOMSerializer, Fragment, Mark, MarkType, Node, NodeRange, NodeType, ReplaceError, ResolvedPos, Schema, Slice };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}